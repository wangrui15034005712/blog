<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>去年夏天</title>
  
  
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="http://lastsummer.top/blog/"/>
  <updated>2019-06-24T13:09:48.021Z</updated>
  <id>http://lastsummer.top/blog/</id>
  
  <author>
    <name>Wang Rui</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Linux常用命令</title>
    <link href="http://lastsummer.top/blog/2019/06/24/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://lastsummer.top/blog/2019/06/24/Linux常用命令/</id>
    <published>2019-06-24T12:45:00.000Z</published>
    <updated>2019-06-24T13:09:48.021Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Linux常用命令"><a href="#Linux常用命令" class="headerlink" title="Linux常用命令"></a>Linux常用命令</h3><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">netstat -tunlp|grep 端口号#查看指定端口被哪个进程占用的情况</span><br><span class="line">ps -ef|grep nginx #查看进程号</span><br><span class="line">kill -9 pid #强制杀死进程</span><br><span class="line">nohup java -jar aaa.jar &gt; spring.log &amp;#后台启动jar包打印日志到spring</span><br><span class="line">tail -f spring.log #动态查看日志</span><br></pre></td></tr></table></figure><h3 id="登录mysql查看默认字符集"><a href="#登录mysql查看默认字符集" class="headerlink" title="登录mysql查看默认字符集"></a>登录mysql查看默认字符集</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show variables like &apos;%char%&apos;;</span><br></pre></td></tr></table></figure><h3 id="mysql乱码"><a href="#mysql乱码" class="headerlink" title="mysql乱码"></a>mysql乱码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/mysql/my.cnf </span><br><span class="line"></span><br><span class="line">[client]</span><br><span class="line">default-character-set=utf8</span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line">default-storage-engine=INNODB</span><br><span class="line">character-set-server=utf8</span><br><span class="line">collation-server=utf8_general_ci</span><br></pre></td></tr></table></figure><h3 id="重启msyql"><a href="#重启msyql" class="headerlink" title="重启msyql"></a>重启msyql</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service mysql restart</span><br></pre></td></tr></table></figure><h3 id="nginx命令"><a href="#nginx命令" class="headerlink" title="nginx命令"></a>nginx命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nginx -s reload#重新启动</span><br><span class="line">nginx -s stop#停止</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Linux常用命令&quot;&gt;&lt;a href=&quot;#Linux常用命令&quot; class=&quot;headerlink&quot; title=&quot;Linux常用命令&quot;&gt;&lt;/a&gt;Linux常用命令&lt;/h3&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://lastsummer.top/blog/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://lastsummer.top/blog/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Jquery data()方法</title>
    <link href="http://lastsummer.top/blog/2019/05/22/Jquery-data-%E6%96%B9%E6%B3%95/"/>
    <id>http://lastsummer.top/blog/2019/05/22/Jquery-data-方法/</id>
    <published>2019-05-22T02:01:18.000Z</published>
    <updated>2019-05-23T07:06:50.763Z</updated>
    
    <content type="html"><![CDATA[<p>jQuery.extend 与 jQuery.fn.extend 的区别在于：<br>jQuery.extend 是在 jQuery 这个构造函数上扩展的方法，调用的时候写成 $.xxx 或者 jQuery.xxx<br>jQuery.fn.extend 是在 jQuery 原型上扩展的方法，方法被所有 jQuery 对象共享，调用的时候为 $().xxx<br>$.data()可以用来设置DOM元素的data-<em>属性，也可以用来获取DOM元素的data-</em>的值<br>Jquery.data()方法作用：给普通对象或DOM元素附加（及获取） 数据。<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=&quot;http://libs.baidu.com/jquery/1.9.0/jquery.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;div id=&apos;testDiv&apos; data-test=&quot;111&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">$(&apos;#testDiv&apos;).data(&quot;test1&quot;,&quot;1111&quot;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">    存储的值为</span><br><span class="line">    &lt;span&gt;&lt;/span&gt;</span><br><span class="line">    和</span><br><span class="line">    &lt;span&gt;&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">$(function () &#123; </span><br><span class="line">    var div = $( &quot;div&quot; )[ 0 ];</span><br><span class="line">    jQuery.data( div, &quot;test2&quot;, &#123;</span><br><span class="line">        first: 16,</span><br><span class="line">        last: &quot;pizza!&quot;</span><br><span class="line">    &#125;);</span><br><span class="line">    $( &quot;span:first&quot; ).text( jQuery.data( div, &quot;test2&quot; ).first );</span><br><span class="line">    $( &quot;span:last&quot; ).text( jQuery.data( div, &quot;test2&quot; ).last );</span><br><span class="line">console.dir($( &quot;span:last&quot; ));</span><br><span class="line">&#125;)</span><br><span class="line">var obj = &#123;&#125;;</span><br><span class="line">jQuery.data(obj, &apos;name&apos;, &apos;王麻子&apos;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><p>源码解读<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">$ = function() &#123;  </span><br><span class="line">    var expando = &quot;jQuery&quot; + (&quot;1.6&quot; + Math.random()).replace(/\D/g, &apos;&apos;);  </span><br><span class="line">  </span><br><span class="line">    function getData(cache, name) &#123;  </span><br><span class="line">        return cache[name];  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    function setData(cache, name, value) &#123;  </span><br><span class="line">        cache[name] = value;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    function getCache(obj) &#123;  </span><br><span class="line">        obj[expando] = obj[expando] || &#123;&#125;;  </span><br><span class="line">        return obj[expando];  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    return &#123;  </span><br><span class="line">        data : function(obj, name, value) &#123;  </span><br><span class="line">            var cache = getCache(obj);  </span><br><span class="line">  </span><br><span class="line">            if (value === undefined) &#123;  </span><br><span class="line">                return getData(cache, name);  </span><br><span class="line">            &#125; else &#123;  </span><br><span class="line">                setData(cache, name, value);  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;();</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;jQuery.extend 与 jQuery.fn.extend 的区别在于：&lt;br&gt;jQuery.extend 是在 jQuery 这个构造函数上扩展的方法，调用的时候写成 $.xxx 或者 jQuery.xxx&lt;br&gt;jQuery.fn.extend 是在 jQuery 原型上扩展的方法，方法被所有 jQuery 对象共享，调用的时候为 $().xxx&lt;br&gt;$.data()可以用来设置DOM元素的data-&lt;em&gt;属性，也可以用来获取DOM元素的data-&lt;/em&gt;的值&lt;br&gt;Jquery.data()方法作用：给普通对象或DOM元素附加（及获取） 数据。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Jquery" scheme="http://lastsummer.top/blog/categories/Jquery/"/>
    
    
      <category term="Jquery" scheme="http://lastsummer.top/blog/tags/Jquery/"/>
    
  </entry>
  
  <entry>
    <title>java matcher中find,matches,lookingAt方法的区别</title>
    <link href="http://lastsummer.top/blog/2019/05/13/java-matcher%E4%B8%ADfind-matches-lookingAt%E6%96%B9%E6%B3%95%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://lastsummer.top/blog/2019/05/13/java-matcher中find-matches-lookingAt方法的区别/</id>
    <published>2019-05-13T02:44:21.000Z</published>
    <updated>2019-05-14T09:40:47.558Z</updated>
    
    <content type="html"><![CDATA[<p>在Matcher类中有matches、lookingAt和find都是匹配目标的方法，但容易混淆，整理它们的区别如下：</p><ul><li>matches:整个匹配，只有整个字符序列完全匹配成功，才返回True，否则返回False。但如果前部分匹配成功，将移动下次匹配的位置。</li><li>lookingAt:部分匹配，总是从第一个字符进行匹配,匹配成功了不再继续匹配，匹配失败了,也不继续匹配。</li><li>find:部分匹配，从当前位置开始匹配，找到一个匹配的子串，将移动下次匹配的位置。</li><li>reset:给当前的Matcher对象配上个新的目标，目标是就该方法的参数；如果不给参数，reset会把Matcher设到当前字符串的开始处。<a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">Pattern pattern = Pattern.compile(&quot;\\d&#123;3,5&#125;&quot;);</span><br><span class="line">String charSequence = &quot;123-34345-234-00&quot;;</span><br><span class="line">Matcher matcher = pattern.matcher(charSequence);</span><br><span class="line"></span><br><span class="line">//虽然匹配失败，由于charSequence里面的&quot;123&quot;和pattern是匹配的</span><br><span class="line">//下次的匹配从位置4开始</span><br><span class="line">print(matcher.matches());/*false*/</span><br><span class="line">//测试匹配位置</span><br><span class="line">matcher.find();</span><br><span class="line">print(matcher.start());/*4*/</span><br><span class="line"></span><br><span class="line">//使用reset方法重置匹配位置(从0开始)</span><br><span class="line">matcher.reset();</span><br><span class="line"></span><br><span class="line">//第一次find匹配以及匹配的目标和匹配的起始位置</span><br><span class="line">print(matcher.find());/*true*/</span><br><span class="line">print(matcher.group()+&quot; - &quot;+matcher.start());/*123---0*/</span><br><span class="line">//第二次find匹配以及匹配的目标和匹配的起始位置</span><br><span class="line">print(matcher.find());/*true*/</span><br><span class="line">print(matcher.group()+&quot; - &quot;+matcher.start());/*34345---4*/</span><br><span class="line"></span><br><span class="line">//第一次lookingAt匹配以及匹配的目标和匹配的起始位置</span><br><span class="line">print(matcher.lookingAt());/*true*/</span><br><span class="line">print(matcher.group()+&quot; - &quot;+matcher.start());/*123---0*/</span><br><span class="line"></span><br><span class="line">//第二次lookingAt匹配以及匹配的目标和匹配的起始位置</span><br><span class="line">print(matcher.lookingAt());/*true*/</span><br><span class="line">print(matcher.group()+&quot; - &quot;+matcher.start());/*123---0*/</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在Matcher类中有matches、lookingAt和find都是匹配目标的方法，但容易混淆，整理它们的区别如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;matches:整个匹配，只有整个字符序列完全匹配成功，才返回True，否则返回False。但如果前部分匹配成功，将移动下次匹配的位置。&lt;/li&gt;
&lt;li&gt;lookingAt:部分匹配，总是从第一个字符进行匹配,匹配成功了不再继续匹配，匹配失败了,也不继续匹配。&lt;/li&gt;
&lt;li&gt;find:部分匹配，从当前位置开始匹配，找到一个匹配的子串，将移动下次匹配的位置。&lt;/li&gt;
&lt;li&gt;reset:给当前的Matcher对象配上个新的目标，目标是就该方法的参数；如果不给参数，reset会把Matcher设到当前字符串的开始处。&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
      <category term="java" scheme="http://lastsummer.top/blog/categories/java/"/>
    
    
      <category term="matcher" scheme="http://lastsummer.top/blog/tags/matcher/"/>
    
  </entry>
  
  <entry>
    <title>Nginx+Tomcat+Redis（负载均衡+session共享+动静分离）案例</title>
    <link href="http://lastsummer.top/blog/2019/04/29/Nginx-Tomcat-Redis%EF%BC%88%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1-session%E5%85%B1%E4%BA%AB-%E5%8A%A8%E9%9D%99%E5%88%86%E7%A6%BB%EF%BC%89%E6%A1%88%E4%BE%8B/"/>
    <id>http://lastsummer.top/blog/2019/04/29/Nginx-Tomcat-Redis（负载均衡-session共享-动静分离）案例/</id>
    <published>2019-04-29T06:30:08.000Z</published>
    <updated>2019-04-29T07:29:27.171Z</updated>
    
    <content type="html"><![CDATA[<p>今天整合了一些资源，做了一个Nginx+Tomcat+Redis（负载均衡+session共享+动静分离）完整案例，使部署的web项目能够承载较大的访问压力，Nginx实现负载均衡及动静分离，并使用Redis实现session共享。<br><a id="more"></a><br><img src="/blog/2019/04/29/Nginx-Tomcat-Redis（负载均衡-session共享-动静分离）案例/nginx1.png" alt="各版本如图所示"></p><h4 id="警告注意"><a href="#警告注意" class="headerlink" title="警告注意"></a>警告注意</h4><p>redis实现session共享，需要三个jar包（如果报错就是版本不符合，放入tomcat文件夹下的lib中）<br>tomcat-redis-session-manager1.2.jar<br>commons-pool2-2.4.1.jar<br>jedis-2.6.2.jar</p><h4 id="完整步骤"><a href="#完整步骤" class="headerlink" title="完整步骤"></a>完整步骤</h4><h5 id="Tomcat集群"><a href="#Tomcat集群" class="headerlink" title="Tomcat集群"></a>Tomcat集群</h5><p>复制多个tomcat文件，修改server.xml，修改其中的8005、8080、8009端口号（nginx和tomcat解压路径最好再同一目录D:/User/nginxTest）<br>在多个tomcat的webapps下新建nginx文件夹，在nginx下新建index.jsp(多个jsp修改<code>&lt;h2&gt;Nginx动静分离2&lt;/h2&gt;</code>)，代码如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=utf-8&quot; pageEncoding=&quot;utf-8&quot;%&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;link href=&quot;/nginx/css/index.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot; /&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;/nginx/js/index.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h2&gt;Nginx动静分离&lt;/h2&gt;</span><br><span class="line">&lt;% </span><br><span class="line">  out.println(&quot;[&quot;+request.getLocalAddr()+&quot;:&quot; +request.getLocalPort()+&quot;]&quot; + &quot;&lt;br/&gt;session id:&quot; + session.getId());  </span><br><span class="line">%&gt;</span><br><span class="line">&lt;!--当前的css、js、图片均来自nginx的静态文件--&gt;</span><br><span class="line">&lt;br/&gt;</span><br><span class="line">&lt;img alt=&quot;图片&quot; src=&quot;/nginx/img/1.png&quot; style=&quot;width:300px;height:300px&quot;&gt;</span><br><span class="line">&lt;br&gt;</span><br><span class="line">&lt;%</span><br><span class="line">  HttpSession mySession = request.getSession(false);</span><br><span class="line">  if(mySession.getAttribute(&quot;appname&quot;) == null)&#123;</span><br><span class="line">  mySession = request.getSession(true);</span><br><span class="line">  mySession.setAttribute(&quot;appname&quot;, &quot;AAA111&quot;);</span><br><span class="line">  out.println(&quot;new session:&quot;+mySession.getAttribute(&quot;appname&quot;));</span><br><span class="line">  &#125;else&#123;</span><br><span class="line">    out.println(&quot;old session:&quot;+mySession.getAttribute(&quot;appname&quot;));</span><br><span class="line">  &#125;</span><br><span class="line">%&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><h5 id="动静分离的-Nginx-配置"><a href="#动静分离的-Nginx-配置" class="headerlink" title="动静分离的 Nginx 配置"></a>动静分离的 Nginx 配置</h5><p>安装Nginx：<br>我使用的Nginx为绿色版本，双击即可开启（安装路径 D:/User/nginxTest/nginx）<br><img src="/blog/2019/04/29/Nginx-Tomcat-Redis（负载均衡-session共享-动静分离）案例/nginx2.png" alt="nginx目录结构"><br>修改 conf nginx.conf 配置文件，多个Tomcat服务器都是在这里配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">upstream test &#123;</span><br><span class="line">server 127.0.0.1:8080 weight=2;</span><br><span class="line">server 127.0.0.1:8081 weight=1;</span><br><span class="line">#配置多个tomcat，负载均衡</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">  listen       80;</span><br><span class="line">server_namelocalhost;</span><br><span class="line"></span><br><span class="line">  #charset koi8-r;</span><br><span class="line"></span><br><span class="line">  #access_log  logs/host.access.log  main;</span><br><span class="line"></span><br><span class="line">location / &#123;</span><br><span class="line">    index  index.html index.htm;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"># 所有动态请求都转发给tomcat处理 </span><br><span class="line">location ~ \.(jsp|do)$ &#123; </span><br><span class="line">proxy_next_upstream http_502 http_504 error timeout invalid_header;</span><br><span class="line">proxy_pass http://test;</span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line">#静态文件交给nginx处理</span><br><span class="line">location ~ .*\.(htm|html|gif|jpg|jpeg|png|bmp|swf|ioc|rar|zip|txt|flv|mid|doc|ppt|pdf|xls|mp3|wma)$</span><br><span class="line">&#123;</span><br><span class="line"># 绝对路径</span><br><span class="line">root  D:/User/nginxTest/nginx/webapps;</span><br><span class="line">&#125;</span><br><span class="line">#静态文件交给nginx处理</span><br><span class="line">location ~ .*\.(js|css)?$</span><br><span class="line">&#123;</span><br><span class="line"># 绝对路径</span><br><span class="line">root D:/User/nginxTest/nginx/webapps;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>由于静态文件都在<code>D:/User/nginxTest/nginx/webapps</code>中，在nginx文件夹下新建webapps，继续新建jsp中的路径<code>/nginx/img/1.png</code>、<code>/nginx/css/index.css</code>、<code>/nginx/js/index.js</code><br>现在动静分离和负载均衡就配置成功了，下面开始redis共享session<br>把前文提到的三个包加入到所有tomcat的lib中。<br>修改tomcat的conf中的context.xml，添加代码如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;Valve className=&quot;com.orangefunction.tomcat.redissessions.RedisSessionHandlerValve&quot; /&gt;  </span><br><span class="line">   &lt;Manager className=&quot;com.orangefunction.tomcat.redissessions.RedisSessionManager&quot;  </span><br><span class="line">        host=&quot;localhost&quot;   </span><br><span class="line">        port=&quot;6379&quot;</span><br><span class="line">        password=&quot;admin&quot;&lt;!--redis密码，需要修改redis.window.conf文件--》</span><br><span class="line">        database=&quot;0&quot;</span><br><span class="line">        maxInactiveInterval=&quot;60&quot; /&gt;</span><br></pre></td></tr></table></figure></p><h5 id="redis共享session"><a href="#redis共享session" class="headerlink" title="redis共享session"></a>redis共享session</h5><p>安装redis：<br>我使用的redis为绿色版本，双击即可开启（安装路径 D:/User/nginxTest/redis）<br><img src="/blog/2019/04/29/Nginx-Tomcat-Redis（负载均衡-session共享-动静分离）案例/redis1.png" alt="redis目录结构"><br>修改redis.windows.conf文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># requirepass foobared redis密码</span><br><span class="line">requirepass admin</span><br></pre></td></tr></table></figure></p><p>启动redis，<code>redis-server.exe redis.windows.conf</code><br>大功告成！<br>session默认时间是30秒，可修改tomcat下的web.xml，根据实际情况调整<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;session-config&gt;</span><br><span class="line">  &lt;session-timeout&gt;60&lt;/session-timeout&gt;&lt;!--默认是30秒--&gt;</span><br><span class="line">&lt;/session-config&gt;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天整合了一些资源，做了一个Nginx+Tomcat+Redis（负载均衡+session共享+动静分离）完整案例，使部署的web项目能够承载较大的访问压力，Nginx实现负载均衡及动静分离，并使用Redis实现session共享。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="http://lastsummer.top/blog/categories/java/"/>
    
    
      <category term="Nginx" scheme="http://lastsummer.top/blog/tags/Nginx/"/>
    
      <category term="Tomcat" scheme="http://lastsummer.top/blog/tags/Tomcat/"/>
    
      <category term="Redis" scheme="http://lastsummer.top/blog/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>Hexo+Github实现相册功能</title>
    <link href="http://lastsummer.top/blog/2019/04/26/Hexo-Github%E5%AE%9E%E7%8E%B0%E7%9B%B8%E5%86%8C%E5%8A%9F%E8%83%BD/"/>
    <id>http://lastsummer.top/blog/2019/04/26/Hexo-Github实现相册功能/</id>
    <published>2019-04-26T01:22:12.000Z</published>
    <updated>2019-04-26T06:01:39.602Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Hexo-Github-Python实现相册功能"><a href="#Hexo-Github-Python实现相册功能" class="headerlink" title="Hexo+Github+Python实现相册功能"></a>Hexo+Github+Python实现相册功能</h3><p>最终效果请看这里    <a href="https://lastsummer.top/blog/photos/">https://lastsummer.top/blog/photos/</a><br>我使用的主题是<code>hexo-theme-shana-master</code>,该主题没有集成相册功能，自己上网查了些资料,摸索摸索,终于搭建好了。<a id="more"></a></p><h3 id="实现方案"><a href="#实现方案" class="headerlink" title="实现方案"></a>实现方案</h3><p>在github上新建一个仓库，主要用于存储图片，可以通过url访问到，也方便管理（后期可以在七牛云上进行图片储存）<br>将要放到相册的图片处理成json格式的数据，然后进行访问，这里json的格式需要配合要使用的样式，所以需要处理成特定格式的json数据，下面会给出图片裁剪，因为相册显示的样式最好是正方形的的图片，这里使用脚本处理一下图片压缩，相册显示的图片是压缩后的图片，提高加载的速度，打开后的图片是原图。</p><h4 id="新建一个仓库存储图片"><a href="#新建一个仓库存储图片" class="headerlink" title="新建一个仓库存储图片"></a>新建一个仓库存储图片</h4><p>源码下载地址<code>https://github.com/wangrui15034005712/Blog-Back-Up</code><br>建立一个用于存储相册的仓库，我这里建立了名为Blog-Back-Up的仓库（和博客地址同一目录）<br><b>重点</b> 修改Blog-Back-Up中blog_photos_copy的ins.js文件，主要是里面的render函数，修改成自己的Github图片路径,这个链接很多人输入错了，不是直接的图片url，是github需要点“download”才能看到的url。<br><img src="/blog/2019/04/26/Hexo-Github实现相册功能/photo.png" alt="download文件"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var minSrc = &apos;https://raw.githubusercontent.com/wangrui15034005712/Blog-Back-Up/master/min_photos/&apos; + data.link[i];</span><br><span class="line">var src = &apos;https://raw.githubusercontent.com/wangrui15034005712/Blog-Back-Up/master/photos/&apos; + data.link[i];</span><br></pre></td></tr></table></figure></p><p><img src="/blog/2019/04/26/Hexo-Github实现相册功能/photo1.png" alt="修改ins.js文件"><br><b>重点</b> 修改Blog-Back-Up中tool.py文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 把json文件发布到自己的博客中</span><br><span class="line">with open(&quot;../Hexo/source/photos/data.json&quot;,&quot;w&quot;) as fp:</span><br><span class="line">        json.dump(final_dict, fp)</span><br><span class="line"># 我设置的是本地博客路径如 D:\User\Hexo\source\photos\data.json</span><br><span class="line"># 把下载的博客Blog-Back-Up上传至自己新创建的仓库</span><br><span class="line"># 把自己的相册图片放入到Blog-Back-Up的photos中</span><br><span class="line"># DOS命令执行 Python tool.py 命令压缩图片到min_photos及json并且发布到Github</span><br><span class="line"># 如果报错自行百度python等问题（缺少模块、版本不对）</span><br></pre></td></tr></table></figure></p><h4 id="修改Hexo博客"><a href="#修改Hexo博客" class="headerlink" title="修改Hexo博客"></a>修改Hexo博客</h4><p>在Hexo目录中打开DOS命令创建新的相册菜单<code>hexo new page &quot;photos&quot;</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page &quot;photos&quot;</span><br></pre></td></tr></table></figure></p><p>之后，去下载“empty.png” <a href="https://raw.githubusercontent.com/wangrui15034005712/blog/master/assets/img/empty.png" target="_blank" rel="noopener">点击这里，右键保存下载</a><br>在Hexo本地仓库source下新建一个文件夹命名为assets,再在assets下新建一个文件夹命名为img。最后把empty.png放到img里面。<br>把之前clone下来的Blog-Back-Up下blog_photos_copy的所有文件copy到Hexo本地仓库source中的photo文件夹下<br>如无法显示，可能是图片路径，网络传输较慢，js、css样式待优化，小编自己的样式是经过调整的。<br>有问题可以在下方评论区评论。<br>个人博客：<a href="https://lastsummer.top">去年夏天</a><br>参考博客：<a href="https://blog.csdn.net/wardseptember/article/details/82780684" target="_blank" rel="noopener">hexo+yilia完美实现相册功能</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Hexo-Github-Python实现相册功能&quot;&gt;&lt;a href=&quot;#Hexo-Github-Python实现相册功能&quot; class=&quot;headerlink&quot; title=&quot;Hexo+Github+Python实现相册功能&quot;&gt;&lt;/a&gt;Hexo+Github+Python实现相册功能&lt;/h3&gt;&lt;p&gt;最终效果请看这里    &lt;a href=&quot;https://lastsummer.top/blog/photos/&quot;&gt;https://lastsummer.top/blog/photos/&lt;/a&gt;&lt;br&gt;我使用的主题是&lt;code&gt;hexo-theme-shana-master&lt;/code&gt;,该主题没有集成相册功能，自己上网查了些资料,摸索摸索,终于搭建好了。&lt;/p&gt;
    
    </summary>
    
      <category term="hexo" scheme="http://lastsummer.top/blog/categories/hexo/"/>
    
    
      <category term="Hexo" scheme="http://lastsummer.top/blog/tags/Hexo/"/>
    
      <category term="Github" scheme="http://lastsummer.top/blog/tags/Github/"/>
    
      <category term="Python" scheme="http://lastsummer.top/blog/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>RabbitMq入门及六种模式讲解</title>
    <link href="http://lastsummer.top/blog/2019/04/23/RabbitMq%E5%85%A5%E9%97%A8%E5%8F%8A%E5%85%AD%E7%A7%8D%E6%A8%A1%E5%BC%8F%E8%AE%B2%E8%A7%A3/"/>
    <id>http://lastsummer.top/blog/2019/04/23/RabbitMq入门及六种模式讲解/</id>
    <published>2019-04-23T08:25:52.000Z</published>
    <updated>2019-04-28T02:09:08.067Z</updated>
    
    <content type="html"><![CDATA[<h3 id="RabbitMQ-术语说明："><a href="#RabbitMQ-术语说明：" class="headerlink" title="RabbitMQ 术语说明："></a>RabbitMQ 术语说明：</h3><p>Server(Broker):接收客户端连接，实现AMQP协议的消息队列和路由功能的进程；<br>Virtual Host：虚拟主机的概念，类似权限控制组，一个Virtual Host里可以有多个Exchange和Queue,权限控制的最小丽都是Virtual Host；<br>Exchange:交换机，接收生产者发送的消息，并根据Routing Key将消息路由到服务器中的队列Queue。<br>ExchangeType:交换机类型决定了路由消息行为，RabbitMQ中有三种类型Exchange，分别是fanout、direct、topic；<br>Message Queue：消息队列，用于存储还未被消费者消费的消息；<br>Message：由Header和body组成，Header是由生产者添加的各种属性的集合，包括Message是否被持久化、优先级是多少、由哪个Message Queue接收等；body是真正需要发送的数据内容；<br>BindingKey：绑定关键字，将一个特定的Exchange和一个特定的Queue绑定起来。<br><a id="more"></a></p><h3 id="RabbitMQ-五种队列模式与-SpringBoot-实例"><a href="#RabbitMQ-五种队列模式与-SpringBoot-实例" class="headerlink" title="RabbitMQ 五种队列模式与(SpringBoot)实例"></a>RabbitMQ 五种队列模式与(SpringBoot)实例</h3><h5 id="在pom-xml中添加相关依赖"><a href="#在pom-xml中添加相关依赖" class="headerlink" title="在pom.xml中添加相关依赖"></a>在pom.xml中添加相关依赖</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--消息队列模块--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;spring-boot-starter-amqp&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h5 id="修改application-properties"><a href="#修改application-properties" class="headerlink" title="修改application.properties"></a>修改application.properties</h5><p>在application.properties添加rabbitmq的相关信息（默认账号密码guest）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">spring.rabbitmq.host=127.0.0.1</span><br><span class="line">spring.rabbitmq.port=5672</span><br><span class="line">spring.rabbitmq.username=guest</span><br><span class="line">spring.rabbitmq.password=guest</span><br></pre></td></tr></table></figure></p><h4 id="简单模式-Hello-World-工作模式"><a href="#简单模式-Hello-World-工作模式" class="headerlink" title="简单模式 Hello World + 工作模式"></a>简单模式 Hello World + 工作模式</h4><p>简单模式：一个生产者P发送消息到队列hello,一个消费者C接收</p><h5 id="一对一的使用配置"><a href="#一对一的使用配置" class="headerlink" title="一对一的使用配置"></a>一对一的使用配置</h5><p>一对一，一个发送者发送消息，一个接受者接受消息。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">package com.example.springboot.test1;</span><br><span class="line"></span><br><span class="line">import org.springframework.amqp.core.Queue;</span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @Author: wangrui</span><br><span class="line"> * @Description: 队列配置，队列的名称，发送者和接受者的名称必须一致，否则接收不到消息</span><br><span class="line"> * @Date: 2019/4/26 16：54</span><br><span class="line"> */</span><br><span class="line">@Configuration</span><br><span class="line">public class RabbitMqConfig &#123;</span><br><span class="line"></span><br><span class="line">  public Queue Queue1() &#123;</span><br><span class="line">    return new Queue(&quot;lyhTest1&quot;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">package com.example.springboot.test1;</span><br><span class="line"></span><br><span class="line">import org.springframework.amqp.core.AmqpTemplate;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line">import java.util.Date;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @Author: wangrui</span><br><span class="line"> * @Description: 发送者通过Controller类发送消息：</span><br><span class="line"> * @Date: 2019/4/26 16：54</span><br><span class="line"> */</span><br><span class="line">@RestController</span><br><span class="line">public class SendController &#123;</span><br><span class="line"></span><br><span class="line">  @Autowired</span><br><span class="line">  private AmqpTemplate amqpTemplate;</span><br><span class="line"></span><br><span class="line">  //一对一</span><br><span class="line">  @RequestMapping(&quot;/send&quot;)</span><br><span class="line">  public String send()&#123;</span><br><span class="line">    String content=&quot;Date:&quot;+new Date();</span><br><span class="line">    amqpTemplate.convertAndSend(&quot;lyhTest1&quot;,content);</span><br><span class="line">    return content;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">package com.example.springboot.test1;</span><br><span class="line"></span><br><span class="line">import org.springframework.amqp.rabbit.annotation.RabbitHandler;</span><br><span class="line">import org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @Author: wangrui</span><br><span class="line"> * @Description: 接收者Receiver1类接收信息</span><br><span class="line"> * @Date: 2019/4/26 16：54</span><br><span class="line"> */</span><br><span class="line">@Component</span><br><span class="line">@RabbitListener(queues = &quot;lyhTest1&quot;)</span><br><span class="line">public class Receiver1 &#123;</span><br><span class="line"></span><br><span class="line">  @RabbitHandler</span><br><span class="line">  public void receiver(String msg)&#123;</span><br><span class="line">    System.out.println(&quot;Test1 receiver1:&quot;+msg);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：浏览器访问地址：<a href="http://localhost:8080/send" target="_blank" rel="noopener">http://localhost:8080/send</a><br>终端输出Receiver1接收的内容<br>查看RabbitMQ的Web客户端<a href="http://localhost:15672" target="_blank" rel="noopener">http://localhost:15672</a> 可以在列表里看到之前创建的队列。</p><h5 id="一对多的使用配置"><a href="#一对多的使用配置" class="headerlink" title="一对多的使用配置"></a>一对多的使用配置</h5><p>一对多，一个发送者发送消息，多个接受者接受同一个消息，添加新的接收者Receiver2。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">package com.example.springboot.test1;</span><br><span class="line"></span><br><span class="line">import org.springframework.amqp.rabbit.annotation.RabbitHandler;</span><br><span class="line">import org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line">@Component</span><br><span class="line">@RabbitListener(queues = &quot;lyhTest1&quot;)</span><br><span class="line">//这里的lyhTest2是多对多，如果要测试一对多改成lyhTest1</span><br><span class="line">public class Receiver2 &#123;</span><br><span class="line"></span><br><span class="line">    @RabbitHandler</span><br><span class="line">    public void receiver(String msg)&#123;</span><br><span class="line">        System.out.println(&quot;Test1 receiver2:&quot;+msg);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在SendController添加一对多发送方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//可以看到发送者发送一个消息被多个接收者接收，注意这里的消息只能被消费一次（一对多）</span><br><span class="line">@RequestMapping(&quot;/multiSend&quot;)</span><br><span class="line">public String multiSend()&#123;</span><br><span class="line">  StringBuilder times=new StringBuilder();</span><br><span class="line">  for(int i=0;i&lt;10;i++)&#123;</span><br><span class="line">    long time=System.nanoTime();</span><br><span class="line">    amqpTemplate.convertAndSend(&quot;lyhTest1&quot;,&quot;第&quot;+i+&quot;次发送的时间：&quot;+time);</span><br><span class="line">    times.append(time+&quot;&lt;br&gt;&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">  return times.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>测试，浏览器访问<a href="http://localhost:8080/multiSend" target="_blank" rel="noopener">http://localhost:8080/multiSend</a></p><h5 id="多对多的使用配置"><a href="#多对多的使用配置" class="headerlink" title="多对多的使用配置"></a>多对多的使用配置</h5><p>在配置类RabbbitMqConfig添加新的队列名lyhTest2<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">public class RabbitMqConfig &#123;</span><br><span class="line"></span><br><span class="line">@Bean</span><br><span class="line">public Queue Queue1() &#123;</span><br><span class="line">  return new Queue(&quot;lyhTest1&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Bean</span><br><span class="line">public Queue Queue2() &#123;</span><br><span class="line">  return new Queue(&quot;lyhTest2&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>修改Receiver2接收队列名为lyhTest2<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@Component</span><br><span class="line">@RabbitListener(queues = &quot;lyhTest2&quot;)</span><br><span class="line">//这里的lyhTest2是多对多，如果要测试一对多改成lyhTest1</span><br><span class="line">public class Receiver2 &#123;</span><br><span class="line"></span><br><span class="line">@RabbitHandler</span><br><span class="line">public void receiver(String msg)&#123;</span><br><span class="line">  System.out.println(&quot;Test1 receiver2:&quot;+msg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在SendController添加多对多发送消息的方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@RequestMapping(&quot;/multi2MultiSend&quot;)</span><br><span class="line">public String mutil2MutilSend()&#123;</span><br><span class="line">StringBuilder times=new StringBuilder();</span><br><span class="line">for(int i=0;i&lt;10;i++)&#123;</span><br><span class="line">  long time=System.nanoTime();</span><br><span class="line">  amqpTemplate.convertAndSend(&quot;lyhTest1&quot;,&quot;第&quot;+i+&quot;次发送的时间：&quot;+time);</span><br><span class="line">  amqpTemplate.convertAndSend(&quot;lyhTest2&quot;,&quot;第&quot;+i+&quot;次发送的时间：&quot;+time);</span><br><span class="line">  times.append(time+&quot;&lt;br&gt;&quot;);</span><br><span class="line">&#125;</span><br><span class="line">return times.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>测试，浏览器访问：<a href="http://localhost:8080/multi2MultiSend" target="_blank" rel="noopener">http://localhost:8080/multi2MultiSend</a></p><h4 id="Topic-Exchange（自定义程度较高-通配符）"><a href="#Topic-Exchange（自定义程度较高-通配符）" class="headerlink" title="Topic Exchange（自定义程度较高 通配符）"></a>Topic Exchange（自定义程度较高 通配符）</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">package com.example.springboot.test2;</span><br><span class="line"></span><br><span class="line">  import org.springframework.amqp.core.Binding;</span><br><span class="line">  import org.springframework.amqp.core.BindingBuilder;</span><br><span class="line">  import org.springframework.amqp.core.Queue;</span><br><span class="line">  import org.springframework.amqp.core.TopicExchange;</span><br><span class="line">  import org.springframework.context.annotation.Bean;</span><br><span class="line">  import org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @Author:wangrui</span><br><span class="line"> * @Description:Topic Exchange配置类</span><br><span class="line"> * @Date:2019/4/18 9:32</span><br><span class="line"> */</span><br><span class="line">@Configuration</span><br><span class="line">public class RabbitMqTopicConfig &#123;</span><br><span class="line"></span><br><span class="line">  //只接一个topic</span><br><span class="line">  final static String message = &quot;topic.message&quot;;</span><br><span class="line">  //接收多个topic</span><br><span class="line">  final static String messages = &quot;topic.messages&quot;;</span><br><span class="line"></span><br><span class="line">  @Bean</span><br><span class="line">  public Queue queueMessage() &#123;</span><br><span class="line">    return new Queue(RabbitMqTopicConfig.message);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @Bean</span><br><span class="line">  public Queue queueMessages() &#123;</span><br><span class="line">    return new Queue(RabbitMqTopicConfig.messages);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @Bean</span><br><span class="line">  TopicExchange exchange() &#123;</span><br><span class="line">    return new TopicExchange(&quot;exchange&quot;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @Bean</span><br><span class="line">  Binding bindingExchangeMessage(Queue queueMessage, TopicExchange exchange) &#123;</span><br><span class="line">    return BindingBuilder.bind(queueMessage).to(exchange).with(&quot;topic.message&quot;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @Bean</span><br><span class="line">  Binding bindingExchangeMessages(Queue queueMessages, TopicExchange exchange) &#123;</span><br><span class="line">    //这里的#表示零个或多个词。</span><br><span class="line">    return BindingBuilder.bind(queueMessages).to(exchange).with(&quot;topic.#&quot;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">package com.example.springboot.test2;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import org.springframework.amqp.rabbit.annotation.RabbitHandler;</span><br><span class="line">import org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line">@Component</span><br><span class="line">@RabbitListener(queues = &quot;topic.message&quot;)</span><br><span class="line">public class TopicReceiver1 &#123;</span><br><span class="line"></span><br><span class="line">  @RabbitHandler</span><br><span class="line">  public void process(String msg) &#123;</span><br><span class="line">    System.out.println(&quot;TopicReceiver1:&quot; + msg);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">package com.example.springboot.test2;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import org.springframework.amqp.rabbit.annotation.RabbitHandler;</span><br><span class="line">import org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line">@Component</span><br><span class="line">@RabbitListener(queues = &quot;topic.messages&quot;)</span><br><span class="line">public class TopicReceiver2 &#123;</span><br><span class="line"></span><br><span class="line">  @RabbitHandler</span><br><span class="line">  public void process(String msg) &#123;</span><br><span class="line">    System.out.println(&quot;TopicReceiver2 :&quot; + msg);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">package com.example.springboot.test2;</span><br><span class="line"></span><br><span class="line">import org.springframework.amqp.core.AmqpTemplate;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line">@RestController</span><br><span class="line">public class SendController1 &#123;</span><br><span class="line"></span><br><span class="line">  @Autowired</span><br><span class="line">  private AmqpTemplate amqpTemplate;</span><br><span class="line"></span><br><span class="line">  @RequestMapping(&quot;/topicSend1&quot;)</span><br><span class="line">  public String  topicSend1() &#123;</span><br><span class="line">    String context = &quot;my topic 1&quot;;</span><br><span class="line">    System.out.println(&quot;发送者说 : &quot; + context);</span><br><span class="line">    this.amqpTemplate.convertAndSend(&quot;exchange&quot;, &quot;topic.message&quot;, context);</span><br><span class="line">    return context;</span><br><span class="line">  &#125;</span><br><span class="line">  @RequestMapping(&quot;/topicSend2&quot;)</span><br><span class="line">  public String topicSend2() &#123;</span><br><span class="line">    String context = &quot;my topic 2&quot;;</span><br><span class="line">    System.out.println(&quot;发送者说 : &quot; + context);</span><br><span class="line">    this.amqpTemplate.convertAndSend(&quot;exchange&quot;, &quot;topic.messages&quot;, context);</span><br><span class="line">    return  context;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试，浏览器访问：<a href="http://localhost:8080/topicSend1" target="_blank" rel="noopener">http://localhost:8080/topicSend1</a> 输出两个消费者<br>测试，浏览器访问：<a href="http://localhost:8080/topicSend2" target="_blank" rel="noopener">http://localhost:8080/topicSend2</a> 输出一个消费者</p><h4 id="Fanout-广播模式，发布订阅"><a href="#Fanout-广播模式，发布订阅" class="headerlink" title="Fanout 广播模式，发布订阅"></a>Fanout 广播模式，发布订阅</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">package com.example.springboot.test3;</span><br><span class="line"></span><br><span class="line">import org.springframework.amqp.core.Binding;</span><br><span class="line">import org.springframework.amqp.core.BindingBuilder;</span><br><span class="line">import org.springframework.amqp.core.FanoutExchange;</span><br><span class="line">import org.springframework.amqp.core.Queue;</span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @Author:wangrui</span><br><span class="line"> * @Description:队列配置，队列的名称，发送者和接受者的名称必须一致，否则接收不到消息</span><br><span class="line"> * @Date:2019/4/28 9:36</span><br><span class="line"> */</span><br><span class="line">@Configuration</span><br><span class="line">public class RabbitMqFanoutConfig &#123;</span><br><span class="line">    private static String EXCHANGE_NAME = &quot;hello111&quot;;</span><br><span class="line"></span><br><span class="line">  //声明两个队列</span><br><span class="line">  @Bean</span><br><span class="line">  public Queue queue() &#123;</span><br><span class="line">    return new Queue(&quot;hello&quot;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @Bean</span><br><span class="line">  public Queue queue1() &#123;</span><br><span class="line">    return new Queue(&quot;hello1&quot;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  //声明一个fanout的交换机</span><br><span class="line">  @Bean</span><br><span class="line">  public FanoutExchange fanoutExchange() &#123;</span><br><span class="line">    return new FanoutExchange(EXCHANGE_NAME);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  //将队列和交互机进行绑定</span><br><span class="line">  @Bean</span><br><span class="line">  public Binding bindfanout(Queue queue, FanoutExchange fanoutExchange) &#123;</span><br><span class="line">    return BindingBuilder.bind(queue).to(fanoutExchange);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @Bean</span><br><span class="line">  public Binding bindfanout1(Queue queue1, FanoutExchange fanoutExchange) &#123;</span><br><span class="line">    return BindingBuilder.bind(queue1).to(fanoutExchange);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">package com.example.springboot.test3;</span><br><span class="line"></span><br><span class="line">import org.springframework.amqp.rabbit.annotation.RabbitHandler;</span><br><span class="line">import org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line">import org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line">@Service</span><br><span class="line">@RabbitListener(queues = &quot;hello&quot;) //这个队列就是我们之前定义的队列名称，监听hello队列的消息</span><br><span class="line">public class FanoutReceiver1 &#123;</span><br><span class="line"></span><br><span class="line">  @RabbitHandler</span><br><span class="line">  public void receive(String message) throws InterruptedException &#123;</span><br><span class="line">    System.err.println(&quot;1:收到消息&quot; + message);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">package com.example.springboot.test3;</span><br><span class="line"></span><br><span class="line">import org.springframework.amqp.rabbit.annotation.RabbitHandler;</span><br><span class="line">import org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line">import org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line">@Service</span><br><span class="line">@RabbitListener(queues=&quot;hello1&quot;) //这个队列就是我们之前定义的队列名称，监听hello队列的消息</span><br><span class="line">public class FanoutReceiver2 &#123;</span><br><span class="line"></span><br><span class="line">  @RabbitHandler</span><br><span class="line">  public void receive(String message) throws InterruptedException&#123;</span><br><span class="line">    System.err.println(&quot;2收到消息:&quot;+message);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">package com.example.springboot.test3;</span><br><span class="line"></span><br><span class="line">import org.springframework.amqp.core.AmqpTemplate;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line">@RestController</span><br><span class="line">public class SendController2 &#123;</span><br><span class="line"></span><br><span class="line">  private static String EXCHANGE_NAME = &quot;hello111&quot;;</span><br><span class="line"></span><br><span class="line">  @Autowired</span><br><span class="line">  private AmqpTemplate amqpTemplate;</span><br><span class="line"></span><br><span class="line">  @RequestMapping(value = &quot;testFanout&quot;)</span><br><span class="line">  public void test() throws InterruptedException &#123;</span><br><span class="line">    for (int i = 0; i &lt; 10; i++) &#123;</span><br><span class="line">        Thread.sleep(i * 20);</span><br><span class="line">        amqpTemplate.convertAndSend(EXCHANGE_NAME, &quot;fanout&quot;, &quot;hello word&quot; + i);</span><br><span class="line">    &#125;</span><br><span class="line">    System.err.println(&quot;消息发送成功&quot;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试，浏览器访问：<a href="http://localhost:8080/testFanout" target="_blank" rel="noopener">http://localhost:8080/testFanout</a></p><h4 id="Direct-路由模式"><a href="#Direct-路由模式" class="headerlink" title="Direct 路由模式"></a>Direct 路由模式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">package com.example.springboot.test4;</span><br><span class="line"></span><br><span class="line">import org.springframework.amqp.core.Binding;</span><br><span class="line">import org.springframework.amqp.core.BindingBuilder;</span><br><span class="line">import org.springframework.amqp.core.DirectExchange;</span><br><span class="line">import org.springframework.amqp.core.Queue;</span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Routing 模式.配置类</span><br><span class="line"> *</span><br><span class="line"> * @author Administrator</span><br><span class="line"> */</span><br><span class="line">@Configuration</span><br><span class="line">public class DirectRabbitConfig &#123;</span><br><span class="line"></span><br><span class="line">  @Bean</span><br><span class="line">  public Queue AMessage() &#123;</span><br><span class="line">    return new Queue(&quot;direct.A&quot;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @Bean</span><br><span class="line">  public Queue BMessage() &#123;</span><br><span class="line">    return new Queue(&quot;direct.B&quot;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @Bean</span><br><span class="line">  DirectExchange directExchange() &#123;</span><br><span class="line">    return new DirectExchange(&quot;directExchange&quot;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @Bean</span><br><span class="line">  Binding bindingExchangeMessage(Queue AMessage, DirectExchange exchange) &#123;</span><br><span class="line">    return BindingBuilder.bind(AMessage).to(exchange).with(&quot;orange&quot;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @Bean</span><br><span class="line">  Binding bindingExchangeMessageBOfBlack(Queue BMessage, DirectExchange exchange) &#123;</span><br><span class="line">    return BindingBuilder.bind(BMessage).to(exchange).with(&quot;black&quot;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @Bean</span><br><span class="line">  Binding bindingExchangeMessageBOfGreen(Queue BMessage, DirectExchange exchange) &#123;</span><br><span class="line">    return BindingBuilder.bind(BMessage).to(exchange).with(&quot;green&quot;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">package com.example.springboot.test4;</span><br><span class="line"></span><br><span class="line">import org.slf4j.Logger;</span><br><span class="line">import org.slf4j.LoggerFactory;</span><br><span class="line">import org.springframework.amqp.core.AmqpTemplate;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line">@Component</span><br><span class="line">public class DirectSender &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  protected static Logger logger= LoggerFactory.getLogger(DirectSender.class);</span><br><span class="line"></span><br><span class="line">  @Autowired</span><br><span class="line">  private AmqpTemplate rabbitTemplate;</span><br><span class="line">  public void sendOrange() &#123;</span><br><span class="line">    String context = &quot;hi, i am message orange&quot;;</span><br><span class="line">    logger.debug(&quot;Sender : &quot; + context);</span><br><span class="line">    this.rabbitTemplate.convertAndSend(&quot;directExchange&quot;, &quot;orange&quot;, context);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  public void sendBlack() &#123;</span><br><span class="line">    String context = &quot;hi, i am messages black&quot;;</span><br><span class="line">    logger.debug(&quot;Sender : &quot; + context);</span><br><span class="line">    this.rabbitTemplate.convertAndSend(&quot;directExchange&quot;, &quot;black&quot;, context);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  public void sendGreen() &#123;</span><br><span class="line">    String context = &quot;hi, i am messages green&quot;;</span><br><span class="line">    logger.debug(&quot;Sender : &quot; + context);</span><br><span class="line">    this.rabbitTemplate.convertAndSend(&quot;directExchange&quot;, &quot;green&quot;, context);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">package com.example.springboot.test4;</span><br><span class="line"></span><br><span class="line">import org.slf4j.Logger;</span><br><span class="line">import org.slf4j.LoggerFactory;</span><br><span class="line">import org.springframework.amqp.rabbit.annotation.RabbitHandler;</span><br><span class="line">import org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line">@Component</span><br><span class="line">@RabbitListener(queues = &quot;direct.A&quot;)</span><br><span class="line">public class DirectReceiverA &#123;</span><br><span class="line"></span><br><span class="line">  protected static Logger logger= LoggerFactory.getLogger(DirectReceiverA.class);</span><br><span class="line"></span><br><span class="line">  @RabbitHandler</span><br><span class="line">  public void process(String message) &#123;</span><br><span class="line">    logger.debug(&quot;direct.A Receiver  : &quot; + message);</span><br><span class="line">    System.out.println(&quot;direct.A Receiver  : &quot; + message);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">package com.example.springboot.test4;</span><br><span class="line"></span><br><span class="line">import org.slf4j.Logger;</span><br><span class="line">import org.slf4j.LoggerFactory;</span><br><span class="line">import org.springframework.amqp.rabbit.annotation.RabbitHandler;</span><br><span class="line">import org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line">@Component</span><br><span class="line">@RabbitListener(queues = &quot;direct.B&quot;)</span><br><span class="line">public class DirectReceiverB &#123;</span><br><span class="line"></span><br><span class="line">  protected static Logger logger = LoggerFactory.getLogger(DirectReceiverB.class);</span><br><span class="line"></span><br><span class="line">  @RabbitHandler</span><br><span class="line">  public void process(String message) &#123;</span><br><span class="line">    logger.debug(&quot;direct.B Receiver   : &quot; + message);</span><br><span class="line">    System.out.println(&quot;direct.B Receiver  : &quot; + message);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">package com.example.springboot.test4;</span><br><span class="line"></span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line">@RestController</span><br><span class="line">@RequestMapping(&quot;/routing&quot;)</span><br><span class="line">public class DirectController &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private DirectSender directSender;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(&quot;/send1&quot;)</span><br><span class="line">    public String send1() &#123;</span><br><span class="line">        directSender.sendOrange();</span><br><span class="line">        return &quot;send1 orange ok&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(&quot;/send2&quot;)</span><br><span class="line">    public String send2() &#123;</span><br><span class="line">        directSender.sendBlack();</span><br><span class="line">        return &quot;send2  black ok&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(&quot;/send3&quot;)</span><br><span class="line">    public String send3() &#123;</span><br><span class="line">        directSender.sendGreen();</span><br><span class="line">        return &quot;send3 green ok&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试，浏览器访问：<br><a href="http://localhost:8080/routing/send1" target="_blank" rel="noopener">http://localhost:8080/routing/send1</a> 输出： direct.A Receiver  : hi, i am message orange<br><a href="http://localhost:8080/routing/send2" target="_blank" rel="noopener">http://localhost:8080/routing/send2</a> 输出： direct.B Receiver  : hi, i am messages black<br><a href="http://localhost:8080/routing/send3" target="_blank" rel="noopener">http://localhost:8080/routing/send3</a> 输出： direct.B Receiver  : hi, i am messages green</p><h4 id="RPC-Request-reply（暂未使用）"><a href="#RPC-Request-reply（暂未使用）" class="headerlink" title="RPC Request/reply（暂未使用）"></a>RPC Request/reply（暂未使用）</h4><p>RPC比较适合- 客户端调用哪个服务器比较明确 </p><ul><li>调用需要立即得到返回结果 </li><li>架构简单<br>  在一个由多个微服务构成的大系统中，某些关键服务间的调用应当在较短的时间内返回，而且各个微服务的专业化程度较高，同一个请求的关注者只有一个。这个时候就应该用RPC。   比如在一个ERP系统中，有一个管理仓储的微服务，以及一个负责订单的微服务。新建订单时需要查知当前的存货是否充足，如果不充足就通知用户；提交订单时预订指定数量的货物，如果此时货物不错，也要终止订单的提交，并通知用户。显然在这种场景下是不允许较大的延迟，否则会影响用户体验。所以应该使用RPC，及时返回仓储情况。 </li></ul><p>MQ比较适合 </p><ul><li>消息的发送者和消费者需要解耦的情况 </li><li>发送者并不明确谁是消费者 </li><li>发送者并不关心谁来消费消息 </li><li>各个消费者可以从不同的角度入手处理消息 </li><li>消费者的处理结果也不返回给发送者 </li><li>消息的发送和处理是异步的 </li><li>消息的关注者不止一个<br>  在一个由多个微服务构成的大系统中，会有一些非关键服务，用来执行一些不需要立刻得到结果的计算。而且它们的计算结果并不会返回给消息的发送者。这个时候就应该使用MQ。   比如在一个ERP系统中有一些日志服务、业务监控服务等。这些服务会发布一些系统事件，针对这些事件可能有多个应用关注。对于日志服务，当系统出现某些异常情况时需要浏览日志，查找问题的根源；也可以在分析系统运行的瓶颈时提供关键数据。对于业务监控系统，例如货物入仓出仓的消息，可以被报表系统关注，生成报表；也可以被配货系统关注，及时补足所需库存。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;RabbitMQ-术语说明：&quot;&gt;&lt;a href=&quot;#RabbitMQ-术语说明：&quot; class=&quot;headerlink&quot; title=&quot;RabbitMQ 术语说明：&quot;&gt;&lt;/a&gt;RabbitMQ 术语说明：&lt;/h3&gt;&lt;p&gt;Server(Broker):接收客户端连接，实现AMQP协议的消息队列和路由功能的进程；&lt;br&gt;Virtual Host：虚拟主机的概念，类似权限控制组，一个Virtual Host里可以有多个Exchange和Queue,权限控制的最小丽都是Virtual Host；&lt;br&gt;Exchange:交换机，接收生产者发送的消息，并根据Routing Key将消息路由到服务器中的队列Queue。&lt;br&gt;ExchangeType:交换机类型决定了路由消息行为，RabbitMQ中有三种类型Exchange，分别是fanout、direct、topic；&lt;br&gt;Message Queue：消息队列，用于存储还未被消费者消费的消息；&lt;br&gt;Message：由Header和body组成，Header是由生产者添加的各种属性的集合，包括Message是否被持久化、优先级是多少、由哪个Message Queue接收等；body是真正需要发送的数据内容；&lt;br&gt;BindingKey：绑定关键字，将一个特定的Exchange和一个特定的Queue绑定起来。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="RabbitMq" scheme="http://lastsummer.top/blog/categories/RabbitMq/"/>
    
    
      <category term="简单模式 Hello World" scheme="http://lastsummer.top/blog/tags/%E7%AE%80%E5%8D%95%E6%A8%A1%E5%BC%8F-Hello-World/"/>
    
      <category term="工作模式 Work Queue" scheme="http://lastsummer.top/blog/tags/%E5%B7%A5%E4%BD%9C%E6%A8%A1%E5%BC%8F-Work-Queue/"/>
    
      <category term="发布/订阅模式 Publish/Subscribe" scheme="http://lastsummer.top/blog/tags/%E5%8F%91%E5%B8%83-%E8%AE%A2%E9%98%85%E6%A8%A1%E5%BC%8F-Publish-Subscribe/"/>
    
      <category term="路由模式 Routing" scheme="http://lastsummer.top/blog/tags/%E8%B7%AF%E7%94%B1%E6%A8%A1%E5%BC%8F-Routing/"/>
    
      <category term="通配符模式 Topic" scheme="http://lastsummer.top/blog/tags/%E9%80%9A%E9%85%8D%E7%AC%A6%E6%A8%A1%E5%BC%8F-Topic/"/>
    
      <category term="分布式 RPC" scheme="http://lastsummer.top/blog/tags/%E5%88%86%E5%B8%83%E5%BC%8F-RPC/"/>
    
  </entry>
  
  <entry>
    <title>Window10安装RabbitMq中间件</title>
    <link href="http://lastsummer.top/blog/2019/04/17/Window10%E5%AE%89%E8%A3%85RabbitMq%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    <id>http://lastsummer.top/blog/2019/04/17/Window10安装RabbitMq中间件/</id>
    <published>2019-04-17T07:21:40.000Z</published>
    <updated>2019-05-16T01:39:49.834Z</updated>
    
    <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>Rabbit MQ是一个在AMQP协议标准基础上完整的，可服用的企业消息系统；<br>它遵循Mozilla Public License开源协议，采用 Erlang 实现的工业级的消息队列(MQ)服务器，Rabbit MQ 是建立在Erlang OTP平台上；<br>Erlang语言阻止了大量的 Java 工程师去深入研究和掌控它，对公司而言，几乎处于不可控的状态，但是是开源的，比较稳定的社区支持，活跃度也高;<br>AMQP（高级消息队列协议）是一个异步消息传递所使用应用层协议规范，为面向消息中间件设计，基于此协议的客户端与消息中间件可以无视消息来源传递消息，不受客户端、消息中间件、不同的开发语言环境等条件的限制；<br>支持主流操作系统：Linux、Windows，MacOX等；<br>支持多种客户端开发语言：Java、Python、Ruby、.NET，PHP、C/C++、Node.js等。<br><a id="more"></a></p><h3 id="安装-Erlang-及-Rabbit-MQ（安装路径不允许出现空格）"><a href="#安装-Erlang-及-Rabbit-MQ（安装路径不允许出现空格）" class="headerlink" title="安装 Erlang 及 Rabbit MQ（安装路径不允许出现空格）"></a>安装 Erlang 及 Rabbit MQ<font color="red">（安装路径不允许出现空格）</font></h3><p>Erlang 小编使用的是 <code>otp_win64_21.3</code> ，需要其他版本或者32位系统的，可以去 <a href="http://www.erlang.org/downloads" target="_blank" rel="noopener">Erlang官网下载</a>。<br>全部点击“下一步”就行。（安装完成）<br>进入CMD窗口，<br>安装成功后，确认一下是否有系统环境变量。<br>打开Dos窗口,输入 <code>erl</code> 查看Erlang版本（如果可以查看版本，则掠过下方环境配置）<br>变量名：<code>ERLANG_HOME</code>，变量值：<code>Erlang安装路径</code>。<br><img src="/blog/2019/04/17/Window10安装RabbitMq中间件/rabbitmq1.png" alt="配置ERLANG_HOME环境变量"><br><img src="/blog/2019/04/17/Window10安装RabbitMq中间件/rabbitmq2.png" alt="配置PATH环境变量"><br>Rabbit MQ 小编使用的是 <code>rabbitmq-server-3.7.14</code>，需要其他版本或者32位系统的，可以去<a href="http://www.erlang.org/downloads" target="_blank" rel="noopener">Rabbit MQ官网下载</a>。<br><img src="/blog/2019/04/17/Window10安装RabbitMq中间件/rabbitmq3.png" alt="Rabbit MQ官网下载按需下载"><br>全部点击“下一步”就行。（安装完成）<br>激活 <code>RabbitMQ&#39;s Management Plugin</code> 管理界面<br>打开Dos窗口,输入命令：<br><code>&quot;D:\Program Files\RabbitMQ Server\rabbitmq_server-3.7.14\sbin\rabbitmq-plugins.bat&quot; enable rabbitmq_management</code><br><img src="/blog/2019/04/17/Window10安装RabbitMq中间件/rabbitmq4.png" alt="RabbitMQ&#39;s Management Plugin启动成功（启动6个插件）"><br>rabbitmq必须用管理员用户启动（也可配置普通用户启动、暂未使用此方法）<br><img src="/blog/2019/04/17/Window10安装RabbitMq中间件/rabbitmq5.png" alt="普通管理员启动错误"><br>可以在Windows10系统的开始菜单上，单击鼠标右键，这时候出现的菜单中，我们选择命令提示符（管理员）点击打开这样即可。<br><img src="/blog/2019/04/17/Window10安装RabbitMq中间件/rabbitmq6.png" alt="管理员打开Dos窗口"><br><img src="/blog/2019/04/17/Window10安装RabbitMq中间件/rabbitmq7.png" alt="Rabbit MQ启动关闭命令"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">erl #查看Erlang版本</span><br><span class="line">rabbitmqctl status #查看了啊RabbitMQ版本</span><br><span class="line">net start rabbitmq #启动RabbitMQ命令</span><br><span class="line">net stop rabbitmq #关闭RabbitMQ命令</span><br><span class="line">127.0.0.1:15672 #访问RabbitMQ管理界面 默认用户名 guest 密码 guest</span><br><span class="line">默认监听端口：15672（在3.0版本之前是55672端口）</span><br><span class="line">rabbitmq-plugins enable rabbitmq_web_stomp rabbitmq_web_stomp_examples</span><br><span class="line">rabbitmq-plugins enable rabbitmq_management rabbitmq_web_stomp rabbitmq_stomp rabbitmq_web_stomp_examples</span><br><span class="line">&quot;/d/Program Files/RabbitMQ Server/rabbitmq_server-3.7.14/sbin/rabbitmq-plugins.bat&quot; enable rabbitmq_web_stomp rabbitmq_web_stomp_examples</span><br><span class="line">&quot;/d/Program Files/RabbitMQ Server/rabbitmq_server-3.7.14/sbin/rabbitmqctl.bat&quot; startus</span><br><span class="line">&quot;/d/Program Files/RabbitMQ Server/rabbitmq_server-3.7.14/sbin/rabbitmqctl.bat&quot; list_queues</span><br></pre></td></tr></table></figure></p><p><img src="/blog/2019/04/17/Window10安装RabbitMq中间件/rabbitmq8.png" alt="Rabbit MQ管理员界面"></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;p&gt;Rabbit MQ是一个在AMQP协议标准基础上完整的，可服用的企业消息系统；&lt;br&gt;它遵循Mozilla Public License开源协议，采用 Erlang 实现的工业级的消息队列(MQ)服务器，Rabbit MQ 是建立在Erlang OTP平台上；&lt;br&gt;Erlang语言阻止了大量的 Java 工程师去深入研究和掌控它，对公司而言，几乎处于不可控的状态，但是是开源的，比较稳定的社区支持，活跃度也高;&lt;br&gt;AMQP（高级消息队列协议）是一个异步消息传递所使用应用层协议规范，为面向消息中间件设计，基于此协议的客户端与消息中间件可以无视消息来源传递消息，不受客户端、消息中间件、不同的开发语言环境等条件的限制；&lt;br&gt;支持主流操作系统：Linux、Windows，MacOX等；&lt;br&gt;支持多种客户端开发语言：Java、Python、Ruby、.NET，PHP、C/C++、Node.js等。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="RabbitMq" scheme="http://lastsummer.top/blog/categories/RabbitMq/"/>
    
    
      <category term="RabbitMq" scheme="http://lastsummer.top/blog/tags/RabbitMq/"/>
    
      <category term="Queue" scheme="http://lastsummer.top/blog/tags/Queue/"/>
    
  </entry>
  
  <entry>
    <title>为什么使用消息队列</title>
    <link href="http://lastsummer.top/blog/2019/04/16/%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BD%BF%E7%94%A8%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
    <id>http://lastsummer.top/blog/2019/04/16/为什么使用消息队列/</id>
    <published>2019-04-16T07:00:53.000Z</published>
    <updated>2019-04-16T09:36:15.934Z</updated>
    
    <content type="html"><![CDATA[<p>栈：先进先出。<br>堆、队列：先进后出。</p><h3 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h3><p>队列（常用数据结构之一）。<br>队列是一种特殊的线性表，特殊之处在于它只允许在表的前端（front）进行删除操作，而在表的后端（rear）进行插入操作，和栈一样，队列是一种操作受限制的线性表。进行插入操作的端称为队尾，进行删除操作的端称为队头。<br>消息被发送到队列中，“消息队列”是在消息的传输过程中保存消息的容器。<br>消息队列管理器在将消息从它的源中继到它的目标时充当中间人。<br>队列的主要目的是提供路由并保证消息的传递。<br>如果发送消息时接收者不可用，消息队列会保留消息，直到可以成功地传递它。《百度百科》<br><a id="more"></a></p><h3 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h3><h4 id="为什么使用消息队列？（场景、优点、缺点）"><a href="#为什么使用消息队列？（场景、优点、缺点）" class="headerlink" title="为什么使用消息队列？（场景、优点、缺点）"></a>为什么使用消息队列？（场景、优点、缺点）</h4><h6 id="解耦"><a href="#解耦" class="headerlink" title="解耦"></a>解耦</h6><p>场景A：<br>A 系统发送数据到 BCD 三个系统，通过接口调用发送。如果 E 系统也要这个数据呢？那如果 C 系统现在不需要了呢？A 系统负责人几乎崩溃……在这个场景中，A 系统跟其它各种乱七八糟的系统严重耦合，A 系统产生一条比较关键的数据，很多系统都需要 A 系统将这个数据发送过来。A 系统要时时刻刻考虑 BCDE 四个系统如果挂了该咋办？要不要重发，要不要把消息存起来？头发都白了啊！<br>场景A使用MQ：<br>如果使用 MQ，A 系统产生一条数据，发送到 MQ 里面去，哪个系统需要数据自己去 MQ 里面消费。如果新系统需要数据，直接从 MQ 里消费即可；如果某个系统不需要这条数据了，就取消对 MQ 消息的消费即可。这样下来，A 系统压根儿不需要去考虑要给谁发送数据，不需要维护这个代码，也不需要考虑人家是否调用成功、失败超时等情况。<br>总结：<br>通过一个 MQ，Pub/Sub 发布订阅消息这么一个模型，A 系统就跟其它系统彻底解耦了。<br>面试技巧：<br>你需要去考虑一下你负责的系统中是否有类似的场景，就是一个系统或者一个模块，调用了多个系统或者模块，互相之间的调用很复杂，维护起来很麻烦。但是其实这个调用是不需要直接同步调用接口的，如果用 MQ 给它异步化解耦，也是可以的，你就需要去考虑在你的项目里，是不是可以运用这个 MQ 去进行系统的解耦。在简历中体现出来这块东西，用 MQ 作解耦。</p><h6 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h6><p>场景B：<br>A 系统接收一个请求，需要在自己本地写库，还需要在 BCD 三个系统写库，自己本地写库要 3ms，BCD 三个系统分别写库要 300ms、450ms、200ms。最终请求总延时是 3 + 300 + 450 + 200 = 953ms，接近 1s，用户感觉搞个什么东西，慢死了慢死了。用户通过浏览器发起请求，等待个 1s，这几乎是不可接受的。一般互联网类的企业，对于用户直接的操作，一般要求是每个请求都必须在 200 ms 以内完成，对用户几乎是无感知的。<br>场景B使用MQ：<br>如果使用 MQ，那么 A 系统连续发送 3 条消息到 MQ 队列中，假如耗时 5ms，A 系统从接受一个请求到返回响应给用户，总时长是 3 + 5 = 8ms，对于用户而言，其实感觉上就是点个按钮，8ms 以后就直接返回了，爽！网站做得真好，真快！</p><h6 id="削峰"><a href="#削峰" class="headerlink" title="削峰"></a>削峰</h6><p>场景C：<br>每天 0:00 到 12:00，A 系统风平浪静，每秒并发请求数量就 50 个。结果每次一到 12:00 ~ 13:00 ，每秒并发请求数量突然会暴增到 5k+ 条。但是系统是直接基于 MySQL 的，大量的请求涌入 MySQL，每秒钟对 MySQL 执行约 5k 条 SQL。一般的 MySQL，扛到每秒 2k 个请求就差不多了，如果每秒请求到 5k 的话，可能就直接把 MySQL 给打死了，导致系统崩溃，用户也就没法再使用系统了。但是高峰期一过，到了下午的时候，就成了低峰期，可能也就 1w 的用户同时在网站上操作，每秒中的请求数量可能也就 50 个请求，对整个系统几乎没有任何的压力。<br>场景C使用MQ：<br>如果使用 MQ，每秒 5k 个请求写入 MQ，A 系统每秒钟最多处理 2k 个请求，因为 MySQL 每秒钟最多处理 2k 个。A 系统从 MQ 中慢慢拉取请求，每秒钟就拉取 2k 个请求，不要超过自己每秒能处理的最大请求数量就 ok，这样下来，哪怕是高峰期的时候，A 系统也绝对不会挂掉。而 MQ 每秒钟 5k 个请求进来，就 2k 个请求出去，结果就导致在中午高峰期（1 个小时），可能有几十万甚至几百万的请求积压在 MQ 中。这个短暂的高峰期积压是 ok 的，因为高峰期过了之后，每秒钟就 50 个请求进 MQ，但是 A 系统依然会按照每秒 2k 个请求的速度在处理。所以说，只要高峰期一过，A 系统就会快速将积压的消息给解决掉。</p><h4 id="消息队列有什么优点和缺点？"><a href="#消息队列有什么优点和缺点？" class="headerlink" title="消息队列有什么优点和缺点？"></a>消息队列有什么优点和缺点？</h4><h5 id="优点：上面已经说了，就是在特殊场景下有其对应的好处，解耦、异步、削峰（三个）"><a href="#优点：上面已经说了，就是在特殊场景下有其对应的好处，解耦、异步、削峰（三个）" class="headerlink" title="优点：上面已经说了，就是在特殊场景下有其对应的好处，解耦、异步、削峰（三个）"></a>优点：上面已经说了，就是在特殊场景下有其对应的好处，解耦、异步、削峰（三个）</h5><h5 id="缺点：系统可用性降低、系统复杂度提高、一致性问题（三个）"><a href="#缺点：系统可用性降低、系统复杂度提高、一致性问题（三个）" class="headerlink" title="缺点：系统可用性降低、系统复杂度提高、一致性问题（三个）"></a>缺点：系统可用性降低、系统复杂度提高、一致性问题（三个）</h5><h6 id="系统可用性降低："><a href="#系统可用性降低：" class="headerlink" title="系统可用性降低："></a>系统可用性降低：</h6><p>系统引入的外部依赖越多，越容易挂掉。本来你就是 A 系统调用 BCD 三个系统的接口就好了，人 ABCD 四个系统好好的，没啥问题，你偏加个 MQ 进来，万一 MQ 挂了咋整，MQ 一挂，整套系统崩溃的，你不就完了？如何保证消息队列的高可用，可以点击这里查看。</p><h6 id="系统复杂度提高"><a href="#系统复杂度提高" class="headerlink" title="系统复杂度提高"></a>系统复杂度提高</h6><p>硬生生加个 MQ 进来，你怎么保证消息没有重复消费？怎么处理消息丢失的情况？怎么保证消息传递的顺序性？头大头大，问题一大堆，痛苦不已。</p><h6 id="一致性问题"><a href="#一致性问题" class="headerlink" title="一致性问题"></a>一致性问题</h6><p>A 系统处理完了直接返回成功了，人都以为你这个请求就成功了；但是问题是，要是 BCD 三个系统那里，BD 两个系统写库成功了，结果 C 系统写库失败了，咋整？你这数据就不一致了。</p><h4 id="Kafka、ActiveMQ、RabbitMQ、RocketMQ-都有什么区别，以及适合哪些场景？"><a href="#Kafka、ActiveMQ、RabbitMQ、RocketMQ-都有什么区别，以及适合哪些场景？" class="headerlink" title="Kafka、ActiveMQ、RabbitMQ、RocketMQ 都有什么区别，以及适合哪些场景？"></a>Kafka、ActiveMQ、RabbitMQ、RocketMQ 都有什么区别，以及适合哪些场景？</h4><p>所以消息队列实际是一种非常复杂的架构，你引入它有很多好处，但是也得针对它带来的坏处做各种额外的技术方案和架构来规避掉，做好之后，你会发现，妈呀，系统复杂度提升了一个数量级，也许是复杂了 10 倍。但是关键时刻，用，还是得用的。</p><p><img src="/blog/2019/04/16/为什么使用消息队列/rabbitmq1.png" alt="四大MQ的优缺点"></p><p>综上，各种对比之后，有如下建议：<br>1、一般的业务系统要引入 MQ，最早大家都用 ActiveMQ，但是现在确实大家用的不多了，没经过大规模吞吐量场景的验证，社区也不是很活跃，所以大家还是算了吧，我个人不推荐用这个了；<br>2、后来大家开始用 RabbitMQ，但是确实 erlang 语言阻止了大量的 Java 工程师去深入研究和掌控它，对公司而言，几乎处于不可控的状态，但是确实人家是开源的，比较稳定的支持，活跃度也高；<br>3、不过现在确实越来越多的公司会去用 RocketMQ，确实很不错，毕竟是阿里出品，但社区可能有突然黄掉的风险（目前 RocketMQ 已捐给 Apache，但 GitHub 上的活跃度其实不算高）对自己公司技术实力有绝对自信的，推荐用 RocketMQ，否则回去老老实实用 RabbitMQ 吧，人家有活跃的开源社区，绝对不会黄。<br>所以中小型公司，技术实力较为一般，技术挑战不是特别高，用 RabbitMQ 是不错的选择；<br>大型公司，基础架构研发实力较强，用 RocketMQ 是很好的选择。<br>如果是大数据领域的实时计算、日志采集等场景，用 Kafka 是业内标准的，绝对没问题，社区活跃度很高，绝对不会黄，何况几乎是全世界这个领域的事实性规范。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;栈：先进先出。&lt;br&gt;堆、队列：先进后出。&lt;/p&gt;
&lt;h3 id=&quot;队列&quot;&gt;&lt;a href=&quot;#队列&quot; class=&quot;headerlink&quot; title=&quot;队列&quot;&gt;&lt;/a&gt;队列&lt;/h3&gt;&lt;p&gt;队列（常用数据结构之一）。&lt;br&gt;队列是一种特殊的线性表，特殊之处在于它只允许在表的前端（front）进行删除操作，而在表的后端（rear）进行插入操作，和栈一样，队列是一种操作受限制的线性表。进行插入操作的端称为队尾，进行删除操作的端称为队头。&lt;br&gt;消息被发送到队列中，“消息队列”是在消息的传输过程中保存消息的容器。&lt;br&gt;消息队列管理器在将消息从它的源中继到它的目标时充当中间人。&lt;br&gt;队列的主要目的是提供路由并保证消息的传递。&lt;br&gt;如果发送消息时接收者不可用，消息队列会保留消息，直到可以成功地传递它。《百度百科》&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="queue" scheme="http://lastsummer.top/blog/categories/queue/"/>
    
    
      <category term="Queue" scheme="http://lastsummer.top/blog/tags/Queue/"/>
    
  </entry>
  
  <entry>
    <title>Git基本命令</title>
    <link href="http://lastsummer.top/blog/2019/03/04/Git%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/"/>
    <id>http://lastsummer.top/blog/2019/03/04/Git基本命令/</id>
    <published>2019-03-04T06:02:46.000Z</published>
    <updated>2019-05-23T06:44:43.702Z</updated>
    
    <content type="html"><![CDATA[<p>Git命令行基本操作！<br><a id="more"></a></p><h3 id="git-config可以配置git的参数"><a href="#git-config可以配置git的参数" class="headerlink" title="git config可以配置git的参数"></a>git config可以配置git的参数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git config --list 查看已经配置的git参数</span><br><span class="line">git config --system user.name &quot;Tocy&quot;所有用户（本系统）</span><br><span class="line">git config --system user.email zyvj@qq.com所有用户（本系统）</span><br><span class="line">git config --global user.name &quot;Tocy&quot;当前用户（全局）</span><br><span class="line">git config --global user.email zyvj@qq.com当前用户（全局）</span><br><span class="line">git config --local user.name &quot;Tocy&quot;本地配置（当前目录）</span><br><span class="line">git config --local user.email zyvj@qq.com  本地配置（当前目录）</span><br></pre></td></tr></table></figure><h3 id="创建Git仓库"><a href="#创建Git仓库" class="headerlink" title="创建Git仓库"></a>创建Git仓库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init初始化当前目录</span><br></pre></td></tr></table></figure><h3 id="克隆Git仓库"><a href="#克隆Git仓库" class="headerlink" title="克隆Git仓库"></a>克隆Git仓库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://git.oschina.net/Tocy/SampleCode.git</span><br></pre></td></tr></table></figure><h3 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">git status# 检查下修改了什么内容</span><br><span class="line">git log --stat      # 仅显示摘要选项</span><br><span class="line">git log --pretty=oneline        # 定制记录格式</span><br><span class="line">git log --graph     # 图像化分支和版本更新</span><br><span class="line">git add . # 提交所有文件到暂存区</span><br><span class="line">git add Readme.md</span><br><span class="line">git add *.png</span><br><span class="line">git add /home/code/</span><br><span class="line">git diff # 查看当前目录的所有修改</span><br><span class="line">git commit -m &quot;注释备注&quot; # 提交代码到本地仓库</span><br><span class="line">git push # 提交代码到远程仓库</span><br><span class="line">git branch # 显示本地当前所有分支</span><br><span class="line">git branch -d test # 删除分支</span><br><span class="line">git branch -D test # 强制删除分支</span><br><span class="line">git checkout -b testing # 直接切换并创建分支</span><br><span class="line">git checkout master # 切换主分支</span><br><span class="line">git merge test # 合并分支的代码</span><br><span class="line">git branch -a # 查看远程仓库所有分支</span><br><span class="line">git push origin test # 推送本地分支到远程仓库</span><br><span class="line">git push  origin --delete test # 删除远程分支</span><br><span class="line">git checkout &quot;git status项目文件路径&quot; # 还原某个文件</span><br><span class="line">git reset --hard &apos;git log中的commit id&apos;还原所有文件到一个版本</span><br><span class="line">git pull # 更新远程仓库最新代码</span><br><span class="line">git reset HEAD &quot;文件路径&quot;     # 撤回暂存区的某个文件</span><br><span class="line">git reset HEAD~     # 撤回本地仓库中的代码到暂存区</span><br><span class="line">git reset# 撤回所有本地仓库中的代码到暂存区</span><br><span class="line">git rm --cached you_file_name # 撤回暂存区中的代码（暂未使用）</span><br><span class="line">git merge dev--合并分支dev的代码（Fast-forward表示快进模式，合并速度快，会直接将Master分支指向Develop分支）</span><br><span class="line">git merge --no-ff dev # 正常工作 master生成新节点，保证版本演变的清晰，建议此方法g&apos;g</span><br><span class="line"></span><br><span class="line"># 回退一个版本,且会将暂存区的内容和本地已提交的内容全部恢复到未暂存的状态,不影响原来本地文件(未提交的也不受影响) </span><br><span class="line">git reset (–mixed) HEAD~1 </span><br><span class="line"># 回退一个版本,不清空暂存区,将已提交的内容恢复到暂存区,不影响原来本地的文件(未提交的也不受影响) </span><br><span class="line">git reset –soft HEAD~1 </span><br><span class="line"># 回退一个版本,清空暂存区,将已提交的内容的版本恢复到本地,本地的文件也将被恢复的版本替换</span><br><span class="line">git reset –hard HEAD~1 </span><br><span class="line"># 强制覆盖远程仓库，从提交记录上还很难查到是谁进行了强制覆盖</span><br><span class="line">git push origin v1.0.0 --force</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Git命令行基本操作！&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Git" scheme="http://lastsummer.top/blog/categories/Git/"/>
    
    
      <category term="Git" scheme="http://lastsummer.top/blog/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Calendar获取日期</title>
    <link href="http://lastsummer.top/blog/2019/01/09/Calendar%E8%8E%B7%E5%8F%96%E6%97%A5%E6%9C%9F/"/>
    <id>http://lastsummer.top/blog/2019/01/09/Calendar获取日期/</id>
    <published>2019-01-09T05:30:48.000Z</published>
    <updated>2019-01-09T05:33:43.522Z</updated>
    
    <content type="html"><![CDATA[<p>Calendar获取月初月末日期。<a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">SimpleDateFormat simpleDateFormat = new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;);</span><br><span class="line">SimpleDateFormat startSimpleDateFormat = new SimpleDateFormat(&quot;yyyy-MM-dd 00:00:00&quot;);</span><br><span class="line">SimpleDateFormat EndDateFormat = new SimpleDateFormat(&quot;yyyy-MM-dd 23:59:59&quot;);</span><br><span class="line">//上月第一天</span><br><span class="line">Calendar calendar = Calendar.getInstance();</span><br><span class="line">System.out.println(&quot;当前时间：&quot;+simpleDateFormat.format(calendar.getTime()));</span><br><span class="line">calendar.add(Calendar.MONTH, -1);</span><br><span class="line">calendar.set(Calendar.DAY_OF_MONTH, 1);</span><br><span class="line">System.out.println(calendar.getTime());</span><br><span class="line">System.out.println(&quot;上月第一天时间：&quot;+startSimpleDateFormat.format(calendar.getTime()));</span><br><span class="line">//上月最后一天</span><br><span class="line">Calendar calendar1 = Calendar.getInstance();</span><br><span class="line">calendar1.set(Calendar.DAY_OF_MONTH, 1);</span><br><span class="line">calendar1.add(Calendar.DATE, -1);</span><br><span class="line">System.out.println(calendar1.getTime());</span><br><span class="line">System.out.println(&quot;上月最后一天：&quot;+EndDateFormat.format(calendar1.getTime()));</span><br><span class="line">//本月第一天</span><br><span class="line">Calendar calendar2 = Calendar.getInstance();</span><br><span class="line">calendar2.set(Calendar.DAY_OF_MONTH, calendar2.getActualMinimum(Calendar.DAY_OF_MONTH));</span><br><span class="line">System.out.println(calendar2.getTime());</span><br><span class="line">System.out.println(&quot;本月第一天：&quot;+startSimpleDateFormat.format(calendar2.getTime()));</span><br><span class="line">//本月最后一天</span><br><span class="line">Calendar calendar3 = Calendar.getInstance();</span><br><span class="line">calendar3.set(Calendar.DAY_OF_MONTH, calendar3.getActualMaximum(Calendar.DAY_OF_MONTH));</span><br><span class="line">System.out.println(calendar3.getTime());</span><br><span class="line">System.out.println(&quot;本月最后一天：&quot;+EndDateFormat.format(calendar3.getTime()));</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Calendar获取月初月末日期。&lt;/p&gt;
    
    </summary>
    
      <category term="JAVA" scheme="http://lastsummer.top/blog/categories/JAVA/"/>
    
    
      <category term="java" scheme="http://lastsummer.top/blog/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>BigDecimal算法</title>
    <link href="http://lastsummer.top/blog/2018/12/24/BigDecimal%E7%AE%97%E6%B3%95/"/>
    <id>http://lastsummer.top/blog/2018/12/24/BigDecimal算法/</id>
    <published>2018-12-24T02:02:29.000Z</published>
    <updated>2018-12-24T08:01:29.307Z</updated>
    
    <content type="html"><![CDATA[<p>BigDecimal算法。<a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">BigDecimal bignum1 = new BigDecimal(&quot;10&quot;);  </span><br><span class="line">BigDecimal bignum2 = new BigDecimal(&quot;5&quot;);  </span><br><span class="line">BigDecimal bignum3 = null;  </span><br><span class="line">  </span><br><span class="line">//加法  </span><br><span class="line">bignum3 =  bignum1.add(bignum2);       </span><br><span class="line">System.out.println(&quot;和 是：&quot; + bignum3);  </span><br><span class="line">  </span><br><span class="line">//减法  </span><br><span class="line">bignum3 = bignum1.subtract(bignum2);  </span><br><span class="line">System.out.println(&quot;差  是：&quot; + bignum3);  </span><br><span class="line">  </span><br><span class="line">//乘法  </span><br><span class="line">bignum3 = bignum1.multiply(bignum2);  </span><br><span class="line">System.out.println(&quot;积  是：&quot; + bignum3);  </span><br><span class="line">  </span><br><span class="line">//除法  </span><br><span class="line">bignum3 = bignum1.divide(bignum2);  </span><br><span class="line">System.out.println(&quot;商  是：&quot; + bignum3);  </span><br><span class="line"></span><br><span class="line">//比较</span><br><span class="line">int bignum = bignum1.compareTo(bignum2);</span><br><span class="line">返回的结果是int类型，-1表示小于，0是等于，1是大于。</span><br><span class="line"></span><br><span class="line">BigDecimal decimal = new BigDecimal(&quot;1.12345&quot;);</span><br><span class="line"></span><br><span class="line">//保留四位小数，默认四舍五入</span><br><span class="line">BigDecimal setScale = decimal.setScale(4);</span><br><span class="line">System.out.println(setScale);</span><br><span class="line"></span><br><span class="line">//保留四位小数，直接删除多余的小数</span><br><span class="line">BigDecimal setScale = decimal.setScale(4,BigDecimal.ROUND_DOWN);</span><br><span class="line">System.out.println(setScale);</span><br><span class="line"></span><br><span class="line">//保留四位小数，进位处理</span><br><span class="line">BigDecimal setScale = decimal.setScale(4,BigDecimal.ROUND_UP);</span><br><span class="line">System.out.println(setScale);</span><br><span class="line"></span><br><span class="line">//保留四位小数，四舍五入（2.35变成2.4）</span><br><span class="line">BigDecimal setScale1= decimal.setScale(4,BigDecimal.ROUND_HALF_UP);</span><br><span class="line">System.out.println(setScale);</span><br><span class="line"></span><br><span class="line">//保留四位小数，四舍五入（2.35变成2.3）</span><br><span class="line">BigDecimal setScale = decimal.setScale(4,BigDecimal.ROUND_HALF_DOWN);</span><br><span class="line">System.out.println(setScale);</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;BigDecimal算法。&lt;/p&gt;
    
    </summary>
    
      <category term="JAVA" scheme="http://lastsummer.top/blog/categories/JAVA/"/>
    
    
      <category term="java" scheme="http://lastsummer.top/blog/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Oracle表恢复到特定时间点</title>
    <link href="http://lastsummer.top/blog/2018/12/13/Oracle%E8%A1%A8%E6%81%A2%E5%A4%8D%E5%88%B0%E7%89%B9%E5%AE%9A%E6%97%B6%E9%97%B4%E7%82%B9/"/>
    <id>http://lastsummer.top/blog/2018/12/13/Oracle表恢复到特定时间点/</id>
    <published>2018-12-13T02:36:35.000Z</published>
    <updated>2018-12-13T02:51:47.446Z</updated>
    
    <content type="html"><![CDATA[<p>Oracle数据库表恢复到特定时间点。<a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">-- Create table</span><br><span class="line">create table TEST</span><br><span class="line">(</span><br><span class="line">  id    NUMBER(4),</span><br><span class="line">  name  VARCHAR2(20),</span><br><span class="line">  class VARCHAR2(20),</span><br><span class="line">  score NUMBER</span><br><span class="line">);</span><br><span class="line">-- Insert table</span><br><span class="line">insert into test values (11,&apos;测试10&apos;,&apos;一年三班&apos;,80);</span><br><span class="line">insert into test values (12,&apos;测试11&apos;,&apos;一年二班&apos;,90);</span><br><span class="line">insert into test values (13,&apos;测试12&apos;,&apos;一年一班&apos;,100);</span><br><span class="line">-- 数据库表恢复到特定时间点。</span><br><span class="line">select * from test as of timestamp </span><br><span class="line">  to_timestamp(&apos;2018-12-13 10:18:00&apos;, &apos;yyyy-mm-dd hh24:mi:ss&apos;);</span><br><span class="line">-- 临时表恢复之前的数据</span><br><span class="line">create table 临时表 as</span><br><span class="line">  select * from 你的那个数据被删除的表 as of </span><br><span class="line">  timestamp to_timestamp(&apos;2013-08-13 14:00:00&apos;,  &apos;yyyy-mm-dd hh24:mi:ss&apos;);</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Oracle数据库表恢复到特定时间点。&lt;/p&gt;
    
    </summary>
    
      <category term="ORACLE" scheme="http://lastsummer.top/blog/categories/ORACLE/"/>
    
    
      <category term="SQL" scheme="http://lastsummer.top/blog/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>Oracle查询各班前三名学生信息</title>
    <link href="http://lastsummer.top/blog/2018/11/30/Oracle%E6%9F%A5%E8%AF%A2%E5%90%84%E7%8F%AD%E5%89%8D%E4%B8%89%E5%90%8D%E5%AD%A6%E7%94%9F%E4%BF%A1%E6%81%AF/"/>
    <id>http://lastsummer.top/blog/2018/11/30/Oracle查询各班前三名学生信息/</id>
    <published>2018-11-30T06:46:11.000Z</published>
    <updated>2018-11-30T09:09:59.033Z</updated>
    
    <content type="html"><![CDATA[<p>Oracle查询各班前三名学生的信息。<br>row_number函数排序最好用它，每一行记录生成一个序号，依次排序且不会重复。<br>rank函数返回结果集的分区内每行排名，行的排名是相关行之前的排名数加一，重复排序会重复。<br>dense_rank函数的功能与rank函数类似，dense_rank函数在生成序号时是连续的，依次排序会重复。<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">select * from </span><br><span class="line">  (select rank() over(partition by class order by score desc nulls last)rank,</span><br><span class="line">  s.*from test s) t</span><br><span class="line">  where rank &lt;= 3</span><br><span class="line">  order by class asc, score desc;</span><br></pre></td></tr></table></figure></p><p><img src="/blog/2018/11/30/Oracle查询各班前三名学生信息/sql1.png" alt="rank效果展示"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">select * from </span><br><span class="line">  (select row_number()over(partition by class order by score desc nulls last)</span><br><span class="line">  rank,s.*from test s) t</span><br><span class="line">  where rank &lt;= 3</span><br><span class="line">  order by class asc, score desc</span><br></pre></td></tr></table></figure></p><p><img src="/blog/2018/11/30/Oracle查询各班前三名学生信息/sql2.png" alt="row_number效果展示"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">select * from </span><br><span class="line">  (select dense_rank()over(partition by class order by score desc nulls last)</span><br><span class="line">  rank,s.*from test s) t</span><br><span class="line">  where rank &lt;= 3</span><br><span class="line">  order by class asc, score desc</span><br></pre></td></tr></table></figure></p><p><img src="/blog/2018/11/30/Oracle查询各班前三名学生信息/sql3.png" alt="dense_rank效果展示"></p><h2 id="关于Parttion-by："><a href="#关于Parttion-by：" class="headerlink" title="关于Parttion by："></a>关于Parttion by：</h2><ul><li>Parttion by关键字是Oracle中分析性函数的一部分，用于给结果集进行分区。它和聚合函数Group by不同的地方在于它只是将原始数据进行名次排列，能够返回一个分组中的多条记录（记录数不变），而Group by是对原始数据进行聚合统计，一般只有一条反映统计值的结果（每组返回一条）。<br>TIPS：<br>使用rank over()的时候，空值是最大的，如果排序字段为null, 可能造成null字段排在最前面，影响排序结果。<br>可以这样： rank over(partition by course order by score desc nulls last)</li></ul><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><ul><li>在使用排名函数的时候需要注意以下三点：<br>1、排名函数必须有 OVER 子句。<br>2、排名函数必须有包含 ORDER BY 的 OVER 子句。<br>3、分组内从1开始排序。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Oracle查询各班前三名学生的信息。&lt;br&gt;row_number函数排序最好用它，每一行记录生成一个序号，依次排序且不会重复。&lt;br&gt;rank函数返回结果集的分区内每行排名，行的排名是相关行之前的排名数加一，重复排序会重复。&lt;br&gt;dense_rank函数的功能与rank函数类似，dense_rank函数在生成序号时是连续的，依次排序会重复。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ORACLE" scheme="http://lastsummer.top/blog/categories/ORACLE/"/>
    
    
      <category term="SQL" scheme="http://lastsummer.top/blog/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>Java获得日期间的所有月份</title>
    <link href="http://lastsummer.top/blog/2018/11/28/Java%E8%8E%B7%E5%BE%97%E6%97%A5%E6%9C%9F%E9%97%B4%E7%9A%84%E6%89%80%E6%9C%89%E6%9C%88%E4%BB%BD/"/>
    <id>http://lastsummer.top/blog/2018/11/28/Java获得日期间的所有月份/</id>
    <published>2018-11-28T06:53:09.000Z</published>
    <updated>2018-11-28T07:47:51.926Z</updated>
    
    <content type="html"><![CDATA[<p>java获得两个日期之间的所有月份及日期之间的间隔。<a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">private static List&lt;String&gt; getMonthBetween(String minDate, String maxDate) </span><br><span class="line"> throws ParseException &#123;</span><br><span class="line">  ArrayList&lt;String&gt; result = new ArrayList&lt;String&gt;();</span><br><span class="line">  SimpleDateFormat sdf = new SimpleDateFormat(&quot;yyyy-MM&quot;);//格式化为年月</span><br><span class="line"></span><br><span class="line">  Calendar min = Calendar.getInstance();</span><br><span class="line">  Calendar max = Calendar.getInstance();</span><br><span class="line"></span><br><span class="line">  min.setTime(sdf.parse(minDate));</span><br><span class="line">  min.set(min.get(Calendar.YEAR), min.get(Calendar.MONTH), 1);</span><br><span class="line"></span><br><span class="line">  max.setTime(sdf.parse(maxDate));</span><br><span class="line">  max.set(max.get(Calendar.YEAR), max.get(Calendar.MONTH), 2);</span><br><span class="line"></span><br><span class="line">  Calendar curr = max;</span><br><span class="line">  while (min.before(curr)) &#123;</span><br><span class="line">result.add(sdf.format(curr.getTime()));</span><br><span class="line">curr.add(Calendar.MONTH, -1);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  //得到日期之间的间隔totalMonth</span><br><span class="line">  Calendar calendarStart = Calendar.getInstance();</span><br><span class="line">  int startYear = calendarStart.get(Calendar.YEAR);</span><br><span class="line">  int startMonth = calendarStart.get(Calendar.MONTH);</span><br><span class="line">  Calendar calendarEnd = Calendar.getInstance();</span><br><span class="line">  calendarEnd.setTime(sdf.parse(maxDate));</span><br><span class="line">  int endYear = calendarEnd.get(Calendar.YEAR);</span><br><span class="line">  int endMonth = calendarEnd.get(Calendar.MONTH);</span><br><span class="line">  int totalMonth = 0;</span><br><span class="line">  if (endYear &gt; startYear) &#123;</span><br><span class="line">totalMonth = (endYear-startYear)*12 +(endMonth - startMonth)+1;</span><br><span class="line">  &#125;else if (endYear == startYear) &#123;</span><br><span class="line">totalMonth = endMonth - startMonth+1;</span><br><span class="line">  &#125;else &#123;</span><br><span class="line">throw new ParameterException(&quot;结束时间不能小于开始时间&quot;);</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  return result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) throws ParseException &#123;</span><br><span class="line">  List&lt;String&gt; list= getMonthBetween(&quot;2018-10&quot;,&quot;2019-10&quot;);</span><br><span class="line">  for(String date : list) &#123;</span><br><span class="line">    System.out.println(date);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;java获得两个日期之间的所有月份及日期之间的间隔。&lt;/p&gt;
    
    </summary>
    
      <category term="JAVA" scheme="http://lastsummer.top/blog/categories/JAVA/"/>
    
    
      <category term="JAVA" scheme="http://lastsummer.top/blog/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>Git添加Tag用法</title>
    <link href="http://lastsummer.top/blog/2018/11/14/Git%E6%B7%BB%E5%8A%A0Tag%E7%94%A8%E6%B3%95/"/>
    <id>http://lastsummer.top/blog/2018/11/14/Git添加Tag用法/</id>
    <published>2018-11-14T06:40:20.000Z</published>
    <updated>2019-03-04T06:04:40.749Z</updated>
    
    <content type="html"><![CDATA[<p>作为版本管理工具，Git可以对某个版本打上标签(tag)，表示本版本为发行版。这样一个不可修改的历史代码版本就像被我们封存起来一样,不论是运维发布拉取,或者以后的代码版本管理,都是十分方便的。<br><a id="more"></a><br>Git标签分为两类：<br>1、轻量级的：它其实是一个独立的分支,或者说是一个不可变的分支.指向特定提交对象的引用<br>2、带附注的：实际上是存储在仓库中的一个独立对象，它有自身的校验和信息，包含着标签的名字，标签说明，标签本身也允许使用 GNU Privacy Guard (GPG) 来签署或验证,电子邮件地址和日期，一般我们都建议使用含附注型的标签，以便保留相关信息</p><h2 id="查看标签"><a href="#查看标签" class="headerlink" title="查看标签"></a>查看标签</h2><h3 id="打印所有标签"><a href="#打印所有标签" class="headerlink" title="打印所有标签"></a>打印所有标签</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag</span><br></pre></td></tr></table></figure><h3 id="打印符合检索条件的标签"><a href="#打印符合检索条件的标签" class="headerlink" title="打印符合检索条件的标签"></a>打印符合检索条件的标签</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag -l &lt;版本号&gt;</span><br></pre></td></tr></table></figure><p>如 <code>git tag -l 1.*.*</code> 为搜索一级版本为1的版本</p><h3 id="查看对应标签状态"><a href="#查看对应标签状态" class="headerlink" title="查看对应标签状态"></a>查看对应标签状态</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout &lt;版本号&gt;</span><br></pre></td></tr></table></figure><h2 id="创建本地标签"><a href="#创建本地标签" class="headerlink" title="创建本地标签"></a>创建本地标签</h2><h3 id="创建轻量标签"><a href="#创建轻量标签" class="headerlink" title="创建轻量标签"></a>创建轻量标签</h3><p>轻量标签指向一个发行版的分支，其只是一个像某commit的引用，不存储名称时间戳及标签说明等信息。定义方法如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag &lt;版本号&gt;-light</span><br></pre></td></tr></table></figure></p><h3 id="创建带附注标签"><a href="#创建带附注标签" class="headerlink" title="创建带附注标签"></a>创建带附注标签</h3><p>相对于轻量标签，附注标签是一个独立的标签对象，包含了名称时间戳以及标签备注等信息，同时指向对应的commit。定义方法如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag -a &lt;版本号&gt; -m &quot;&lt;备注信息&gt;&quot;</span><br></pre></td></tr></table></figure></p><p>同时我们也可以像特定的commit添加标签，使用该commit对应的SHA值即可<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag -a &lt;版本号&gt; &lt;SHA值&gt; -m &quot;&lt;备注信息&gt;&quot;</span><br></pre></td></tr></table></figure></p><p>比如 <code>git tag -a 1.0.0 0c3b62d -m &quot;Release Edition v1.0.0&quot;</code> 就是为SHA为0c3b62d的这次提交打了1.0发行版的tag</p><h2 id="删除标签"><a href="#删除标签" class="headerlink" title="删除标签"></a>删除标签</h2><h3 id="删除本地标签"><a href="#删除本地标签" class="headerlink" title="删除本地标签"></a>删除本地标签</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag -d &lt;版本号&gt;</span><br></pre></td></tr></table></figure><h3 id="删除远程仓库的标签"><a href="#删除远程仓库的标签" class="headerlink" title="删除远程仓库的标签"></a>删除远程仓库的标签</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin --delete &lt;版本号&gt; #新版本Git (&gt; v1.7.0)</span><br></pre></td></tr></table></figure><h2 id="推送标签"><a href="#推送标签" class="headerlink" title="推送标签"></a>推送标签</h2><h3 id="推送所有标签"><a href="#推送所有标签" class="headerlink" title="推送所有标签"></a>推送所有标签</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin --tags</span><br></pre></td></tr></table></figure><h3 id="推送指定版本的标签"><a href="#推送指定版本的标签" class="headerlink" title="推送指定版本的标签"></a>推送指定版本的标签</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin &lt;版本号&gt;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>最后总结一下常用命令，方便查阅。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">// 创建标签(本地)</span><br><span class="line">// 创建轻量标签</span><br><span class="line">git tag 1.0.0-light</span><br><span class="line">// 创建带备注标签(推荐)</span><br><span class="line">git tag -a 1.0.0 -m &quot;这是备注信息&quot;</span><br><span class="line">// 针对特定commit版本SHA创建标签</span><br><span class="line">git tag -a 1.0.0 0c3b62d -m &quot;这是备注信息&quot;</span><br><span class="line"></span><br><span class="line">// 查看标签</span><br><span class="line">// 打印所有标签</span><br><span class="line">git tag</span><br><span class="line">// 打印符合检索条件的标签</span><br><span class="line">git tag -l 1.*.*</span><br><span class="line">// 查看对应标签状态</span><br><span class="line">git checkout 1.0.0</span><br><span class="line"></span><br><span class="line">// 将本地标签发布到远程仓库</span><br><span class="line">// 发送所有</span><br><span class="line">git push origin --tags</span><br><span class="line">// 指定版本发送</span><br><span class="line">git push origin 1.0.0</span><br><span class="line"></span><br><span class="line">// 删除标签(本地)</span><br><span class="line">git tag -d 1.0.0</span><br><span class="line"></span><br><span class="line">// 删除远程仓库对应标签</span><br><span class="line">// Git版本 &gt; V1.7.0</span><br><span class="line">git push origin --delete 1.0.0</span><br><span class="line">// 旧版本Git</span><br><span class="line">git push origin :refs/tags/1.0.0</span><br></pre></td></tr></table></figure></p><p>参考博客：<a href="https://www.jianshu.com/p/8956a9cfa9da" target="_blank" rel="noopener">使用Git添加Tag的方法</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作为版本管理工具，Git可以对某个版本打上标签(tag)，表示本版本为发行版。这样一个不可修改的历史代码版本就像被我们封存起来一样,不论是运维发布拉取,或者以后的代码版本管理,都是十分方便的。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Git" scheme="http://lastsummer.top/blog/categories/Git/"/>
    
    
      <category term="Git" scheme="http://lastsummer.top/blog/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Hexo实现github+coding双线部署</title>
    <link href="http://lastsummer.top/blog/2018/11/08/Hexo%E5%AE%9E%E7%8E%B0github-coding%E5%8F%8C%E7%BA%BF%E9%83%A8%E7%BD%B2/"/>
    <id>http://lastsummer.top/blog/2018/11/08/Hexo实现github-coding双线部署/</id>
    <published>2018-11-08T07:15:48.000Z</published>
    <updated>2018-11-08T09:05:37.867Z</updated>
    
    <content type="html"><![CDATA[<p>Hexo是一个开源的静态博客框架，支持markdown文档，应用起来很方便而且有丰富的主题模板可供选择，是建立个性化的个人博客的不二之选，因为GitHub在国内访问速度较慢，因此选择Coding.从网上搜索的结果来看，很多人都认为github博客在国内的seo情况不太好，不被百度爬虫所青睐。一个比较好的方案是，同时将hexo博客部署到github和Coding上。<br><a id="more"></a></p><h3 id="第一步：注册Coding账号"><a href="#第一步：注册Coding账号" class="headerlink" title="第一步：注册Coding账号"></a>第一步：注册<a href="https://coding.net/" target="_blank" rel="noopener">Coding</a>账号</h3><h3 id="第二步：Coding应用配置"><a href="#第二步：Coding应用配置" class="headerlink" title="第二步：Coding应用配置"></a>第二步：Coding应用配置</h3><p><img src="/blog/2018/11/08/Hexo实现github-coding双线部署/coding1.png" alt="项目-项目名称-创建项目"></p><h3 id="第三步：配置SSH公钥"><a href="#第三步：配置SSH公钥" class="headerlink" title="第三步：配置SSH公钥"></a>第三步：配置SSH公钥</h3><p>我们要想生成SSH key，首先就得先安装 SSH，对于 Linux 和 Mac 系统，其默认是安装 SSH 的，而对于 Windows 系统，其默认是不安装 SSH 的，不过由于我们安装了 Git Bash，其也应该自带了 SSH. 可以通过在 Git Bash 中输入ssh命令，查看本机是否安装 SSH：<br> <img src="/blog/2018/11/08/Hexo实现github-coding双线部署/ssh0.png" alt="查看是否安装ssh"><br>初次使用git的用户要使用git协议大概需要三个步骤：<br>一、生成密钥对<br>二、设置远程仓库（本文以github为例）上的公钥<br>三、把git的 remote url 修改为git协议（以上两个步骤初次设置过以后，以后使用都不需要再次设置，此步骤视以后项目的remote url而定，如果以后其他项目的协议为https则需要此步骤）<br>打开Hexo安装目录，右键git bash here点击<br><img src="/blog/2018/11/08/Hexo实现github-coding双线部署/ssh1.png" alt="输入cd ~/.ssh回车-看你是否有了ssh key 密钥，有了就备份"><br><img src="/blog/2018/11/08/Hexo实现github-coding双线部署/ssh2.png" alt="生成密钥"><br>打开你的id_rsa.pub文件，复制下里面的内容，然后登录进去你的coding；<br><img src="/blog/2018/11/08/Hexo实现github-coding双线部署/coding3.png" alt="密钥位置C:\Users\用户名\.ssh"><br><img src="/blog/2018/11/08/Hexo实现github-coding双线部署/coding2.png" alt="个人设置-SSH公钥-新增公钥"><br><img src="/blog/2018/11/08/Hexo实现github-coding双线部署/coding4.png" alt="把id_rsa.pub内容复制到公式内容-添加即可"></p><h3 id="第四步：初始化部署仓库"><a href="#第四步：初始化部署仓库" class="headerlink" title="第四步：初始化部署仓库"></a>第四步：初始化部署仓库</h3><p><img src="/blog/2018/11/08/Hexo实现github-coding双线部署/coding5.png" alt="三种基本初始化方法"><br><img src="/blog/2018/11/08/Hexo实现github-coding双线部署/coding6.png" alt="复制"></p><ul><li>修改博客站点_config.yml</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https://hexo.io/docs/deployment.html</span><br><span class="line">#（修改coding的路径，实现coding及github同时部署）</span><br><span class="line">deploy:</span><br><span class="line">- type: git</span><br><span class="line">  repository: </span><br><span class="line">    github: git@github.com:wangrui15034005712/blog.git,master</span><br><span class="line">    coding: https://git.dev.tencent.com/wangrui15034005712/demo.git,master</span><br></pre></td></tr></table></figure><ul><li>在gitbash上输入hexo clean 、hexo g再hexo d<br>这样你的博客就被部署到Coding上了<br><img src="/blog/2018/11/08/Hexo实现github-coding双线部署/coding7.png" alt="pages服务-一键开启pages服务"><br><img src="/blog/2018/11/08/Hexo实现github-coding双线部署/coding8.png" alt=""><h3 id="第五步：域名配置"><a href="#第五步：域名配置" class="headerlink" title="第五步：域名配置"></a>第五步：域名配置</h3>进入域名控制台，如有不理解之处可查看<a href="https://lastsummer.top/blog/2018/10/19/Hexo-Github搭建个人博客二">Hexo-Github搭建个人博客二</a><br><img src="/blog/2018/11/08/Hexo实现github-coding双线部署/coding10.png" alt="按图片配置成功即可，先配置Coding再配置Gihub，否则域名未连通"><br><img src="/blog/2018/11/08/Hexo实现github-coding双线部署/coding9.png" alt="点击设置-绑定新域名-确定"></li></ul><p>大功告成！</p><p>个人博客：<a href="https://lastsummer.top">去年夏天</a><br>参考博客：<a href="https://blog.csdn.net/weixin_41196185/article/details/79234078" target="_blank" rel="noopener">hexo+github打造个人博客系列之Coding托管（实现github+coding双线部署）</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Hexo是一个开源的静态博客框架，支持markdown文档，应用起来很方便而且有丰富的主题模板可供选择，是建立个性化的个人博客的不二之选，因为GitHub在国内访问速度较慢，因此选择Coding.从网上搜索的结果来看，很多人都认为github博客在国内的seo情况不太好，不被百度爬虫所青睐。一个比较好的方案是，同时将hexo博客部署到github和Coding上。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="hexo" scheme="http://lastsummer.top/blog/categories/hexo/"/>
    
    
      <category term="Github" scheme="http://lastsummer.top/blog/tags/Github/"/>
    
      <category term="Coding" scheme="http://lastsummer.top/blog/tags/Coding/"/>
    
  </entry>
  
  <entry>
    <title>Hexo博客用自己的页面做首页</title>
    <link href="http://lastsummer.top/blog/2018/11/07/Hexo%E5%8D%9A%E5%AE%A2%E7%94%A8%E8%87%AA%E5%B7%B1%E7%9A%84%E9%A1%B5%E9%9D%A2%E5%81%9A%E9%A6%96%E9%A1%B5/"/>
    <id>http://lastsummer.top/blog/2018/11/07/Hexo博客用自己的页面做首页/</id>
    <published>2018-11-07T02:37:51.000Z</published>
    <updated>2018-11-08T08:53:28.610Z</updated>
    
    <content type="html"><![CDATA[<ul><li>Hexo博客用自己的页面做首页。个人网站 <a href="https://lastsummer.top">去年夏天</a> 欢迎大家的访问！</li></ul><a id="more"></a><p><img src="/blog/2018/11/07/Hexo博客用自己的页面做首页/index1.png" alt="效果展示"></p><ul><li>Demo地址：<a href="https://lastsummer.top">https://lastsummer.top</a><br>Demo仓库：<a href="https://github.com/wangrui15034005712/wangrui15034005712.github.io" target="_blank" rel="noopener">https://github.com/wangrui15034005712/wangrui15034005712.github.io</a><br>那么接下来是教程，本教程的前提已经用hexo将博客搭建在 xxxxxx.github.io的repository上<br>那么现在你要做的有以下几步</li></ul><h2 id="新建一个仓库"><a href="#新建一个仓库" class="headerlink" title="新建一个仓库"></a>新建一个仓库</h2><ul><li>名字随便起 我起了 <strong>blog</strong><br>那么现在你有了一个空的仓库<strong>repository</strong><br>然后本地clone下按照提示初始化一个主<strong>master</strong>分支<br>访问xxxxxx.github.io/blog成功即可</li></ul><h2 id="修改博客站点-config-yml"><a href="#修改博客站点-config-yml" class="headerlink" title="修改博客站点_config.yml"></a>修改博客站点_config.yml</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># URL</span><br><span class="line">## If your site is put in a subdirectory, set url as &apos;http://yoursite.com/child&apos; and root as &apos;/child/&apos;</span><br><span class="line">url: https://xxxxxx.github.io/blog(改这里)</span><br><span class="line">root: /blog(改这里)</span><br><span class="line">permalink: :year/:month/:day/:title/</span><br><span class="line">permalink_defaults:</span><br><span class="line"></span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: https://github.com/xxxxxx/blog.git(改这里)</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><h2 id="重新部署你的博客"><a href="#重新部署你的博客" class="headerlink" title="重新部署你的博客"></a>重新部署你的博客</h2><ul><li>在对应的文件下在gitbash上输入hexo clean 、hexo g再hexo d<br>这样你的博客就被部署到<code>https://xxxxxx.github.io/blog/</code>上了</li></ul><h2 id="清空原来的仓库"><a href="#清空原来的仓库" class="headerlink" title="清空原来的仓库"></a>清空原来的仓库</h2><ul><li>现在原来那个xxxxxx.github.io的repository你就可以清空<br>或者直接删除重新新建xxxxxx.github.io的repository（进入想要删除的仓库，点击setting 占到delete this repository 在弹窗里输入仓库名，确认即可）<br>然后新建一个index.html，把你自定义页面的代码复制到里面就好了，<br>然后可以通过<code>&lt;a href=&quot;blog/&quot;&gt;&lt;/a&gt;</code>跳转到你的博客界面了<br>可以使用Demo进行配置，已在参考博客Demo代码中进行了优化</li></ul><p>大功告成！</p><p>个人博客：<a href="https://lastsummer.top">去年夏天</a><br>参考博客：<a href="http://blog.lightina.cn/2016/10/27/HexoOverview/" target="_blank" rel="noopener">Hexo-用自己的页面做首页</a></p>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;Hexo博客用自己的页面做首页。个人网站 &lt;a href=&quot;https://lastsummer.top&quot;&gt;去年夏天&lt;/a&gt; 欢迎大家的访问！&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="hexo" scheme="http://lastsummer.top/blog/categories/hexo/"/>
    
    
      <category term="Github" scheme="http://lastsummer.top/blog/tags/Github/"/>
    
      <category term="Html" scheme="http://lastsummer.top/blog/tags/Html/"/>
    
  </entry>
  
  <entry>
    <title>Hexo博客添加返回顶部按钮</title>
    <link href="http://lastsummer.top/blog/2018/11/06/Hexo%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0%E8%BF%94%E5%9B%9E%E9%A1%B6%E9%83%A8%E6%8C%89%E9%92%AE/"/>
    <id>http://lastsummer.top/blog/2018/11/06/Hexo博客添加返回顶部按钮/</id>
    <published>2018-11-06T09:49:51.000Z</published>
    <updated>2018-11-06T10:08:48.307Z</updated>
    
    <content type="html"><![CDATA[<p>Hexo博客添加返回顶部按钮。<br><a id="more"></a><br><img src="/blog/2018/11/06/Hexo博客添加返回顶部按钮/top1.png" alt="效果展示"></p><h3 id="返回顶部模块代码"><a href="#返回顶部模块代码" class="headerlink" title="返回顶部模块代码"></a>返回顶部模块代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;top gongyong&quot;&gt;</span><br><span class="line">    &lt;a href=&quot;javascript:void(0);&quot;&gt;顶部&lt;/a&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;bottom gongyong&quot;&gt;</span><br><span class="line">    &lt;a href=&quot;javascript:void(0);&quot;&gt;底部&lt;/a&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">body &#123;</span><br><span class="line">position:relative;</span><br><span class="line">&#125;</span><br><span class="line">.gongyong a &#123;</span><br><span class="line">width:50px;</span><br><span class="line">height:50px;</span><br><span class="line">background:#fff;</span><br><span class="line">color:#000;</span><br><span class="line">position:fixed;</span><br><span class="line">text-align:center;</span><br><span class="line">line-height:50px;</span><br><span class="line">right:2%;</span><br><span class="line">text-decoration:none;</span><br><span class="line">transition:all 0.5s;</span><br><span class="line">display:none;</span><br><span class="line">&#125;</span><br><span class="line">.top a &#123;</span><br><span class="line">top:70%;</span><br><span class="line">&#125;</span><br><span class="line">.bottom a &#123;</span><br><span class="line">top:80%;</span><br><span class="line">&#125;</span><br><span class="line">.gongyong a.hover &#123;</span><br><span class="line">background:#e14da0;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">$(function() &#123;</span><br><span class="line">    $(window).scroll(function() &#123;</span><br><span class="line">        if ($(window).scrollTop() &gt;= 300) &#123;</span><br><span class="line">            $(&apos;.gongyong a&apos;).fadeIn(600);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            $(&apos;.gongyong a&apos;).fadeOut(600);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    $(&apos;.gongyong a&apos;).hover(function() &#123;</span><br><span class="line">        $(this).addClass(&apos;hover&apos;);</span><br><span class="line">    &#125;, function() &#123;</span><br><span class="line">        $(this).removeClass(&apos;hover&apos;);</span><br><span class="line">    &#125;);</span><br><span class="line">    $(&apos;.top a&apos;).click(function() &#123;</span><br><span class="line">        $(&quot;html,body&quot;).animate(&#123;</span><br><span class="line">            scrollTop: 0</span><br><span class="line">        &#125;, 500);</span><br><span class="line">    &#125;);</span><br><span class="line">    $(&apos;.bottom a&apos;).click(function() &#123;</span><br><span class="line">        $(&quot;html,body&quot;).animate(&#123;</span><br><span class="line">            scrollTop: $(document).height()</span><br><span class="line">        &#125;, 500);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>大功告成！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Hexo博客添加返回顶部按钮。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="hexo" scheme="http://lastsummer.top/blog/categories/hexo/"/>
    
    
      <category term="Html" scheme="http://lastsummer.top/blog/tags/Html/"/>
    
  </entry>
  
  <entry>
    <title>Hexo添加评论功能</title>
    <link href="http://lastsummer.top/blog/2018/11/05/Hexo%E6%B7%BB%E5%8A%A0%E8%AF%84%E8%AE%BA%E5%8A%9F%E8%83%BD/"/>
    <id>http://lastsummer.top/blog/2018/11/05/Hexo添加评论功能/</id>
    <published>2018-11-05T05:48:42.000Z</published>
    <updated>2018-11-05T07:14:25.489Z</updated>
    
    <content type="html"><![CDATA[<p>目前博客站点使用的评论功能，多说，网易云跟贴都已经下线。Disqus也被挡在墙外，友言貌似也不行。<br><a id="more"></a></p><h2 id="可用的评论系统大概有"><a href="#可用的评论系统大概有" class="headerlink" title="可用的评论系统大概有"></a>可用的评论系统大概有</h2><ul><li>来必力：<a href="https://livere.com" target="_blank" rel="noopener">https://livere.com</a> （来自韩国，使用邮箱注册）</li><li>畅言： <a href="http://changyan.kuaizhan.com" target="_blank" rel="noopener">http://changyan.kuaizhan.com</a> （安装需要备案号）</li><li>Valine: <a href="https://github.com/xCss/Valine" target="_blank" rel="noopener">https://github.com/xCss/Valine</a> (用了下没效果，应该是我的主题没有集成Valine，支持Next）</li></ul><p>综上，最终采用了来必力及畅言。</p><h2 id="来必力"><a href="#来必力" class="headerlink" title="来必力"></a>来必力</h2><h3 id="注册官网"><a href="#注册官网" class="headerlink" title="注册官网"></a>注册官网</h3><ul><li>打开来必力官网 <a href="https://livere.com" target="_blank" rel="noopener">https://livere.com</a><br><img src="/blog/2018/11/05/Hexo添加评论功能/comment1.png" alt="体验-现在安装（免费）"><br><img src="/blog/2018/11/05/Hexo添加评论功能/comment2.png" alt="data-uid记录下来-点击copy"></li></ul><h3 id="安装及配置"><a href="#安装及配置" class="headerlink" title="安装及配置"></a>安装及配置</h3><p><code>themes\hexo-theme-shana-master\layout\_partial\comments</code> 下新建 <code>livere.ejs</code>(如不存在目录就新建即可) 把复制的内容粘贴进来；<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 来必力City版安装代码 --&gt;</span><br><span class="line">&lt;div id=&quot;lv-container&quot; data-id=&quot;city&quot; data-uid=&quot;&lt;%= theme.livere_uid %&gt;&quot;&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">var refer = &quot;&#123;Permalink&#125;&quot;.replace(&quot;http://&quot;,&quot;&quot;);</span><br><span class="line">   (function(d, s) &#123;</span><br><span class="line">       var j, e = d.getElementsByTagName(s)[0];</span><br><span class="line"></span><br><span class="line">       if (typeof LivereTower === &apos;function&apos;) &#123; return; &#125;</span><br><span class="line"></span><br><span class="line">       j = d.createElement(s);</span><br><span class="line">       j.src = &apos;https://cdn-city.livere.com/js/embed.dist.js&apos;;</span><br><span class="line">       j.async = true;</span><br><span class="line"></span><br><span class="line">       e.parentNode.insertBefore(j, e);</span><br><span class="line">   &#125;)(document, &apos;script&apos;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;noscript&gt;为正常使用来必力评论功能请激活JavaScript&lt;/noscript&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;!-- City版安装代码已完成 --&gt;</span><br></pre></td></tr></table></figure></p><p>在 <code>themes\hexo-theme-shana-master\layout\_partial\article.ejs</code> 中的内容底部添加如下内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;% if (!index &amp;&amp; post.comments &amp;&amp; theme.livere.on)&#123; %&gt;</span><br><span class="line">  &lt;%- partial(&apos;comments/livere&apos;) %&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure></p><p>在主题<code>themes\hexo-theme-shana-master\_config.yml</code>添加内容如下(livere_uid就是data-uid)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#来必力</span><br><span class="line">livere:</span><br><span class="line">   on: true</span><br><span class="line">   livere_uid: ###############</span><br></pre></td></tr></table></figure></p><p><img src="/blog/2018/11/05/Hexo添加评论功能/comment3.png" alt="来必力效果展示"><br>来必力就已经集成到自己的博客中啦！</p><h2 id="畅言"><a href="#畅言" class="headerlink" title="畅言"></a>畅言</h2><h3 id="注册官网-1"><a href="#注册官网-1" class="headerlink" title="注册官网"></a>注册官网</h3><ul><li>打开畅言官网 <a href="http://changyan.kuaizhan.com/" target="_blank" rel="noopener">http://changyan.kuaizhan.com/</a><br><img src="/blog/2018/11/05/Hexo添加评论功能/comment4.png" alt="点击后台总览-获取畅言密匙"><br><img src="/blog/2018/11/05/Hexo添加评论功能/comment5.png" alt="点击安装畅言-通用代码安装-点击复制代码"></li></ul><h3 id="安装及配置-1"><a href="#安装及配置-1" class="headerlink" title="安装及配置"></a>安装及配置</h3><p><code>themes\hexo-theme-shana-master\layout\_partial\comments</code> 下新建 <code>changyan.ejs</code>(如不存在目录就新建即可) 把复制的内容粘贴进来；<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--PC和WAP自适应版 sid=&quot;请将此处替换为配置SourceID的语句&quot;--&gt;</span><br><span class="line">&lt;div id=&quot;SOHUCS&quot;&gt;&lt;/div&gt; </span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt; </span><br><span class="line">(function()&#123; </span><br><span class="line">var appid = &apos;修改成自己的畅言APP ID&apos;; </span><br><span class="line">var conf = &apos;修改成自己的畅言APP KEY&apos;; </span><br><span class="line">var width = window.innerWidth || document.documentElement.clientWidth; </span><br><span class="line">if (width &lt; 960) &#123;</span><br><span class="line">  window.document.write(&apos;&lt;script id=&quot;changyan_mobile_js&quot; charset=&quot;utf-8&quot; type=&quot;text/javascript&quot; src=&quot;https://changyan.sohu.com/upload/mobile/wap-js/changyan_mobile.js?client_id=&apos; + appid + &apos;&amp;conf=&apos; + conf + &apos;&quot;&gt;&lt;\/script&gt;&apos;); </span><br><span class="line">&#125; else &#123; </span><br><span class="line">  var loadJs=function(d,a)&#123;</span><br><span class="line">  var c=document.getElementsByTagName(&quot;head&quot;)[0]||document.head||document.documentElement;</span><br><span class="line">  var b=document.createElement(&quot;script&quot;);</span><br><span class="line">  b.setAttribute(&quot;type&quot;,&quot;text/javascript&quot;);</span><br><span class="line">  b.setAttribute(&quot;charset&quot;,&quot;UTF-8&quot;);</span><br><span class="line">  b.setAttribute(&quot;src&quot;,d);</span><br><span class="line">  if(typeof a===&quot;function&quot;)&#123;</span><br><span class="line">  if(window.attachEvent)&#123;</span><br><span class="line">  b.onreadystatechange=function()&#123;</span><br><span class="line">  var e=b.readyState;if(e===&quot;loaded&quot;||e===&quot;complete&quot;)&#123;</span><br><span class="line">  b.onreadystatechange=null;a()&#125;&#125;&#125;else&#123;b.onload=a&#125;&#125;c.appendChild(b)&#125;;</span><br><span class="line">  loadJs(&quot;https://changyan.sohu.com/upload/changyan.js&quot;,</span><br><span class="line">  function()&#123;window.changyan.api.config(&#123;appid:appid,conf:conf&#125;)&#125;); &#125; </span><br><span class="line">  &#125;)(); </span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><p>在 <code>themes\hexo-theme-shana-master\layout\_partial\article.ejs</code> 中的内容底部添加如下内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;% if (!index &amp;&amp; post.comments &amp;&amp; theme.changyan.on)&#123; %&gt;</span><br><span class="line">&lt;%- partial(&apos;comments/changyan&apos;) %&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure></p><p>在主题<code>themes\hexo-theme-shana-master\_config.yml</code>添加内容如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#畅言</span><br><span class="line">changyan:</span><br><span class="line">   on: true</span><br></pre></td></tr></table></figure></p><p><img src="/blog/2018/11/05/Hexo添加评论功能/comment6.png" alt="畅言效果展示"><br>畅言就已经集成到自己的博客中啦！</p><ul><li>如果要修改来必力及畅言评论的样式，可以在官网进行相关配置：<br>1、评论管理<br>2、评论审核<br>3、评论数据统计<br>4、系统配置</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;目前博客站点使用的评论功能，多说，网易云跟贴都已经下线。Disqus也被挡在墙外，友言貌似也不行。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="hexo" scheme="http://lastsummer.top/blog/categories/hexo/"/>
    
    
      <category term="Html" scheme="http://lastsummer.top/blog/tags/Html/"/>
    
  </entry>
  
  <entry>
    <title>zookeeper安装和使用 windows环境</title>
    <link href="http://lastsummer.top/blog/2018/10/30/zookeeper%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8-windows%E7%8E%AF%E5%A2%83/"/>
    <id>http://lastsummer.top/blog/2018/10/30/zookeeper安装和使用-windows环境/</id>
    <published>2018-10-30T09:37:43.000Z</published>
    <updated>2018-11-02T02:19:39.947Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>1、ZooKeeper是一个分布式的，开放源码的分布式应用程序协调服务，是Google的Chubby一个开源的实现，是Hadoop和Hbase的重要组件。它是一个为分布式应用提供一致性服务的软件，提供的功能包括：配置维护、域名服务、分布式同步、组服务等。<a id="more"></a><br>2、ZooKeeper的目标就是封装好复杂易出错的关键服务，将简单易用的接口和性能高效、功能稳定的系统提供给用户。<br>3、ZooKeeper包含一个简单的原语集，提供Java和C的接口。<br>4、ZooKeeper代码版本中，提供了分布式独享锁、选举、队列的接口，代码在zookeeper-3.4.12\src\recipes。其中分布锁和队列有Java和C两个版本，选举只有Java版本。</p><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>Apache官方最新版本为：3.4.12<br>下载地址：<a href="http://mirror.bit.edu.cn/apache/zookeeper/stable/zookeeper-3.4.12.tar.gz" target="_blank" rel="noopener">http://mirror.bit.edu.cn/apache/zookeeper/stable/zookeeper-3.4.12.tar.gz</a></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>解压到指定目录下    D:\dubbo\zookeeper-3.4.12<br>修改zoo_sample.cfg 文件名(D:\dubbo\zookeeper-3.4.12\conf) 为 zoo.cfg<br>主要修改一下日志位置，具体配置文件如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"># The number of milliseconds of each tick</span><br><span class="line">#tickTime：这个时间是作为 Zookeeper 服务器之间或客户端与服务器之间维持心跳的时间间隔，也就是每个 tickTime 时间就会发送一个心跳。  </span><br><span class="line">#默认情况下最小的会话超时时间为两倍的tickTime  </span><br><span class="line">tickTime=2000</span><br><span class="line"># The number of ticks that the initial   </span><br><span class="line"># synchronization phase can take  </span><br><span class="line">#zookeeper集群中的包含多台server, 其中一台为leader, 集群中其余的server为follower. initLimit参数配置初始化连接时,   </span><br><span class="line">#follower和leader之间的最长心跳时间. 此时该参数设置为5, 说明时间限制为5倍tickTime, 即5*2000=10000ms=10s.  </span><br><span class="line">initLimit=10</span><br><span class="line"># The number of ticks that can pass between </span><br><span class="line"># sending a request and getting an acknowledgement</span><br><span class="line">#该参数配置leader和follower之间发送消息, 请求和应答的最大时间长度. 此时该参数设置为2, 说明时间限制为2倍tickTime, 即4000ms.  </span><br><span class="line">syncLimit=5</span><br><span class="line"># the directory where the snapshot is stored.</span><br><span class="line"># do not use /tmp for storage, /tmp here is just </span><br><span class="line"># example sakes.</span><br><span class="line">#dataDir：顾名思义就是 Zookeeper 保存数据的目录，默认情况下，Zookeeper 将写数据的日志文件也保存在这个目录里。  </span><br><span class="line">dataDir=D:\\dubbo\\zookeeper-3.4.12-1\\data</span><br><span class="line">#dataLogDir：顾名思义就是 Zookeeper 保存日志文件的目录  </span><br><span class="line">dataLogDir=D:\\dubbo\\zookeeper-3.4.12-1\\log</span><br><span class="line"># the port at which the clients will connect</span><br><span class="line">#clientPort：这个端口就是客户端连接 Zookeeper 服务器的端口，Zookeeper 会监听这个端口，接受客户端的访问请求。  </span><br><span class="line">clientPort=2181</span><br><span class="line"># the maximum number of client connections.</span><br><span class="line"># increase this if you need to handle more clients</span><br><span class="line">#maxClientCnxns：限制连接到 ZooKeeper 的客户端的数量  </span><br><span class="line">#maxClientCnxns=60</span><br><span class="line">#</span><br><span class="line"># Be sure to read the maintenance section of the </span><br><span class="line"># administrator guide before turning on autopurge.</span><br><span class="line">#</span><br><span class="line"># http://zookeeper.apache.org/doc/current/zookeeperAdmin.html#sc_maintenance</span><br><span class="line">#</span><br><span class="line"># The number of snapshots to retain in dataDir</span><br><span class="line">#autopurge.snapRetainCount=3</span><br><span class="line"># Purge task interval in hours</span><br><span class="line"># Set to &quot;0&quot; to disable auto purge feature</span><br><span class="line">#autopurge.purgeInterval=1</span><br></pre></td></tr></table></figure></p><p>配置文件简单解析<br>1、tickTime：这个时间是作为 Zookeeper 服务器之间或客户端与服务器之间维持心跳的时间间隔，也就是每个 tickTime 时间就会发送一个心跳。<br>2、dataDir：顾名思义就是 Zookeeper 保存数据的目录，默认情况下，Zookeeper 将写数据的日志文件也保存在这个目录里。<br>3、dataLogDir：顾名思义就是 Zookeeper 保存日志文件的目录<br>4、clientPort：这个端口就是客户端连接 Zookeeper 服务器的端口，Zookeeper 会监听这个端口，接受客户端的访问请求。</p><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><p>进入到bin目录，并且启动zkServer.cmd，这个脚本中会启动一个java进程(不可关闭，造成客户端无法访问)<br><img src="/blog/2018/10/30/zookeeper安装和使用-windows环境/zookeeper1.png" alt=""><br>启动后jps可以看到QuorumPeerMain的进程<br><img src="/blog/2018/10/30/zookeeper安装和使用-windows环境/zookeeper2.png" alt=""><br>也可以启动客户端连接一下<br><img src="/blog/2018/10/30/zookeeper安装和使用-windows环境/zookeeper3.png" alt=""><br>OK，安装成功，很简单。</p><p>个人博客：<a href="https://lastsummer.top">去年夏天</a><br>参考博客：<a href="https://blog.csdn.net/tlk20071/article/details/52028945" target="_blank" rel="noopener">zookeeper安装和使用 windows环境</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;1、ZooKeeper是一个分布式的，开放源码的分布式应用程序协调服务，是Google的Chubby一个开源的实现，是Hadoop和Hbase的重要组件。它是一个为分布式应用提供一致性服务的软件，提供的功能包括：配置维护、域名服务、分布式同步、组服务等。&lt;/p&gt;
    
    </summary>
    
      <category term="RPC" scheme="http://lastsummer.top/blog/categories/RPC/"/>
    
    
      <category term="Zookeeper" scheme="http://lastsummer.top/blog/tags/Zookeeper/"/>
    
  </entry>
  
</feed>
