<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>去年夏天</title>
  
  
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="http://lastsummer.top/blog/"/>
  <updated>2019-10-16T08:53:40.640Z</updated>
  <id>http://lastsummer.top/blog/</id>
  
  <author>
    <name>Wang Rui</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JAVA基础面试题四</title>
    <link href="http://lastsummer.top/blog/2019/10/10/JAVA%E5%9F%BA%E7%A1%80%E9%9D%A2%E8%AF%95%E9%A2%98%E5%9B%9B/"/>
    <id>http://lastsummer.top/blog/2019/10/10/JAVA基础面试题四/</id>
    <published>2019-10-10T05:57:01.000Z</published>
    <updated>2019-10-16T08:53:40.640Z</updated>
    
    <content type="html"><![CDATA[<h3 id="本文主要JAVA基础面试题四"><a href="#本文主要JAVA基础面试题四" class="headerlink" title="本文主要JAVA基础面试题四"></a>本文主要JAVA基础面试题四</h3><a id="more"></a><h4 id="Class-forName的作用-为什么要用"><a href="#Class-forName的作用-为什么要用" class="headerlink" title="Class.forName的作用?为什么要用?"></a>Class.forName的作用?为什么要用?</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">Class.forName(&quot;&quot;)返回的是类</span><br><span class="line">Class.forName(&quot;&quot;).newInstance()返回的是object</span><br><span class="line">A a = (A)Class.forName(&quot;pacage.A&quot;).newInstance(); </span><br><span class="line">动态加载和创建Class 对象，比如想根据用户输入的字符串来创建对象。</span><br><span class="line">jvm会执行静态代码段，你要记住一个概念，静态代码是和class绑定的，class装载成功就表示执行了你的静态代码了。而且以后不会再走这段静态代码了。</span><br><span class="line">第一是CLASSPATH下指定名字的.class文件加载到Java虚拟机内存中</span><br><span class="line">第二是初始化这个类</span><br><span class="line">一.首先你要明白在java里面任何class都要装载在虚拟机上才能运行。</span><br><span class="line"> 1.forName这句话就是装载类用的(new是根据加载到内存中的类创建一个实例，要分清楚)。 </span><br><span class="line"> 2.至于什么时候用，可以考虑一下这个问题，给你一个字符串变量，它代表一个类的包名和类名，你怎么实例化它？</span><br><span class="line"> A a = (A)Class.forName(&quot;pacage.A&quot;).newInstance();这和 A a =new A();是一样的效果。</span><br><span class="line"> 3.jvm在装载类时会执行类的静态代码段，要记住静态代码是和class绑定的，class装载成功就表示执行了你的静态代码了，而且以后不会再执行这段静态代码了。</span><br><span class="line"> 4.Class.forName(xxx.xx.xx)的作用是要求JVM查找并加载指定的类，也就是说JVM会执行该类的静态代码段。</span><br><span class="line"> 5. 动态加载和创建Class 对象，比如想根据用户输入的字符串来创建对象</span><br><span class="line">二.在初始化一个类，生成一个实例的时候，newInstance()方法和new关键字除了一个是方法，一个是关键字外，最主要有什么区别？</span><br><span class="line"> 1.它们的区别在于创建对象的方式不一样，前者是使用类加载机制，后者是创建一个新类。</span><br><span class="line"> 2.那么为什么会有两种创建对象方式？</span><br><span class="line"> 这主要考虑到软件的可伸缩、可扩展和可重用等软件设计思想。 </span><br><span class="line"> 3.从JVM的角度看，我们使用关键字new创建一个类的时候，这个类可以没有被加载。 但是使用newInstance()方法的时候，必须保证这个类已经加载且这个类已经连接了。</span><br><span class="line">三.最后用最简单的描述来区分new关键字和newInstance()方法的区别： </span><br><span class="line"> 1. newInstance: 弱类型。低效率。只能调用无参构造。 </span><br><span class="line"> 2. new: 强类型。相对高效。能调用任何public构造。</span><br></pre></td></tr></table></figure><h4 id="Servlet介绍？-单例多线程"><a href="#Servlet介绍？-单例多线程" class="headerlink" title="Servlet介绍？(单例多线程)"></a>Servlet介绍？(单例多线程)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">servlet的生命周期由servlet容器控制，该容器创建servlet的实例。servlet的生命周期就是指servlet实例在创建之后响应客户端请求直至销毁的全过程。</span><br><span class="line">servlet实例的首次创建取决于servlet的首次调用。servlet接口定义了servlet生命周期的三个方法，这些方法就是init(),service(),destroy().</span><br><span class="line">（1）init()方法用来把servlet导入和初始化。这个方法在servlet被预加载或在第一次请求时执行。</span><br><span class="line">（2）servlet处理0个或多个请求。servlet对每个方法都用service()方法来处理。</span><br><span class="line">（3）当web应用声明servlet被关闭、servlet被销毁、垃圾收集器对资源进行收集时，用destroy()方法来关闭servlet。    </span><br><span class="line">高并发、不安全</span><br><span class="line">只存在一个servlet、多个线程同时请求实例变量、非线程安全</span><br><span class="line">如何做到线程安全？</span><br><span class="line">1.实现SingleThreadModel接口</span><br><span class="line">2.synchronized关键字加锁lock</span><br><span class="line">3.尽量不使用实例变量</span><br></pre></td></tr></table></figure><h4 id="Volatile关键字"><a href="#Volatile关键字" class="headerlink" title="Volatile关键字"></a>Volatile关键字</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Java语言中关键字 volatile 被称作轻量级的 synchronized</span><br><span class="line">用volatile修饰的变量，线程在每次使用变量的时候，都会读取变量修改后的最新的值。</span><br><span class="line">volatile很容易被误用，用来进行原子性操作，它不能保证多个线程修改的安全性。</span><br><span class="line">Java可以使用volatile关键字，确保每个线程对本地变量的访问和修改都直接与主内存交互，而不是与本地线程的工作内存交互的，保证每个线程都能获得最新的值。</span><br></pre></td></tr></table></figure><p><img src="/blog/2019/10/10/JAVA基础面试题四/java1.png" alt=""></p><h4 id="和equals的区别？"><a href="#和equals的区别？" class="headerlink" title="==和equals的区别？"></a>==和equals的区别？</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(1)对于==，比较的是值是否相等</span><br><span class="line"> 如果作用于基本数据类型的变量，则直接比较其存储的 “值”是否相等；</span><br><span class="line"> 如果作用于引用类型的变量，则比较的是所指向的对象的地址</span><br><span class="line">(2)对于equals方法，注意：equals方法不能作用于基本数据类型的变量，equals继承Object类，比较的是是否是同一个对象</span><br><span class="line"> 如果没有对equals方法进行重写，则比较的是引用类型的变量所指向的对象的地址；</span><br><span class="line"> 诸如String、Date等类对equals方法进行了重写的话，比较的是所指向的对象的内容。</span><br></pre></td></tr></table></figure><h4 id="数组有没有length-方法？string没有lenght-方法？"><a href="#数组有没有length-方法？string没有lenght-方法？" class="headerlink" title="数组有没有length()方法？string没有lenght()方法？"></a>数组有没有length()方法？string没有lenght()方法？</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">数据没有length()，但有length属性</span><br><span class="line">string有length()方法</span><br></pre></td></tr></table></figure><h4 id="服务代理后获取真实ip地址"><a href="#服务代理后获取真实ip地址" class="headerlink" title="服务代理后获取真实ip地址"></a>服务代理后获取真实ip地址</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">java获取客户端IP地址的方法为request.getRemoteAddr()。</span><br><span class="line">request.getHeader(&quot;x-forwarded-for&quot;)</span><br><span class="line">request.getHeader(&quot;Proxy-Client-IP&quot;)</span><br><span class="line">request.getHeader(&quot;WL-Proxy-Client-IP&quot;);</span><br></pre></td></tr></table></figure><h4 id="Oracle和Mysql的区别"><a href="#Oracle和Mysql的区别" class="headerlink" title="Oracle和Mysql的区别"></a>Oracle和Mysql的区别</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1、关系型数据库</span><br><span class="line">2、Oracle收费、Mysql开源</span><br><span class="line">3、Oracle一个实例对应多个用户</span><br><span class="line">  Mysql一个用户对应多个数据库</span><br><span class="line">4、与Oracle相比，MySQL没有表空间，角色管理，快照，同义词和包以及自动存储管理。</span><br></pre></td></tr></table></figure><h4 id="Vue和JQuery区别"><a href="#Vue和JQuery区别" class="headerlink" title="Vue和JQuery区别"></a>Vue和JQuery区别</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1、Vue比JQuery减少了 DOM 操作</span><br><span class="line">2、Vue支持双向数据绑定及组件化</span><br><span class="line">3、jquery 是javacript库，封装了一些js常用的方法。（动态效果）</span><br><span class="line">  vue 是一个前端框架，vue有成熟的生态链，mvvm模式，是一个真正的web框架（单页面开发）。</span><br></pre></td></tr></table></figure><h4 id="JWT和Token区别"><a href="#JWT和Token区别" class="headerlink" title="JWT和Token区别"></a>JWT和Token区别</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">token一个字符串。每次客户端保存localstore，每次请求放入到http head请求头中进行访问（Bearer），服务器查询数据库验证信息是否正确</span><br><span class="line">相同： </span><br><span class="line">都是访问资源的令牌， 都可以记录用户信息，都是只有验证成功后</span><br><span class="line">区别：</span><br><span class="line">​服务端验证客户端发来的token信息要进行数据的查询操作；</span><br><span class="line">JWT验证客户端发来的token信息就不用， 在服务端使用密钥校验就可以，不用数据库的查询。</span><br><span class="line">JWT（请求头【类型jwt+hs256算法加密】、载荷【预定义声明+自定义声明userid+签名】、签名）</span><br><span class="line">base64请求头+base64载荷+签名【(base64请求头+base64载荷)hash算法】组成两个点的字符串（secret解密）</span><br></pre></td></tr></table></figure><h4 id="shell脚本"><a href="#shell脚本" class="headerlink" title="shell脚本"></a>shell脚本</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">启动jar包</span><br><span class="line">nginx日志切割</span><br></pre></td></tr></table></figure><h4 id="Git冲突处理方案"><a href="#Git冲突处理方案" class="headerlink" title="Git冲突处理方案"></a>Git冲突处理方案</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">当Git merge无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。</span><br><span class="line">把修改的文件复制出来、先pull在修改。</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;本文主要JAVA基础面试题四&quot;&gt;&lt;a href=&quot;#本文主要JAVA基础面试题四&quot; class=&quot;headerlink&quot; title=&quot;本文主要JAVA基础面试题四&quot;&gt;&lt;/a&gt;本文主要JAVA基础面试题四&lt;/h3&gt;
    
    </summary>
    
      <category term="JAVA" scheme="http://lastsummer.top/blog/categories/JAVA/"/>
    
    
      <category term="java" scheme="http://lastsummer.top/blog/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Web相关优化</title>
    <link href="http://lastsummer.top/blog/2019/10/09/Web%E7%9B%B8%E5%85%B3%E4%BC%98%E5%8C%96/"/>
    <id>http://lastsummer.top/blog/2019/10/09/Web相关优化/</id>
    <published>2019-10-09T01:24:13.000Z</published>
    <updated>2019-10-16T07:55:20.813Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Web相关优化"><a href="#Web相关优化" class="headerlink" title="Web相关优化"></a>Web相关优化</h3><a id="more"></a><h4 id="表现层页面的优化"><a href="#表现层页面的优化" class="headerlink" title="表现层页面的优化"></a>表现层页面的优化</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">尽量使用静态HTML页面</span><br><span class="line">不使用FLASH、图片</span><br><span class="line">尽量使用DIV、不将整个页面放入TABLE中</span><br><span class="line">将javascript放入到js文件中</span><br><span class="line">使用IFrame嵌套另一个页面，和主页面分开加载，不影响页面加载速度</span><br><span class="line">CSS放在头部、JS脚本放在底部加载</span><br><span class="line">对于访问量高的页面，设计缓存方案，经常访问的数据缓存起来</span><br><span class="line">优化重要的公共模块、高度集成提示信息</span><br></pre></td></tr></table></figure><h4 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">redis分布式缓存</span><br><span class="line">ehcache、oscache缓存</span><br><span class="line">hibernate二级缓存</span><br><span class="line">前端静态js、css、样式文件缓存</span><br></pre></td></tr></table></figure><h4 id="数据库的优化"><a href="#数据库的优化" class="headerlink" title="数据库的优化"></a>数据库的优化</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">数据库的优化(读写分离、分区、分表、缓存、索引、视图、存储过程等)</span><br><span class="line">sql优化</span><br></pre></td></tr></table></figure><h4 id="服务器的优化"><a href="#服务器的优化" class="headerlink" title="服务器的优化"></a>服务器的优化</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">外部环境优化：</span><br><span class="line">（1）java虚拟机的优化、尽量采用最新的版本、设置java虚拟机的内存参数</span><br><span class="line">服务器自身的优化：</span><br><span class="line">（1）Tomcat 例如：设置线程数量、JSP编译速度、防止恶意攻击、压缩</span><br><span class="line"> 1、优化Tomcat的JVM环境内存优化</span><br><span class="line">2、优化tomcat线程池</span><br><span class="line">3、禁用DNS查询 enableLookups=&quot;false&quot;</span><br><span class="line">4、session过期时间</span><br><span class="line">5、Apr插件提高Tomcat性能</span><br><span class="line">6、压缩</span><br><span class="line">7、文字转码UTF-8</span><br><span class="line">（2）Nginx </span><br><span class="line">1、expires缓存模块、网页缓存</span><br><span class="line">2、gzip压缩模块</span><br><span class="line">3、隐藏版本号</span><br><span class="line">4、日志切割</span><br><span class="line">5、设置连接超时、进程数、配置防盗链</span><br><span class="line">6、动静分离</span><br><span class="line">7、代理http跳转https这块配置  </span><br><span class="line">8、nginx添加用户组</span><br><span class="line">9、最多可以打开文件数</span><br></pre></td></tr></table></figure><h4 id="硬件优化"><a href="#硬件优化" class="headerlink" title="硬件优化"></a>硬件优化</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">负载均衡：</span><br><span class="line">是大型网站解决高负荷访问和大量并发请求采用的最终解决办法</span><br><span class="line">与图片服务器分离：</span><br><span class="line">设置独立的图片服务器，可以降低web应用的服务器的压力，保证系统不会因为图片问题二奔溃(优化)</span><br></pre></td></tr></table></figure><h4 id="减少外部http协议"><a href="#减少外部http协议" class="headerlink" title="减少外部http协议"></a>减少外部http协议</h4><h4 id="CDN加速"><a href="#CDN加速" class="headerlink" title="CDN加速"></a>CDN加速</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CDN的全称是Content Delivery Network，即内容分发网络。其基本思路是尽可能避开互联网上有可能影响数据传输速度和稳定性的瓶颈和环节，使内容传输的更快、更稳定。</span><br><span class="line">简单的来说，就是把原服务器上数据复制到其他服务器上，用户访问时，那台服务器近访问到的就是那台服务器上的数据。CDN加速优点是成本低，速度快。适合访问量比较大的网站。</span><br></pre></td></tr></table></figure><h4 id="echarts简单优化？"><a href="#echarts简单优化？" class="headerlink" title="echarts简单优化？"></a>echarts简单优化？</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">模块复用</span><br><span class="line">缓存</span><br><span class="line">关闭动画（3D）</span><br><span class="line">SQL优化</span><br><span class="line">可选择 dataZoom</span><br><span class="line">type为line时可选择sampling</span><br><span class="line">懒加载（逐步加载）echarts模块或图片lazyload</span><br><span class="line">清理不用的图表、clear和dispose</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Web相关优化&quot;&gt;&lt;a href=&quot;#Web相关优化&quot; class=&quot;headerlink&quot; title=&quot;Web相关优化&quot;&gt;&lt;/a&gt;Web相关优化&lt;/h3&gt;
    
    </summary>
    
      <category term="WEB" scheme="http://lastsummer.top/blog/categories/WEB/"/>
    
    
      <category term="web" scheme="http://lastsummer.top/blog/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>JAVA基础面试题三</title>
    <link href="http://lastsummer.top/blog/2019/10/07/JAVA%E5%9F%BA%E7%A1%80%E9%9D%A2%E8%AF%95%E9%A2%98%E4%B8%89/"/>
    <id>http://lastsummer.top/blog/2019/10/07/JAVA基础面试题三/</id>
    <published>2019-10-07T12:53:37.000Z</published>
    <updated>2019-10-09T01:30:45.179Z</updated>
    
    <content type="html"><![CDATA[<h3 id="本文主要JAVA基础面试题三"><a href="#本文主要JAVA基础面试题三" class="headerlink" title="本文主要JAVA基础面试题三"></a>本文主要JAVA基础面试题三</h3><a id="more"></a><h4 id="JDK、JRE、JVM三者间的关系？"><a href="#JDK、JRE、JVM三者间的关系？" class="headerlink" title="JDK、JRE、JVM三者间的关系？"></a>JDK、JRE、JVM三者间的关系？</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">JDK:Java运行环境JRE、Java工具和Java基础类库。</span><br><span class="line">JRE:运行JAVA程序所必须的环境的集合，包含JVM标准实现及Java核心类库。</span><br><span class="line">JVM:整个java实现跨平台的最核心的部分，能够运行以Java语言写作的软件程序。</span><br></pre></td></tr></table></figure><h4 id="amp-和-amp-amp-的区别？"><a href="#amp-和-amp-amp-的区别？" class="headerlink" title="&amp; 和 &amp;&amp; 的区别？"></a>&amp; 和 &amp;&amp; 的区别？</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">相同点：</span><br><span class="line">&amp;和&amp;&amp;都可以用作逻辑与的运算符，表示逻辑与（and）。</span><br><span class="line">不同点：</span><br><span class="line">(1)&amp;&amp;具有短路的功能，而&amp;不具备短路功能。</span><br><span class="line">(2)当&amp;运算符两边的表达式的结果都为true时，整个运算结果才为true。而&amp;&amp;运算符第一个表达式为false时，则结果为false，不再计算第二个表达式。</span><br><span class="line">(3)&amp;还可以用作位运算符，当&amp;操作符两边的表达式不是boolean类型时，&amp;表示按位与操作，我们通常使用0x0f来与一个整数进行&amp;运算，来获取该整数的最低4个bit位，例如：0x31 &amp; 0x0f的结果为0x01。</span><br><span class="line">5 &amp; 4  4</span><br><span class="line">00000101</span><br><span class="line">00000100</span><br><span class="line">00000100</span><br></pre></td></tr></table></figure><h4 id="a-b与a-a-b的区别？"><a href="#a-b与a-a-b的区别？" class="headerlink" title="a+=b与a=a+b的区别？"></a>a+=b与a=a+b的区别？</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(1)byte、short类型的数相加、都会提升为int类型</span><br><span class="line">(2)=+赋值运算符 自动类型转换，也称隐式类型转换，是指不需要书写代码，由系统自动完成的类型转换。</span><br><span class="line">从存储范围小的类型到存储范围大的类型。</span><br><span class="line">具体规则为：</span><br><span class="line">short(char)→int→long→float→double</span><br><span class="line">+算数运算符</span><br></pre></td></tr></table></figure><h4 id="如何不使用第三个变量，交换变量a，b的值？"><a href="#如何不使用第三个变量，交换变量a，b的值？" class="headerlink" title="如何不使用第三个变量，交换变量a，b的值？"></a>如何不使用第三个变量，交换变量a，b的值？</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = a + b;</span><br><span class="line">b = a - b;</span><br><span class="line">a = a - b;</span><br><span class="line"></span><br><span class="line">a = b + (b = a)0;</span><br></pre></td></tr></table></figure><h4 id="求最大公约数？"><a href="#求最大公约数？" class="headerlink" title="求最大公约数？"></a>求最大公约数？</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//求出两个数字之间的小值</span><br><span class="line">int min = a &lt; b ? a : b;</span><br><span class="line"></span><br><span class="line">for (int i = min;i &gt;= 1;i --) &#123;</span><br><span class="line">    if (a % i == 0 &amp;&amp; b % i == 0) &#123;</span><br><span class="line">        System.out.println(&quot;最大公约数是：&quot; + i);</span><br><span class="line">        break;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="字符流和字节流的区别"><a href="#字符流和字节流的区别" class="headerlink" title="字符流和字节流的区别?"></a>字符流和字节流的区别?</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">字符流：用于处理文字和字符的 流。操作完成后不关闭流，数据无法传递。采用Unicode编码，由字符组成，1字符=2字节。</span><br><span class="line">字节流：文字以外的都可以用。操作完成后不需关闭流，也可以传递数据。采用ASCII编码,按字节处理。</span><br><span class="line">字符流有缓冲区，将数据接受于缓冲区，达到区的极限（通过手动 1.colse 2.flush）就会进入文件中，打开文件次数少。</span><br><span class="line">字节流：每传一次数据就会打开一次文件，打开数据次数多。占用内存。</span><br></pre></td></tr></table></figure><h4 id="类和对象的区别？"><a href="#类和对象的区别？" class="headerlink" title="类和对象的区别？"></a>类和对象的区别？</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">java面对对象开发。</span><br><span class="line">类是对象的抽象，而对象是类的具体实例。</span><br><span class="line">类的实例化结果就是对象。</span><br></pre></td></tr></table></figure><h4 id="drop、truncate、delete区别？"><a href="#drop、truncate、delete区别？" class="headerlink" title="drop、truncate、delete区别？"></a>drop、truncate、delete区别？</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">drop：将表所占用的空间全释放掉。</span><br><span class="line">truncate：不会触发触发器、执行速度快、初始化索引和表、不能回滚。只能对table</span><br><span class="line">delete：每次删除一行触发触发器，记入日志保存、可以添加条件、必须commit、存在缓存区、可以回退。可以是table和view。</span><br></pre></td></tr></table></figure><h4 id="JS中3种弹出窗口函数区别分析？"><a href="#JS中3种弹出窗口函数区别分析？" class="headerlink" title="JS中3种弹出窗口函数区别分析？"></a>JS中3种弹出窗口函数区别分析？</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">window.alert：只有一个显示警告框的信息,无返回值；</span><br><span class="line">window.confirm：就一个参数即提示信息，有返回值 true或false；</span><br><span class="line">window.prompt：有两个参数，第一个显示提示信息，第二个显示输入框的默认值；</span><br></pre></td></tr></table></figure><h4 id="内存溢出和内存泄漏的区别？"><a href="#内存溢出和内存泄漏的区别？" class="headerlink" title="内存溢出和内存泄漏的区别？"></a>内存溢出和内存泄漏的区别？</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">内存溢出：</span><br><span class="line">系统已经不能再分配出你所需要的空间，比如你需要100M的空间，系统只剩90M了，这就叫内存溢出。</span><br><span class="line">内存泄漏：</span><br><span class="line">意思就是你用资源的时候为他开辟了一段空间，当你用完时忘记释放资源了，这时内存还被占用着，一次没关系，但是内存泄漏次数多了就会导致内存溢出。</span><br><span class="line">(1)for缓存、while(true)代码中存在死循环或循环产生过多重复的对象实体； </span><br><span class="line">(2)使用完后没有关闭资源；</span><br><span class="line">(3)重复创建对象；</span><br><span class="line">(4)内存中加载的数据量过于庞大，如一次从数据库取出过多数据；</span><br><span class="line">(5)启动参数内存值设定的过小；</span><br><span class="line">(6)使用的第三方软件中的BUG；</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;本文主要JAVA基础面试题三&quot;&gt;&lt;a href=&quot;#本文主要JAVA基础面试题三&quot; class=&quot;headerlink&quot; title=&quot;本文主要JAVA基础面试题三&quot;&gt;&lt;/a&gt;本文主要JAVA基础面试题三&lt;/h3&gt;
    
    </summary>
    
      <category term="JAVA" scheme="http://lastsummer.top/blog/categories/JAVA/"/>
    
    
      <category term="java" scheme="http://lastsummer.top/blog/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>JAVA基础面试题二</title>
    <link href="http://lastsummer.top/blog/2019/10/07/JAVA%E5%9F%BA%E7%A1%80%E9%9D%A2%E8%AF%95%E9%A2%98%E4%BA%8C/"/>
    <id>http://lastsummer.top/blog/2019/10/07/JAVA基础面试题二/</id>
    <published>2019-10-07T01:24:39.000Z</published>
    <updated>2019-10-07T03:37:22.425Z</updated>
    
    <content type="html"><![CDATA[<h3 id="本文主要JAVA基础面试题二（二叉树）"><a href="#本文主要JAVA基础面试题二（二叉树）" class="headerlink" title="本文主要JAVA基础面试题二（二叉树）"></a>本文主要JAVA基础面试题二（二叉树）</h3><a id="more"></a><h4 id="树的介绍？"><a href="#树的介绍？" class="headerlink" title="树的介绍？"></a>树的介绍？</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(1)、每个结点有零个或多个子节点</span><br><span class="line">(2)、设有父节点的结点称为根节点</span><br><span class="line">(3)、每一个非根结点有且只有一个父节点</span><br><span class="line">(4)、除了根节点外，每个子结点可以分为多个不相交的子树</span><br></pre></td></tr></table></figure><h4 id="二叉树的介绍？"><a href="#二叉树的介绍？" class="headerlink" title="二叉树的介绍？"></a>二叉树的介绍？</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(1)、二叉树是每个结点最多有两个子树的结构</span><br><span class="line">(2)、基本形态：可以是空集、根可以有空的左右树、或者左、右树</span><br><span class="line">(3)、每一个非根结点有且只有一个父节点</span><br><span class="line">(4)、除了根节点外，每个子结点可以分为多个不相交的子树</span><br></pre></td></tr></table></figure><h4 id="二叉查找树有哪些特性？"><a href="#二叉查找树有哪些特性？" class="headerlink" title="二叉查找树有哪些特性？"></a>二叉查找树有哪些特性？</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(1)、左子树上所有的节点的值均小于或等于他的根节点的值</span><br><span class="line">(2)、右子数上所有的节点的值均大于或等于他的根节点的值</span><br><span class="line">(3)、左右子树也一定分别为二叉排序树</span><br></pre></td></tr></table></figure><h4 id="红黑树的特性？-自平衡二叉查找树-自平衡：左旋、右旋和变色"><a href="#红黑树的特性？-自平衡二叉查找树-自平衡：左旋、右旋和变色" class="headerlink" title="红黑树的特性？(自平衡二叉查找树,自平衡：左旋、右旋和变色)"></a>红黑树的特性？(自平衡二叉查找树,自平衡：左旋、右旋和变色)</h4><p>红黑树就是一种平衡的二叉查找树，说他平衡的意思是他不会变成“瘸子”，左腿特别长或者右腿特别长。<br>除了符合二叉查找树的特性之外，还具体下列的特性：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(1)、节点是红色或者黑色</span><br><span class="line">(2)、根节点是黑色</span><br><span class="line">(3)、每个叶子的节点都是黑色的空节点（NULL）</span><br><span class="line">(4)、每个红色节点的两个子节点都是黑色的。</span><br><span class="line">(5)、从任意节点到其每个叶子的所有路径都包含相同的黑色节点。</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;本文主要JAVA基础面试题二（二叉树）&quot;&gt;&lt;a href=&quot;#本文主要JAVA基础面试题二（二叉树）&quot; class=&quot;headerlink&quot; title=&quot;本文主要JAVA基础面试题二（二叉树）&quot;&gt;&lt;/a&gt;本文主要JAVA基础面试题二（二叉树）&lt;/h3&gt;
    
    </summary>
    
      <category term="JAVA" scheme="http://lastsummer.top/blog/categories/JAVA/"/>
    
    
      <category term="java" scheme="http://lastsummer.top/blog/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>JAVA基础面试题一</title>
    <link href="http://lastsummer.top/blog/2019/10/04/JAVA%E5%9F%BA%E7%A1%80%E9%9D%A2%E8%AF%95%E9%A2%98%E4%B8%80/"/>
    <id>http://lastsummer.top/blog/2019/10/04/JAVA基础面试题一/</id>
    <published>2019-10-04T00:55:44.000Z</published>
    <updated>2019-10-08T01:07:40.173Z</updated>
    
    <content type="html"><![CDATA[<h3 id="本文主要JAVA基础面试题一"><a href="#本文主要JAVA基础面试题一" class="headerlink" title="本文主要JAVA基础面试题一"></a>本文主要JAVA基础面试题一</h3><a id="more"></a><h4 id="如何跳出的多重嵌套循环？"><a href="#如何跳出的多重嵌套循环？" class="headerlink" title="如何跳出的多重嵌套循环？"></a>如何跳出的多重嵌套循环？</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">（1）在Java中，要想跳出多重循环，可以在外面的循环语句前定义一个标号</span><br><span class="line">public static void method1()&#123;</span><br><span class="line">ok:for(int i=0;i&lt;10;i++)&#123;</span><br><span class="line">for(int j=0;j&lt;10;j++)&#123;</span><br><span class="line">System.out.println(&quot;i=&quot;+i+&quot;,j=&quot;+j);</span><br><span class="line">if(j==5)&#123;</span><br><span class="line">break ok;//跳到循环外的ok出，即终止整个循环</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">（2）也可以在里层循环体的代码中使用带有标号的break语句，即可跳出外层循环</span><br><span class="line">public static void method2()&#123;</span><br><span class="line">int[][] arr = &#123;&#123;1,2,3&#125;,&#123;4,5,6,7&#125;,&#123;9&#125;&#125;;</span><br><span class="line">boolean found = false;</span><br><span class="line">for(int i=0;i&lt;arr.length &amp;&amp; !found;i++)&#123;</span><br><span class="line">for(int j=0;j&lt;arr[i].length;j++)&#123;</span><br><span class="line">System.out.println(&quot;i=&quot;+i+&quot;,j=&quot;+j);</span><br><span class="line">if(arr[i][j]==5)&#123;</span><br><span class="line">found = true;//找到5，使外层循环判断条件变为false则终止整个循环</span><br><span class="line">break;//跳出当前循环</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="静态变量和实例变量的区别？"><a href="#静态变量和实例变量的区别？" class="headerlink" title="静态变量和实例变量的区别？"></a>静态变量和实例变量的区别？</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">（1）：首先在语法定义上区别：静态变量前面要加static，实例变量不用</span><br><span class="line">（2）：在程序运行时：实例变量输入对象的属性，必须创建了实例对象（如 new）才会被分配空间，才可以使用实例变量，</span><br><span class="line">  静态变量不属于某个实例对象，而是属于类，也叫类变量，只要程序加载了类的字节码，不用创建任何实例对象就会被分配空间，就可以被使用</span><br><span class="line">（3）：总之，实例变量必须创建对象后才可以通过这个对象来使用，静态变量则可以直接使用类名来引用。</span><br></pre></td></tr></table></figure><h4 id="堆和栈的区别在什么地方？"><a href="#堆和栈的区别在什么地方？" class="headerlink" title="堆和栈的区别在什么地方？"></a>堆和栈的区别在什么地方？</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">堆（一般存放对象本身，block的copy等）</span><br><span class="line">（1）Java的堆是一个运行时数据区，类的对象从堆中分配空间。这些对象通过new等指令建立，通过垃圾回收器来销毁。</span><br><span class="line">（2）堆的优势是可以动态地分配内存空间，需要多少内存空间不必事先告诉编译器，因为它是在运行时动态分配的。但缺点是，由于需要在运行时动态分配内存，所以存取速度较慢。</span><br><span class="line">栈:后进先出（一般存储基本数据类型，对象的地址）</span><br><span class="line">（1）栈中主要存放一些基本数据类型的变量（byte，short，int，long，float，double，boolean，char）和对象的引用。</span><br><span class="line">（2）栈的优势是，存取速度比堆快，栈数据可以共享。但缺点是，存放在栈中的数据占用多少内存空间需要在编译时确定下来，缺乏灵活性。</span><br></pre></td></tr></table></figure><h4 id="类的实例化顺序"><a href="#类的实例化顺序" class="headerlink" title="类的实例化顺序?"></a>类的实例化顺序?</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">父类静态代变量</span><br><span class="line">父类静态代码块</span><br><span class="line">子类静态变量</span><br><span class="line">子类静态代码块</span><br><span class="line">父类非静态变量（父类实例成员变量）</span><br><span class="line">父类构造函数</span><br><span class="line">子类非静态变量（子类实例成员变量）</span><br><span class="line">子类构造函数</span><br></pre></td></tr></table></figure><h4 id="集合区别？"><a href="#集合区别？" class="headerlink" title="集合区别？"></a>集合区别？</h4><p><img src="/blog/2019/10/04/JAVA基础面试题一/java1.png" alt=""></p><h4 id="http-https协议？"><a href="#http-https协议？" class="headerlink" title="http,https协议？"></a>http,https协议？</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">HTTP：</span><br><span class="line">是互联网上应用最为广泛的一种网络协议，是一个客户端和服务器端请求和应答的标准（TCP），用于从WWW服务器传输超文本到本地浏览器的传输协议，它可以使浏览器更加高效，使网络传输减少。</span><br><span class="line">HTTPS：</span><br><span class="line">是以安全为目标的HTTP通道，简单讲是HTTP的安全版，即HTTP下加入SSL层，HTTPS的安全基础是SSL，因此加密的详细内容就需要SSL。</span><br><span class="line">区别：</span><br><span class="line">1、https协议需要到ca申请证书，一般免费证书较少，因而需要一定费用。</span><br><span class="line">2、http是超文本传输协议，信息是明文传输，https则是具有安全性的ssl加密传输协议。</span><br><span class="line">3、http和https使用的是完全不同的连接方式，用的端口也不一样，前者是80，后者是443。</span><br><span class="line">4、http的连接很简单，是无状态的；HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，比http协议安全。</span><br></pre></td></tr></table></figure><h4 id="常见到的runtime-exception？"><a href="#常见到的runtime-exception？" class="headerlink" title="常见到的runtime exception？"></a>常见到的runtime exception？</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">空指针：NullPointerException</span><br><span class="line">类型转换失败：ClassCastException</span><br><span class="line">文件找不到：FileNotFoundException</span><br><span class="line">数组下标越界：ArrayIndexOutOfBoundsException</span><br><span class="line">类找不到：ClassNotFoundException</span><br><span class="line">字符串转换为数字异常：NumberFormatException</span><br><span class="line">方法未找到异常：NoSuchMethodException</span><br><span class="line">字符串索引越界异常：StringIndexOutOfBoundsException</span><br></pre></td></tr></table></figure><h4 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Java的基本数据类型转换规则，大的数据类型转换为小的数据类型需要强制转换，反之可以自动转换</span><br></pre></td></tr></table></figure><h4 id="char能存贮一个中文汉字-为什么"><a href="#char能存贮一个中文汉字-为什么" class="headerlink" title="char能存贮一个中文汉字?为什么"></a>char能存贮一个中文汉字?为什么</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">char型变量是用来存储Unicode编码的字符的，unicode编码字符集中包含了汉字，所以，char型变量中当然可以存储汉字啦。不过，如果某个特殊的汉字没有被包含在unicode编码字符集中，那么，这个char型变量中就不能存储这个特殊汉字。补充说明：unicode编码占用两个字节，所以，char类型的变量也是占用两个字节。</span><br></pre></td></tr></table></figure><h4 id="abstractclass和interface区别"><a href="#abstractclass和interface区别" class="headerlink" title="abstractclass和interface区别"></a>abstractclass和interface区别</h4><p><img src="/blog/2019/10/04/JAVA基础面试题一/java2.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;本文主要JAVA基础面试题一&quot;&gt;&lt;a href=&quot;#本文主要JAVA基础面试题一&quot; class=&quot;headerlink&quot; title=&quot;本文主要JAVA基础面试题一&quot;&gt;&lt;/a&gt;本文主要JAVA基础面试题一&lt;/h3&gt;
    
    </summary>
    
      <category term="JAVA" scheme="http://lastsummer.top/blog/categories/JAVA/"/>
    
    
      <category term="java" scheme="http://lastsummer.top/blog/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Nginx日志切割</title>
    <link href="http://lastsummer.top/blog/2019/07/08/Nginx%E6%97%A5%E5%BF%97%E5%88%87%E5%89%B2/"/>
    <id>http://lastsummer.top/blog/2019/07/08/Nginx日志切割/</id>
    <published>2019-07-08T05:19:12.000Z</published>
    <updated>2019-07-08T06:24:49.478Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Nginx日志切割"><a href="#Nginx日志切割" class="headerlink" title="Nginx日志切割"></a>Nginx日志切割<a id="more"></a></h4><p>nginx版本：1.8.1<br>nginx目录：/usr/local/nginx/<br>nginx日志：/usr/local/nginx/logs<br>    acces.log    #访问量<br>    error.log    #错误日志<br>    pid.log        #NGINX进程ID</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 获取昨天的access日志</span><br><span class="line">mv access.log &apos;date +%F -d -1day&apos;_access.log</span><br><span class="line"># 重新打开日志文件</span><br><span class="line">/usr/local/nginx/sbin/nginx -s reopen</span><br></pre></td></tr></table></figure><p>完整代码<br><code>/usr/local/nginx/logs新建backup.sh命令并且vim编辑</code><br><code>/usr/local/nginx/logs/新建oldLogs文件夹</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"># 备份日志文件夹（旧的日志）</span><br><span class="line">LOGS_PATH=/usr/local/nginx/logs/oldLogs</span><br><span class="line"># 当前日志文件夹（新的日志）</span><br><span class="line">CUR_LOGS_PATH=/usr/local/nginx/logs</span><br><span class="line"># 昨天的日期</span><br><span class="line">YESTERDAY=$(date +%F -d -1day)</span><br><span class="line"># 备份access.log</span><br><span class="line">mv $CUR_LOGS_PATH/access.log $LOGS_PATH/$&#123;YESTERDAY&#125;_access.log</span><br><span class="line"># 备份error.log</span><br><span class="line">mv $CUR_LOGS_PATH/error.log $LOGS_PATH/$&#123;YESTERDAY&#125;_error.log</span><br><span class="line"># 重新打开日志文件</span><br><span class="line">kill -USR1 $(cat /usr/local/nginx/logs/nginx.pid)</span><br><span class="line"># USR1 通常被用来告知应用程序重载配置文件</span><br></pre></td></tr></table></figure></p><p>执行<code>sh backup.sh</code>即可在oldLogs下生成昨天日志（完成）</p><h4 id="定时任务自动执行shell脚本"><a href="#定时任务自动执行shell脚本" class="headerlink" title="定时任务自动执行shell脚本"></a>定时任务自动执行shell脚本</h4><p><code>crontab -e</code>    #编辑定时任务<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0 0 * * * /bin/bash /usr/local/nginx/logs/backup.sh</span><br></pre></td></tr></table></figure></p><p><code>crontab -l</code>    #查看编辑任务<br><code>0 0 * * *</code>每天执行一次生成昨天的日志</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;Nginx日志切割&quot;&gt;&lt;a href=&quot;#Nginx日志切割&quot; class=&quot;headerlink&quot; title=&quot;Nginx日志切割&quot;&gt;&lt;/a&gt;Nginx日志切割&lt;/h4&gt;
    
    </summary>
    
      <category term="Nginx" scheme="http://lastsummer.top/blog/categories/Nginx/"/>
    
    
      <category term="Nginx" scheme="http://lastsummer.top/blog/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>Nginx配置Https遇到的问题</title>
    <link href="http://lastsummer.top/blog/2019/07/06/Nginx%E9%85%8D%E7%BD%AEHttps%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://lastsummer.top/blog/2019/07/06/Nginx配置Https遇到的问题/</id>
    <published>2019-07-06T04:44:44.000Z</published>
    <updated>2019-07-06T05:50:05.424Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Nginx配置Https-开启例外443端口"><a href="#Nginx配置Https-开启例外443端口" class="headerlink" title="Nginx配置Https 开启例外443端口"></a>Nginx配置Https 开启例外443端口</h3><a id="more"></a><h4 id="Nginx如果未开启SSL模块，配置Https时提示错误"><a href="#Nginx如果未开启SSL模块，配置Https时提示错误" class="headerlink" title="Nginx如果未开启SSL模块，配置Https时提示错误"></a>Nginx如果未开启SSL模块，配置Https时提示错误</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx: [emerg] the &quot;ssl&quot; parameter requires ngx_http_ssl_module in /usr/local/nginx/conf/nginx.conf:37</span><br></pre></td></tr></table></figure><p>nginx缺少http_ssl_module模块，编译安装的时候带上–with-http_ssl_module配置就行了</p><h4 id="Nginx开启SSL模块（重新编译）"><a href="#Nginx开启SSL模块（重新编译）" class="headerlink" title="Nginx开启SSL模块（重新编译）"></a>Nginx开启SSL模块（重新编译）</h4><p>Nginx源码包<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/nginx-1.8.1</span><br></pre></td></tr></table></figure></p><p>查看Nginx已安装的模块<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/nginx/sbin/nginx -V</span><br></pre></td></tr></table></figure></p><p>重新编译安装nginx（必须停止Nginx）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># 停止Nginx</span><br><span class="line">/usr/local/nginx/sbin/nginx -s stop</span><br><span class="line"></span><br><span class="line"># 重新编译Nginx</span><br><span class="line">./configure --prefix=/usr/local/nginx --with-http_stub_status_module --with-http_ssl_module</span><br><span class="line"></span><br><span class="line"># Nginx编译(不要进行make install，否则就是覆盖安装Nginx)</span><br><span class="line">make</span><br><span class="line"></span><br><span class="line"># 然后备份原有已安装好的nginx</span><br><span class="line">cp /usr/local/nginx/sbin/nginx /usr/local/nginx/sbin/nginx.bak</span><br><span class="line"></span><br><span class="line"># 然后将刚刚编译好的nginx覆盖掉原有的nginx（这个时候nginx要停止状态）</span><br><span class="line">cp ./objs/nginx /usr/local/nginx/sbin/</span><br><span class="line"></span><br><span class="line"># 然后启动nginx，仍可以通过命令查看是否已经加入成功</span><br><span class="line">/usr/local/nginx/sbin/nginx -V</span><br></pre></td></tr></table></figure></p><p><img src="/blog/2019/07/06/Nginx配置Https遇到的问题/nginx.png" alt="nginx -V"></p><h4 id="Nginx配置Https"><a href="#Nginx配置Https" class="headerlink" title="Nginx配置Https"></a>Nginx配置Https</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  web.tset.com;# 改为绑定证书的域名</span><br><span class="line">return 301 https://$server_name$request_uri;# 重定向https</span><br><span class="line">&#125;    </span><br><span class="line">server &#123;</span><br><span class="line">    listen       443;</span><br><span class="line">    server_name  web.tset.com;# 改为绑定证书的域名</span><br><span class="line">ssl on;</span><br><span class="line"># Nginx SSL性能调优</span><br><span class="line">ssl_certificate  cert/web.tset.com.pem;# 改为自己申请得到的 crt 文件的名称(新建cert目录)</span><br><span class="line">ssl_certificate_key cert/web.tset.com.key;# 改为自己申请得到的 key 文件的名称(新建cert目录)</span><br><span class="line">ssl_session_timeout 5m;</span><br><span class="line">ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;</span><br><span class="line">ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line">ssl_prefer_server_ciphers on;</span><br><span class="line">location / &#123;</span><br><span class="line">root html;</span><br><span class="line">index  index.html index.htm;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重启Nginx<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/nginx/sbin/nginx -s reload</span><br></pre></td></tr></table></figure></p><h4 id="阿里云开启服务器443端口及80端口（https默认端口）"><a href="#阿里云开启服务器443端口及80端口（https默认端口）" class="headerlink" title="阿里云开启服务器443端口及80端口（https默认端口）"></a>阿里云开启服务器443端口及80端口（https默认端口）</h4><p>阿里云控制台=》云计算基础服务=》云服务器ECS=》网络和安全=》安全组，没有安全组的创建一个安全组，有的直接选择相应安全组，点击配置规则=》添加安全组规则（把80端口和443端口添加进安全组，授权对象填0.0.0.0/0）<br><img src="/blog/2019/07/06/Nginx配置Https遇到的问题/aliyun.png" alt="阿里云开启服务器443端口"></p><h4 id="阿里云申请SSL证书"><a href="#阿里云申请SSL证书" class="headerlink" title="阿里云申请SSL证书"></a>阿里云申请SSL证书</h4><p><a href="https://jingyan.baidu.com/article/6c67b1d6431a872787bb1ece.html" target="_blank" rel="noopener">教大家怎么申请阿里云的免费版 SSL证书</a></p><p>配置完成！！！</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Nginx配置Https-开启例外443端口&quot;&gt;&lt;a href=&quot;#Nginx配置Https-开启例外443端口&quot; class=&quot;headerlink&quot; title=&quot;Nginx配置Https 开启例外443端口&quot;&gt;&lt;/a&gt;Nginx配置Https 开启例外443端口&lt;/h3&gt;
    
    </summary>
    
      <category term="Nginx" scheme="http://lastsummer.top/blog/categories/Nginx/"/>
    
    
      <category term="Nginx" scheme="http://lastsummer.top/blog/tags/Nginx/"/>
    
      <category term="SSL" scheme="http://lastsummer.top/blog/tags/SSL/"/>
    
      <category term="HTTPS" scheme="http://lastsummer.top/blog/tags/HTTPS/"/>
    
  </entry>
  
  <entry>
    <title>Linux常用命令</title>
    <link href="http://lastsummer.top/blog/2019/06/24/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://lastsummer.top/blog/2019/06/24/Linux常用命令/</id>
    <published>2019-06-24T12:45:00.000Z</published>
    <updated>2019-06-24T13:09:48.021Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Linux常用命令"><a href="#Linux常用命令" class="headerlink" title="Linux常用命令"></a>Linux常用命令</h3><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">netstat -tunlp|grep 端口号#查看指定端口被哪个进程占用的情况</span><br><span class="line">ps -ef|grep nginx #查看进程号</span><br><span class="line">kill -9 pid #强制杀死进程</span><br><span class="line">nohup java -jar aaa.jar &gt; spring.log &amp;#后台启动jar包打印日志到spring</span><br><span class="line">tail -f spring.log #动态查看日志</span><br></pre></td></tr></table></figure><h3 id="登录mysql查看默认字符集"><a href="#登录mysql查看默认字符集" class="headerlink" title="登录mysql查看默认字符集"></a>登录mysql查看默认字符集</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show variables like &apos;%char%&apos;;</span><br></pre></td></tr></table></figure><h3 id="mysql乱码"><a href="#mysql乱码" class="headerlink" title="mysql乱码"></a>mysql乱码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/mysql/my.cnf </span><br><span class="line"></span><br><span class="line">[client]</span><br><span class="line">default-character-set=utf8</span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line">default-storage-engine=INNODB</span><br><span class="line">character-set-server=utf8</span><br><span class="line">collation-server=utf8_general_ci</span><br></pre></td></tr></table></figure><h3 id="重启msyql"><a href="#重启msyql" class="headerlink" title="重启msyql"></a>重启msyql</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service mysql restart</span><br></pre></td></tr></table></figure><h3 id="nginx命令"><a href="#nginx命令" class="headerlink" title="nginx命令"></a>nginx命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nginx -s reload#重新启动</span><br><span class="line">nginx -s stop#停止</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Linux常用命令&quot;&gt;&lt;a href=&quot;#Linux常用命令&quot; class=&quot;headerlink&quot; title=&quot;Linux常用命令&quot;&gt;&lt;/a&gt;Linux常用命令&lt;/h3&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://lastsummer.top/blog/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://lastsummer.top/blog/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Jquery data()方法</title>
    <link href="http://lastsummer.top/blog/2019/05/22/Jquery-data-%E6%96%B9%E6%B3%95/"/>
    <id>http://lastsummer.top/blog/2019/05/22/Jquery-data-方法/</id>
    <published>2019-05-22T02:01:18.000Z</published>
    <updated>2019-05-23T07:06:50.763Z</updated>
    
    <content type="html"><![CDATA[<p>jQuery.extend 与 jQuery.fn.extend 的区别在于：<br>jQuery.extend 是在 jQuery 这个构造函数上扩展的方法，调用的时候写成 $.xxx 或者 jQuery.xxx<br>jQuery.fn.extend 是在 jQuery 原型上扩展的方法，方法被所有 jQuery 对象共享，调用的时候为 $().xxx<br>$.data()可以用来设置DOM元素的data-<em>属性，也可以用来获取DOM元素的data-</em>的值<br>Jquery.data()方法作用：给普通对象或DOM元素附加（及获取） 数据。<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=&quot;http://libs.baidu.com/jquery/1.9.0/jquery.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;div id=&apos;testDiv&apos; data-test=&quot;111&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">$(&apos;#testDiv&apos;).data(&quot;test1&quot;,&quot;1111&quot;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">    存储的值为</span><br><span class="line">    &lt;span&gt;&lt;/span&gt;</span><br><span class="line">    和</span><br><span class="line">    &lt;span&gt;&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">$(function () &#123; </span><br><span class="line">    var div = $( &quot;div&quot; )[ 0 ];</span><br><span class="line">    jQuery.data( div, &quot;test2&quot;, &#123;</span><br><span class="line">        first: 16,</span><br><span class="line">        last: &quot;pizza!&quot;</span><br><span class="line">    &#125;);</span><br><span class="line">    $( &quot;span:first&quot; ).text( jQuery.data( div, &quot;test2&quot; ).first );</span><br><span class="line">    $( &quot;span:last&quot; ).text( jQuery.data( div, &quot;test2&quot; ).last );</span><br><span class="line">console.dir($( &quot;span:last&quot; ));</span><br><span class="line">&#125;)</span><br><span class="line">var obj = &#123;&#125;;</span><br><span class="line">jQuery.data(obj, &apos;name&apos;, &apos;王麻子&apos;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><p>源码解读<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">$ = function() &#123;  </span><br><span class="line">    var expando = &quot;jQuery&quot; + (&quot;1.6&quot; + Math.random()).replace(/\D/g, &apos;&apos;);  </span><br><span class="line">  </span><br><span class="line">    function getData(cache, name) &#123;  </span><br><span class="line">        return cache[name];  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    function setData(cache, name, value) &#123;  </span><br><span class="line">        cache[name] = value;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    function getCache(obj) &#123;  </span><br><span class="line">        obj[expando] = obj[expando] || &#123;&#125;;  </span><br><span class="line">        return obj[expando];  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    return &#123;  </span><br><span class="line">        data : function(obj, name, value) &#123;  </span><br><span class="line">            var cache = getCache(obj);  </span><br><span class="line">  </span><br><span class="line">            if (value === undefined) &#123;  </span><br><span class="line">                return getData(cache, name);  </span><br><span class="line">            &#125; else &#123;  </span><br><span class="line">                setData(cache, name, value);  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;();</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;jQuery.extend 与 jQuery.fn.extend 的区别在于：&lt;br&gt;jQuery.extend 是在 jQuery 这个构造函数上扩展的方法，调用的时候写成 $.xxx 或者 jQuery.xxx&lt;br&gt;jQuery.fn.extend 是在 jQuery 原型上扩展的方法，方法被所有 jQuery 对象共享，调用的时候为 $().xxx&lt;br&gt;$.data()可以用来设置DOM元素的data-&lt;em&gt;属性，也可以用来获取DOM元素的data-&lt;/em&gt;的值&lt;br&gt;Jquery.data()方法作用：给普通对象或DOM元素附加（及获取） 数据。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Jquery" scheme="http://lastsummer.top/blog/categories/Jquery/"/>
    
    
      <category term="Jquery" scheme="http://lastsummer.top/blog/tags/Jquery/"/>
    
  </entry>
  
  <entry>
    <title>java matcher中find,matches,lookingAt方法的区别</title>
    <link href="http://lastsummer.top/blog/2019/05/13/java-matcher%E4%B8%ADfind-matches-lookingAt%E6%96%B9%E6%B3%95%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://lastsummer.top/blog/2019/05/13/java-matcher中find-matches-lookingAt方法的区别/</id>
    <published>2019-05-13T02:44:21.000Z</published>
    <updated>2019-10-16T08:56:37.519Z</updated>
    
    <content type="html"><![CDATA[<p>在Matcher类中有matches、lookingAt和find都是匹配目标的方法，但容易混淆，整理它们的区别如下：</p><ul><li>matches:整个匹配，只有整个字符序列完全匹配成功，才返回True，否则返回False。但如果前部分匹配成功，将移动下次匹配的位置。</li><li>lookingAt:部分匹配，总是从第一个字符进行匹配,匹配成功了不再继续匹配，匹配失败了,也不继续匹配。</li><li>find:部分匹配，从当前位置开始匹配，找到一个匹配的子串，将移动下次匹配的位置。</li><li>reset:给当前的Matcher对象配上个新的目标，目标是就该方法的参数；如果不给参数，reset会把Matcher设到当前字符串的开始处。<a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">Pattern pattern = Pattern.compile(&quot;\\d&#123;3,5&#125;&quot;);</span><br><span class="line">String charSequence = &quot;123-34345-234-00&quot;;</span><br><span class="line">Matcher matcher = pattern.matcher(charSequence);</span><br><span class="line"></span><br><span class="line">//虽然匹配失败，由于charSequence里面的&quot;123&quot;和pattern是匹配的</span><br><span class="line">//下次的匹配从位置4开始</span><br><span class="line">print(matcher.matches());/*false*/</span><br><span class="line">//测试匹配位置</span><br><span class="line">matcher.find();</span><br><span class="line">print(matcher.start());/*4*/</span><br><span class="line"></span><br><span class="line">//使用reset方法重置匹配位置(从0开始)</span><br><span class="line">matcher.reset();</span><br><span class="line"></span><br><span class="line">//第一次find匹配以及匹配的目标和匹配的起始位置</span><br><span class="line">print(matcher.find());/*true*/</span><br><span class="line">print(matcher.group()+&quot; - &quot;+matcher.start());/*123---0*/</span><br><span class="line">//第二次find匹配以及匹配的目标和匹配的起始位置</span><br><span class="line">print(matcher.find());/*true*/</span><br><span class="line">print(matcher.group()+&quot; - &quot;+matcher.start());/*34345---4*/</span><br><span class="line"></span><br><span class="line">//第一次lookingAt匹配以及匹配的目标和匹配的起始位置</span><br><span class="line">print(matcher.lookingAt());/*true*/</span><br><span class="line">print(matcher.group()+&quot; - &quot;+matcher.start());/*123---0*/</span><br><span class="line"></span><br><span class="line">//第二次lookingAt匹配以及匹配的目标和匹配的起始位置</span><br><span class="line">print(matcher.lookingAt());/*true*/</span><br><span class="line">print(matcher.group()+&quot; - &quot;+matcher.start());/*123---0*/</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在Matcher类中有matches、lookingAt和find都是匹配目标的方法，但容易混淆，整理它们的区别如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;matches:整个匹配，只有整个字符序列完全匹配成功，才返回True，否则返回False。但如果前部分匹配成功，将移动下次匹配的位置。&lt;/li&gt;
&lt;li&gt;lookingAt:部分匹配，总是从第一个字符进行匹配,匹配成功了不再继续匹配，匹配失败了,也不继续匹配。&lt;/li&gt;
&lt;li&gt;find:部分匹配，从当前位置开始匹配，找到一个匹配的子串，将移动下次匹配的位置。&lt;/li&gt;
&lt;li&gt;reset:给当前的Matcher对象配上个新的目标，目标是就该方法的参数；如果不给参数，reset会把Matcher设到当前字符串的开始处。&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
      <category term="java" scheme="http://lastsummer.top/blog/categories/java/"/>
    
    
      <category term="matcher" scheme="http://lastsummer.top/blog/tags/matcher/"/>
    
  </entry>
  
  <entry>
    <title>Nginx+Tomcat+Redis（负载均衡+session共享+动静分离）案例</title>
    <link href="http://lastsummer.top/blog/2019/04/29/Nginx-Tomcat-Redis%EF%BC%88%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1-session%E5%85%B1%E4%BA%AB-%E5%8A%A8%E9%9D%99%E5%88%86%E7%A6%BB%EF%BC%89%E6%A1%88%E4%BE%8B/"/>
    <id>http://lastsummer.top/blog/2019/04/29/Nginx-Tomcat-Redis（负载均衡-session共享-动静分离）案例/</id>
    <published>2019-04-29T06:30:08.000Z</published>
    <updated>2019-04-29T07:29:27.171Z</updated>
    
    <content type="html"><![CDATA[<p>今天整合了一些资源，做了一个Nginx+Tomcat+Redis（负载均衡+session共享+动静分离）完整案例，使部署的web项目能够承载较大的访问压力，Nginx实现负载均衡及动静分离，并使用Redis实现session共享。<br><a id="more"></a><br><img src="/blog/2019/04/29/Nginx-Tomcat-Redis（负载均衡-session共享-动静分离）案例/nginx1.png" alt="各版本如图所示"></p><h4 id="警告注意"><a href="#警告注意" class="headerlink" title="警告注意"></a>警告注意</h4><p>redis实现session共享，需要三个jar包（如果报错就是版本不符合，放入tomcat文件夹下的lib中）<br>tomcat-redis-session-manager1.2.jar<br>commons-pool2-2.4.1.jar<br>jedis-2.6.2.jar</p><h4 id="完整步骤"><a href="#完整步骤" class="headerlink" title="完整步骤"></a>完整步骤</h4><h5 id="Tomcat集群"><a href="#Tomcat集群" class="headerlink" title="Tomcat集群"></a>Tomcat集群</h5><p>复制多个tomcat文件，修改server.xml，修改其中的8005、8080、8009端口号（nginx和tomcat解压路径最好再同一目录D:/User/nginxTest）<br>在多个tomcat的webapps下新建nginx文件夹，在nginx下新建index.jsp(多个jsp修改<code>&lt;h2&gt;Nginx动静分离2&lt;/h2&gt;</code>)，代码如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=utf-8&quot; pageEncoding=&quot;utf-8&quot;%&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;link href=&quot;/nginx/css/index.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot; /&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;/nginx/js/index.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h2&gt;Nginx动静分离&lt;/h2&gt;</span><br><span class="line">&lt;% </span><br><span class="line">  out.println(&quot;[&quot;+request.getLocalAddr()+&quot;:&quot; +request.getLocalPort()+&quot;]&quot; + &quot;&lt;br/&gt;session id:&quot; + session.getId());  </span><br><span class="line">%&gt;</span><br><span class="line">&lt;!--当前的css、js、图片均来自nginx的静态文件--&gt;</span><br><span class="line">&lt;br/&gt;</span><br><span class="line">&lt;img alt=&quot;图片&quot; src=&quot;/nginx/img/1.png&quot; style=&quot;width:300px;height:300px&quot;&gt;</span><br><span class="line">&lt;br&gt;</span><br><span class="line">&lt;%</span><br><span class="line">  HttpSession mySession = request.getSession(false);</span><br><span class="line">  if(mySession.getAttribute(&quot;appname&quot;) == null)&#123;</span><br><span class="line">  mySession = request.getSession(true);</span><br><span class="line">  mySession.setAttribute(&quot;appname&quot;, &quot;AAA111&quot;);</span><br><span class="line">  out.println(&quot;new session:&quot;+mySession.getAttribute(&quot;appname&quot;));</span><br><span class="line">  &#125;else&#123;</span><br><span class="line">    out.println(&quot;old session:&quot;+mySession.getAttribute(&quot;appname&quot;));</span><br><span class="line">  &#125;</span><br><span class="line">%&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><h5 id="动静分离的-Nginx-配置"><a href="#动静分离的-Nginx-配置" class="headerlink" title="动静分离的 Nginx 配置"></a>动静分离的 Nginx 配置</h5><p>安装Nginx：<br>我使用的Nginx为绿色版本，双击即可开启（安装路径 D:/User/nginxTest/nginx）<br><img src="/blog/2019/04/29/Nginx-Tomcat-Redis（负载均衡-session共享-动静分离）案例/nginx2.png" alt="nginx目录结构"><br>修改 conf nginx.conf 配置文件，多个Tomcat服务器都是在这里配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">upstream test &#123;</span><br><span class="line">server 127.0.0.1:8080 weight=2;</span><br><span class="line">server 127.0.0.1:8081 weight=1;</span><br><span class="line">#配置多个tomcat，负载均衡</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">  listen       80;</span><br><span class="line">server_namelocalhost;</span><br><span class="line"></span><br><span class="line">  #charset koi8-r;</span><br><span class="line"></span><br><span class="line">  #access_log  logs/host.access.log  main;</span><br><span class="line"></span><br><span class="line">location / &#123;</span><br><span class="line">    index  index.html index.htm;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"># 所有动态请求都转发给tomcat处理 </span><br><span class="line">location ~ \.(jsp|do)$ &#123; </span><br><span class="line">proxy_next_upstream http_502 http_504 error timeout invalid_header;</span><br><span class="line">proxy_pass http://test;</span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line">#静态文件交给nginx处理</span><br><span class="line">location ~ .*\.(htm|html|gif|jpg|jpeg|png|bmp|swf|ioc|rar|zip|txt|flv|mid|doc|ppt|pdf|xls|mp3|wma)$</span><br><span class="line">&#123;</span><br><span class="line"># 绝对路径</span><br><span class="line">root  D:/User/nginxTest/nginx/webapps;</span><br><span class="line">&#125;</span><br><span class="line">#静态文件交给nginx处理</span><br><span class="line">location ~ .*\.(js|css)?$</span><br><span class="line">&#123;</span><br><span class="line"># 绝对路径</span><br><span class="line">root D:/User/nginxTest/nginx/webapps;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>由于静态文件都在<code>D:/User/nginxTest/nginx/webapps</code>中，在nginx文件夹下新建webapps，继续新建jsp中的路径<code>/nginx/img/1.png</code>、<code>/nginx/css/index.css</code>、<code>/nginx/js/index.js</code><br>现在动静分离和负载均衡就配置成功了，下面开始redis共享session<br>把前文提到的三个包加入到所有tomcat的lib中。<br>修改tomcat的conf中的context.xml，添加代码如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;Valve className=&quot;com.orangefunction.tomcat.redissessions.RedisSessionHandlerValve&quot; /&gt;  </span><br><span class="line">   &lt;Manager className=&quot;com.orangefunction.tomcat.redissessions.RedisSessionManager&quot;  </span><br><span class="line">        host=&quot;localhost&quot;   </span><br><span class="line">        port=&quot;6379&quot;</span><br><span class="line">        password=&quot;admin&quot;&lt;!--redis密码，需要修改redis.window.conf文件--》</span><br><span class="line">        database=&quot;0&quot;</span><br><span class="line">        maxInactiveInterval=&quot;60&quot; /&gt;</span><br></pre></td></tr></table></figure></p><h5 id="redis共享session"><a href="#redis共享session" class="headerlink" title="redis共享session"></a>redis共享session</h5><p>安装redis：<br>我使用的redis为绿色版本，双击即可开启（安装路径 D:/User/nginxTest/redis）<br><img src="/blog/2019/04/29/Nginx-Tomcat-Redis（负载均衡-session共享-动静分离）案例/redis1.png" alt="redis目录结构"><br>修改redis.windows.conf文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># requirepass foobared redis密码</span><br><span class="line">requirepass admin</span><br></pre></td></tr></table></figure></p><p>启动redis，<code>redis-server.exe redis.windows.conf</code><br>大功告成！<br>session默认时间是30秒，可修改tomcat下的web.xml，根据实际情况调整<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;session-config&gt;</span><br><span class="line">  &lt;session-timeout&gt;60&lt;/session-timeout&gt;&lt;!--默认是30秒--&gt;</span><br><span class="line">&lt;/session-config&gt;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天整合了一些资源，做了一个Nginx+Tomcat+Redis（负载均衡+session共享+动静分离）完整案例，使部署的web项目能够承载较大的访问压力，Nginx实现负载均衡及动静分离，并使用Redis实现session共享。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="http://lastsummer.top/blog/categories/java/"/>
    
    
      <category term="Nginx" scheme="http://lastsummer.top/blog/tags/Nginx/"/>
    
      <category term="Tomcat" scheme="http://lastsummer.top/blog/tags/Tomcat/"/>
    
      <category term="Redis" scheme="http://lastsummer.top/blog/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>Hexo+Github实现相册功能</title>
    <link href="http://lastsummer.top/blog/2019/04/26/Hexo-Github%E5%AE%9E%E7%8E%B0%E7%9B%B8%E5%86%8C%E5%8A%9F%E8%83%BD/"/>
    <id>http://lastsummer.top/blog/2019/04/26/Hexo-Github实现相册功能/</id>
    <published>2019-04-26T01:22:12.000Z</published>
    <updated>2019-04-26T06:01:39.602Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Hexo-Github-Python实现相册功能"><a href="#Hexo-Github-Python实现相册功能" class="headerlink" title="Hexo+Github+Python实现相册功能"></a>Hexo+Github+Python实现相册功能</h3><p>最终效果请看这里    <a href="https://lastsummer.top/blog/photos/">https://lastsummer.top/blog/photos/</a><br>我使用的主题是<code>hexo-theme-shana-master</code>,该主题没有集成相册功能，自己上网查了些资料,摸索摸索,终于搭建好了。<a id="more"></a></p><h3 id="实现方案"><a href="#实现方案" class="headerlink" title="实现方案"></a>实现方案</h3><p>在github上新建一个仓库，主要用于存储图片，可以通过url访问到，也方便管理（后期可以在七牛云上进行图片储存）<br>将要放到相册的图片处理成json格式的数据，然后进行访问，这里json的格式需要配合要使用的样式，所以需要处理成特定格式的json数据，下面会给出图片裁剪，因为相册显示的样式最好是正方形的的图片，这里使用脚本处理一下图片压缩，相册显示的图片是压缩后的图片，提高加载的速度，打开后的图片是原图。</p><h4 id="新建一个仓库存储图片"><a href="#新建一个仓库存储图片" class="headerlink" title="新建一个仓库存储图片"></a>新建一个仓库存储图片</h4><p>源码下载地址<code>https://github.com/wangrui15034005712/Blog-Back-Up</code><br>建立一个用于存储相册的仓库，我这里建立了名为Blog-Back-Up的仓库（和博客地址同一目录）<br><b>重点</b> 修改Blog-Back-Up中blog_photos_copy的ins.js文件，主要是里面的render函数，修改成自己的Github图片路径,这个链接很多人输入错了，不是直接的图片url，是github需要点“download”才能看到的url。<br><img src="/blog/2019/04/26/Hexo-Github实现相册功能/photo.png" alt="download文件"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var minSrc = &apos;https://raw.githubusercontent.com/wangrui15034005712/Blog-Back-Up/master/min_photos/&apos; + data.link[i];</span><br><span class="line">var src = &apos;https://raw.githubusercontent.com/wangrui15034005712/Blog-Back-Up/master/photos/&apos; + data.link[i];</span><br></pre></td></tr></table></figure></p><p><img src="/blog/2019/04/26/Hexo-Github实现相册功能/photo1.png" alt="修改ins.js文件"><br><b>重点</b> 修改Blog-Back-Up中tool.py文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 把json文件发布到自己的博客中</span><br><span class="line">with open(&quot;../Hexo/source/photos/data.json&quot;,&quot;w&quot;) as fp:</span><br><span class="line">        json.dump(final_dict, fp)</span><br><span class="line"># 我设置的是本地博客路径如 D:\User\Hexo\source\photos\data.json</span><br><span class="line"># 把下载的博客Blog-Back-Up上传至自己新创建的仓库</span><br><span class="line"># 把自己的相册图片放入到Blog-Back-Up的photos中</span><br><span class="line"># DOS命令执行 Python tool.py 命令压缩图片到min_photos及json并且发布到Github</span><br><span class="line"># 如果报错自行百度python等问题（缺少模块、版本不对）</span><br></pre></td></tr></table></figure></p><h4 id="修改Hexo博客"><a href="#修改Hexo博客" class="headerlink" title="修改Hexo博客"></a>修改Hexo博客</h4><p>在Hexo目录中打开DOS命令创建新的相册菜单<code>hexo new page &quot;photos&quot;</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page &quot;photos&quot;</span><br></pre></td></tr></table></figure></p><p>之后，去下载“empty.png” <a href="https://raw.githubusercontent.com/wangrui15034005712/blog/master/assets/img/empty.png" target="_blank" rel="noopener">点击这里，右键保存下载</a><br>在Hexo本地仓库source下新建一个文件夹命名为assets,再在assets下新建一个文件夹命名为img。最后把empty.png放到img里面。<br>把之前clone下来的Blog-Back-Up下blog_photos_copy的所有文件copy到Hexo本地仓库source中的photo文件夹下<br>如无法显示，可能是图片路径，网络传输较慢，js、css样式待优化，小编自己的样式是经过调整的。<br>有问题可以在下方评论区评论。<br>个人博客：<a href="https://lastsummer.top">去年夏天</a><br>参考博客：<a href="https://blog.csdn.net/wardseptember/article/details/82780684" target="_blank" rel="noopener">hexo+yilia完美实现相册功能</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Hexo-Github-Python实现相册功能&quot;&gt;&lt;a href=&quot;#Hexo-Github-Python实现相册功能&quot; class=&quot;headerlink&quot; title=&quot;Hexo+Github+Python实现相册功能&quot;&gt;&lt;/a&gt;Hexo+Github+Python实现相册功能&lt;/h3&gt;&lt;p&gt;最终效果请看这里    &lt;a href=&quot;https://lastsummer.top/blog/photos/&quot;&gt;https://lastsummer.top/blog/photos/&lt;/a&gt;&lt;br&gt;我使用的主题是&lt;code&gt;hexo-theme-shana-master&lt;/code&gt;,该主题没有集成相册功能，自己上网查了些资料,摸索摸索,终于搭建好了。&lt;/p&gt;
    
    </summary>
    
      <category term="hexo" scheme="http://lastsummer.top/blog/categories/hexo/"/>
    
    
      <category term="Github" scheme="http://lastsummer.top/blog/tags/Github/"/>
    
      <category term="Hexo" scheme="http://lastsummer.top/blog/tags/Hexo/"/>
    
      <category term="Python" scheme="http://lastsummer.top/blog/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>RabbitMq入门及六种模式讲解</title>
    <link href="http://lastsummer.top/blog/2019/04/23/RabbitMq%E5%85%A5%E9%97%A8%E5%8F%8A%E5%85%AD%E7%A7%8D%E6%A8%A1%E5%BC%8F%E8%AE%B2%E8%A7%A3/"/>
    <id>http://lastsummer.top/blog/2019/04/23/RabbitMq入门及六种模式讲解/</id>
    <published>2019-04-23T08:25:52.000Z</published>
    <updated>2019-04-28T02:09:08.067Z</updated>
    
    <content type="html"><![CDATA[<h3 id="RabbitMQ-术语说明："><a href="#RabbitMQ-术语说明：" class="headerlink" title="RabbitMQ 术语说明："></a>RabbitMQ 术语说明：</h3><p>Server(Broker):接收客户端连接，实现AMQP协议的消息队列和路由功能的进程；<br>Virtual Host：虚拟主机的概念，类似权限控制组，一个Virtual Host里可以有多个Exchange和Queue,权限控制的最小丽都是Virtual Host；<br>Exchange:交换机，接收生产者发送的消息，并根据Routing Key将消息路由到服务器中的队列Queue。<br>ExchangeType:交换机类型决定了路由消息行为，RabbitMQ中有三种类型Exchange，分别是fanout、direct、topic；<br>Message Queue：消息队列，用于存储还未被消费者消费的消息；<br>Message：由Header和body组成，Header是由生产者添加的各种属性的集合，包括Message是否被持久化、优先级是多少、由哪个Message Queue接收等；body是真正需要发送的数据内容；<br>BindingKey：绑定关键字，将一个特定的Exchange和一个特定的Queue绑定起来。<br><a id="more"></a></p><h3 id="RabbitMQ-五种队列模式与-SpringBoot-实例"><a href="#RabbitMQ-五种队列模式与-SpringBoot-实例" class="headerlink" title="RabbitMQ 五种队列模式与(SpringBoot)实例"></a>RabbitMQ 五种队列模式与(SpringBoot)实例</h3><h5 id="在pom-xml中添加相关依赖"><a href="#在pom-xml中添加相关依赖" class="headerlink" title="在pom.xml中添加相关依赖"></a>在pom.xml中添加相关依赖</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--消息队列模块--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;spring-boot-starter-amqp&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h5 id="修改application-properties"><a href="#修改application-properties" class="headerlink" title="修改application.properties"></a>修改application.properties</h5><p>在application.properties添加rabbitmq的相关信息（默认账号密码guest）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">spring.rabbitmq.host=127.0.0.1</span><br><span class="line">spring.rabbitmq.port=5672</span><br><span class="line">spring.rabbitmq.username=guest</span><br><span class="line">spring.rabbitmq.password=guest</span><br></pre></td></tr></table></figure></p><h4 id="简单模式-Hello-World-工作模式"><a href="#简单模式-Hello-World-工作模式" class="headerlink" title="简单模式 Hello World + 工作模式"></a>简单模式 Hello World + 工作模式</h4><p>简单模式：一个生产者P发送消息到队列hello,一个消费者C接收</p><h5 id="一对一的使用配置"><a href="#一对一的使用配置" class="headerlink" title="一对一的使用配置"></a>一对一的使用配置</h5><p>一对一，一个发送者发送消息，一个接受者接受消息。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">package com.example.springboot.test1;</span><br><span class="line"></span><br><span class="line">import org.springframework.amqp.core.Queue;</span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @Author: wangrui</span><br><span class="line"> * @Description: 队列配置，队列的名称，发送者和接受者的名称必须一致，否则接收不到消息</span><br><span class="line"> * @Date: 2019/4/26 16：54</span><br><span class="line"> */</span><br><span class="line">@Configuration</span><br><span class="line">public class RabbitMqConfig &#123;</span><br><span class="line"></span><br><span class="line">  public Queue Queue1() &#123;</span><br><span class="line">    return new Queue(&quot;lyhTest1&quot;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">package com.example.springboot.test1;</span><br><span class="line"></span><br><span class="line">import org.springframework.amqp.core.AmqpTemplate;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line">import java.util.Date;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @Author: wangrui</span><br><span class="line"> * @Description: 发送者通过Controller类发送消息：</span><br><span class="line"> * @Date: 2019/4/26 16：54</span><br><span class="line"> */</span><br><span class="line">@RestController</span><br><span class="line">public class SendController &#123;</span><br><span class="line"></span><br><span class="line">  @Autowired</span><br><span class="line">  private AmqpTemplate amqpTemplate;</span><br><span class="line"></span><br><span class="line">  //一对一</span><br><span class="line">  @RequestMapping(&quot;/send&quot;)</span><br><span class="line">  public String send()&#123;</span><br><span class="line">    String content=&quot;Date:&quot;+new Date();</span><br><span class="line">    amqpTemplate.convertAndSend(&quot;lyhTest1&quot;,content);</span><br><span class="line">    return content;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">package com.example.springboot.test1;</span><br><span class="line"></span><br><span class="line">import org.springframework.amqp.rabbit.annotation.RabbitHandler;</span><br><span class="line">import org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @Author: wangrui</span><br><span class="line"> * @Description: 接收者Receiver1类接收信息</span><br><span class="line"> * @Date: 2019/4/26 16：54</span><br><span class="line"> */</span><br><span class="line">@Component</span><br><span class="line">@RabbitListener(queues = &quot;lyhTest1&quot;)</span><br><span class="line">public class Receiver1 &#123;</span><br><span class="line"></span><br><span class="line">  @RabbitHandler</span><br><span class="line">  public void receiver(String msg)&#123;</span><br><span class="line">    System.out.println(&quot;Test1 receiver1:&quot;+msg);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：浏览器访问地址：<a href="http://localhost:8080/send" target="_blank" rel="noopener">http://localhost:8080/send</a><br>终端输出Receiver1接收的内容<br>查看RabbitMQ的Web客户端<a href="http://localhost:15672" target="_blank" rel="noopener">http://localhost:15672</a> 可以在列表里看到之前创建的队列。</p><h5 id="一对多的使用配置"><a href="#一对多的使用配置" class="headerlink" title="一对多的使用配置"></a>一对多的使用配置</h5><p>一对多，一个发送者发送消息，多个接受者接受同一个消息，添加新的接收者Receiver2。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">package com.example.springboot.test1;</span><br><span class="line"></span><br><span class="line">import org.springframework.amqp.rabbit.annotation.RabbitHandler;</span><br><span class="line">import org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line">@Component</span><br><span class="line">@RabbitListener(queues = &quot;lyhTest1&quot;)</span><br><span class="line">//这里的lyhTest2是多对多，如果要测试一对多改成lyhTest1</span><br><span class="line">public class Receiver2 &#123;</span><br><span class="line"></span><br><span class="line">    @RabbitHandler</span><br><span class="line">    public void receiver(String msg)&#123;</span><br><span class="line">        System.out.println(&quot;Test1 receiver2:&quot;+msg);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在SendController添加一对多发送方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//可以看到发送者发送一个消息被多个接收者接收，注意这里的消息只能被消费一次（一对多）</span><br><span class="line">@RequestMapping(&quot;/multiSend&quot;)</span><br><span class="line">public String multiSend()&#123;</span><br><span class="line">  StringBuilder times=new StringBuilder();</span><br><span class="line">  for(int i=0;i&lt;10;i++)&#123;</span><br><span class="line">    long time=System.nanoTime();</span><br><span class="line">    amqpTemplate.convertAndSend(&quot;lyhTest1&quot;,&quot;第&quot;+i+&quot;次发送的时间：&quot;+time);</span><br><span class="line">    times.append(time+&quot;&lt;br&gt;&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">  return times.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>测试，浏览器访问<a href="http://localhost:8080/multiSend" target="_blank" rel="noopener">http://localhost:8080/multiSend</a></p><h5 id="多对多的使用配置"><a href="#多对多的使用配置" class="headerlink" title="多对多的使用配置"></a>多对多的使用配置</h5><p>在配置类RabbbitMqConfig添加新的队列名lyhTest2<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">public class RabbitMqConfig &#123;</span><br><span class="line"></span><br><span class="line">@Bean</span><br><span class="line">public Queue Queue1() &#123;</span><br><span class="line">  return new Queue(&quot;lyhTest1&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Bean</span><br><span class="line">public Queue Queue2() &#123;</span><br><span class="line">  return new Queue(&quot;lyhTest2&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>修改Receiver2接收队列名为lyhTest2<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@Component</span><br><span class="line">@RabbitListener(queues = &quot;lyhTest2&quot;)</span><br><span class="line">//这里的lyhTest2是多对多，如果要测试一对多改成lyhTest1</span><br><span class="line">public class Receiver2 &#123;</span><br><span class="line"></span><br><span class="line">@RabbitHandler</span><br><span class="line">public void receiver(String msg)&#123;</span><br><span class="line">  System.out.println(&quot;Test1 receiver2:&quot;+msg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在SendController添加多对多发送消息的方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@RequestMapping(&quot;/multi2MultiSend&quot;)</span><br><span class="line">public String mutil2MutilSend()&#123;</span><br><span class="line">StringBuilder times=new StringBuilder();</span><br><span class="line">for(int i=0;i&lt;10;i++)&#123;</span><br><span class="line">  long time=System.nanoTime();</span><br><span class="line">  amqpTemplate.convertAndSend(&quot;lyhTest1&quot;,&quot;第&quot;+i+&quot;次发送的时间：&quot;+time);</span><br><span class="line">  amqpTemplate.convertAndSend(&quot;lyhTest2&quot;,&quot;第&quot;+i+&quot;次发送的时间：&quot;+time);</span><br><span class="line">  times.append(time+&quot;&lt;br&gt;&quot;);</span><br><span class="line">&#125;</span><br><span class="line">return times.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>测试，浏览器访问：<a href="http://localhost:8080/multi2MultiSend" target="_blank" rel="noopener">http://localhost:8080/multi2MultiSend</a></p><h4 id="Topic-Exchange（自定义程度较高-通配符）"><a href="#Topic-Exchange（自定义程度较高-通配符）" class="headerlink" title="Topic Exchange（自定义程度较高 通配符）"></a>Topic Exchange（自定义程度较高 通配符）</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">package com.example.springboot.test2;</span><br><span class="line"></span><br><span class="line">  import org.springframework.amqp.core.Binding;</span><br><span class="line">  import org.springframework.amqp.core.BindingBuilder;</span><br><span class="line">  import org.springframework.amqp.core.Queue;</span><br><span class="line">  import org.springframework.amqp.core.TopicExchange;</span><br><span class="line">  import org.springframework.context.annotation.Bean;</span><br><span class="line">  import org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @Author:wangrui</span><br><span class="line"> * @Description:Topic Exchange配置类</span><br><span class="line"> * @Date:2019/4/18 9:32</span><br><span class="line"> */</span><br><span class="line">@Configuration</span><br><span class="line">public class RabbitMqTopicConfig &#123;</span><br><span class="line"></span><br><span class="line">  //只接一个topic</span><br><span class="line">  final static String message = &quot;topic.message&quot;;</span><br><span class="line">  //接收多个topic</span><br><span class="line">  final static String messages = &quot;topic.messages&quot;;</span><br><span class="line"></span><br><span class="line">  @Bean</span><br><span class="line">  public Queue queueMessage() &#123;</span><br><span class="line">    return new Queue(RabbitMqTopicConfig.message);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @Bean</span><br><span class="line">  public Queue queueMessages() &#123;</span><br><span class="line">    return new Queue(RabbitMqTopicConfig.messages);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @Bean</span><br><span class="line">  TopicExchange exchange() &#123;</span><br><span class="line">    return new TopicExchange(&quot;exchange&quot;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @Bean</span><br><span class="line">  Binding bindingExchangeMessage(Queue queueMessage, TopicExchange exchange) &#123;</span><br><span class="line">    return BindingBuilder.bind(queueMessage).to(exchange).with(&quot;topic.message&quot;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @Bean</span><br><span class="line">  Binding bindingExchangeMessages(Queue queueMessages, TopicExchange exchange) &#123;</span><br><span class="line">    //这里的#表示零个或多个词。</span><br><span class="line">    return BindingBuilder.bind(queueMessages).to(exchange).with(&quot;topic.#&quot;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">package com.example.springboot.test2;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import org.springframework.amqp.rabbit.annotation.RabbitHandler;</span><br><span class="line">import org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line">@Component</span><br><span class="line">@RabbitListener(queues = &quot;topic.message&quot;)</span><br><span class="line">public class TopicReceiver1 &#123;</span><br><span class="line"></span><br><span class="line">  @RabbitHandler</span><br><span class="line">  public void process(String msg) &#123;</span><br><span class="line">    System.out.println(&quot;TopicReceiver1:&quot; + msg);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">package com.example.springboot.test2;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import org.springframework.amqp.rabbit.annotation.RabbitHandler;</span><br><span class="line">import org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line">@Component</span><br><span class="line">@RabbitListener(queues = &quot;topic.messages&quot;)</span><br><span class="line">public class TopicReceiver2 &#123;</span><br><span class="line"></span><br><span class="line">  @RabbitHandler</span><br><span class="line">  public void process(String msg) &#123;</span><br><span class="line">    System.out.println(&quot;TopicReceiver2 :&quot; + msg);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">package com.example.springboot.test2;</span><br><span class="line"></span><br><span class="line">import org.springframework.amqp.core.AmqpTemplate;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line">@RestController</span><br><span class="line">public class SendController1 &#123;</span><br><span class="line"></span><br><span class="line">  @Autowired</span><br><span class="line">  private AmqpTemplate amqpTemplate;</span><br><span class="line"></span><br><span class="line">  @RequestMapping(&quot;/topicSend1&quot;)</span><br><span class="line">  public String  topicSend1() &#123;</span><br><span class="line">    String context = &quot;my topic 1&quot;;</span><br><span class="line">    System.out.println(&quot;发送者说 : &quot; + context);</span><br><span class="line">    this.amqpTemplate.convertAndSend(&quot;exchange&quot;, &quot;topic.message&quot;, context);</span><br><span class="line">    return context;</span><br><span class="line">  &#125;</span><br><span class="line">  @RequestMapping(&quot;/topicSend2&quot;)</span><br><span class="line">  public String topicSend2() &#123;</span><br><span class="line">    String context = &quot;my topic 2&quot;;</span><br><span class="line">    System.out.println(&quot;发送者说 : &quot; + context);</span><br><span class="line">    this.amqpTemplate.convertAndSend(&quot;exchange&quot;, &quot;topic.messages&quot;, context);</span><br><span class="line">    return  context;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试，浏览器访问：<a href="http://localhost:8080/topicSend1" target="_blank" rel="noopener">http://localhost:8080/topicSend1</a> 输出两个消费者<br>测试，浏览器访问：<a href="http://localhost:8080/topicSend2" target="_blank" rel="noopener">http://localhost:8080/topicSend2</a> 输出一个消费者</p><h4 id="Fanout-广播模式，发布订阅"><a href="#Fanout-广播模式，发布订阅" class="headerlink" title="Fanout 广播模式，发布订阅"></a>Fanout 广播模式，发布订阅</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">package com.example.springboot.test3;</span><br><span class="line"></span><br><span class="line">import org.springframework.amqp.core.Binding;</span><br><span class="line">import org.springframework.amqp.core.BindingBuilder;</span><br><span class="line">import org.springframework.amqp.core.FanoutExchange;</span><br><span class="line">import org.springframework.amqp.core.Queue;</span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @Author:wangrui</span><br><span class="line"> * @Description:队列配置，队列的名称，发送者和接受者的名称必须一致，否则接收不到消息</span><br><span class="line"> * @Date:2019/4/28 9:36</span><br><span class="line"> */</span><br><span class="line">@Configuration</span><br><span class="line">public class RabbitMqFanoutConfig &#123;</span><br><span class="line">    private static String EXCHANGE_NAME = &quot;hello111&quot;;</span><br><span class="line"></span><br><span class="line">  //声明两个队列</span><br><span class="line">  @Bean</span><br><span class="line">  public Queue queue() &#123;</span><br><span class="line">    return new Queue(&quot;hello&quot;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @Bean</span><br><span class="line">  public Queue queue1() &#123;</span><br><span class="line">    return new Queue(&quot;hello1&quot;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  //声明一个fanout的交换机</span><br><span class="line">  @Bean</span><br><span class="line">  public FanoutExchange fanoutExchange() &#123;</span><br><span class="line">    return new FanoutExchange(EXCHANGE_NAME);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  //将队列和交互机进行绑定</span><br><span class="line">  @Bean</span><br><span class="line">  public Binding bindfanout(Queue queue, FanoutExchange fanoutExchange) &#123;</span><br><span class="line">    return BindingBuilder.bind(queue).to(fanoutExchange);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @Bean</span><br><span class="line">  public Binding bindfanout1(Queue queue1, FanoutExchange fanoutExchange) &#123;</span><br><span class="line">    return BindingBuilder.bind(queue1).to(fanoutExchange);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">package com.example.springboot.test3;</span><br><span class="line"></span><br><span class="line">import org.springframework.amqp.rabbit.annotation.RabbitHandler;</span><br><span class="line">import org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line">import org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line">@Service</span><br><span class="line">@RabbitListener(queues = &quot;hello&quot;) //这个队列就是我们之前定义的队列名称，监听hello队列的消息</span><br><span class="line">public class FanoutReceiver1 &#123;</span><br><span class="line"></span><br><span class="line">  @RabbitHandler</span><br><span class="line">  public void receive(String message) throws InterruptedException &#123;</span><br><span class="line">    System.err.println(&quot;1:收到消息&quot; + message);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">package com.example.springboot.test3;</span><br><span class="line"></span><br><span class="line">import org.springframework.amqp.rabbit.annotation.RabbitHandler;</span><br><span class="line">import org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line">import org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line">@Service</span><br><span class="line">@RabbitListener(queues=&quot;hello1&quot;) //这个队列就是我们之前定义的队列名称，监听hello队列的消息</span><br><span class="line">public class FanoutReceiver2 &#123;</span><br><span class="line"></span><br><span class="line">  @RabbitHandler</span><br><span class="line">  public void receive(String message) throws InterruptedException&#123;</span><br><span class="line">    System.err.println(&quot;2收到消息:&quot;+message);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">package com.example.springboot.test3;</span><br><span class="line"></span><br><span class="line">import org.springframework.amqp.core.AmqpTemplate;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line">@RestController</span><br><span class="line">public class SendController2 &#123;</span><br><span class="line"></span><br><span class="line">  private static String EXCHANGE_NAME = &quot;hello111&quot;;</span><br><span class="line"></span><br><span class="line">  @Autowired</span><br><span class="line">  private AmqpTemplate amqpTemplate;</span><br><span class="line"></span><br><span class="line">  @RequestMapping(value = &quot;testFanout&quot;)</span><br><span class="line">  public void test() throws InterruptedException &#123;</span><br><span class="line">    for (int i = 0; i &lt; 10; i++) &#123;</span><br><span class="line">        Thread.sleep(i * 20);</span><br><span class="line">        amqpTemplate.convertAndSend(EXCHANGE_NAME, &quot;fanout&quot;, &quot;hello word&quot; + i);</span><br><span class="line">    &#125;</span><br><span class="line">    System.err.println(&quot;消息发送成功&quot;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试，浏览器访问：<a href="http://localhost:8080/testFanout" target="_blank" rel="noopener">http://localhost:8080/testFanout</a></p><h4 id="Direct-路由模式"><a href="#Direct-路由模式" class="headerlink" title="Direct 路由模式"></a>Direct 路由模式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">package com.example.springboot.test4;</span><br><span class="line"></span><br><span class="line">import org.springframework.amqp.core.Binding;</span><br><span class="line">import org.springframework.amqp.core.BindingBuilder;</span><br><span class="line">import org.springframework.amqp.core.DirectExchange;</span><br><span class="line">import org.springframework.amqp.core.Queue;</span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Routing 模式.配置类</span><br><span class="line"> *</span><br><span class="line"> * @author Administrator</span><br><span class="line"> */</span><br><span class="line">@Configuration</span><br><span class="line">public class DirectRabbitConfig &#123;</span><br><span class="line"></span><br><span class="line">  @Bean</span><br><span class="line">  public Queue AMessage() &#123;</span><br><span class="line">    return new Queue(&quot;direct.A&quot;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @Bean</span><br><span class="line">  public Queue BMessage() &#123;</span><br><span class="line">    return new Queue(&quot;direct.B&quot;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @Bean</span><br><span class="line">  DirectExchange directExchange() &#123;</span><br><span class="line">    return new DirectExchange(&quot;directExchange&quot;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @Bean</span><br><span class="line">  Binding bindingExchangeMessage(Queue AMessage, DirectExchange exchange) &#123;</span><br><span class="line">    return BindingBuilder.bind(AMessage).to(exchange).with(&quot;orange&quot;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @Bean</span><br><span class="line">  Binding bindingExchangeMessageBOfBlack(Queue BMessage, DirectExchange exchange) &#123;</span><br><span class="line">    return BindingBuilder.bind(BMessage).to(exchange).with(&quot;black&quot;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @Bean</span><br><span class="line">  Binding bindingExchangeMessageBOfGreen(Queue BMessage, DirectExchange exchange) &#123;</span><br><span class="line">    return BindingBuilder.bind(BMessage).to(exchange).with(&quot;green&quot;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">package com.example.springboot.test4;</span><br><span class="line"></span><br><span class="line">import org.slf4j.Logger;</span><br><span class="line">import org.slf4j.LoggerFactory;</span><br><span class="line">import org.springframework.amqp.core.AmqpTemplate;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line">@Component</span><br><span class="line">public class DirectSender &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  protected static Logger logger= LoggerFactory.getLogger(DirectSender.class);</span><br><span class="line"></span><br><span class="line">  @Autowired</span><br><span class="line">  private AmqpTemplate rabbitTemplate;</span><br><span class="line">  public void sendOrange() &#123;</span><br><span class="line">    String context = &quot;hi, i am message orange&quot;;</span><br><span class="line">    logger.debug(&quot;Sender : &quot; + context);</span><br><span class="line">    this.rabbitTemplate.convertAndSend(&quot;directExchange&quot;, &quot;orange&quot;, context);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  public void sendBlack() &#123;</span><br><span class="line">    String context = &quot;hi, i am messages black&quot;;</span><br><span class="line">    logger.debug(&quot;Sender : &quot; + context);</span><br><span class="line">    this.rabbitTemplate.convertAndSend(&quot;directExchange&quot;, &quot;black&quot;, context);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  public void sendGreen() &#123;</span><br><span class="line">    String context = &quot;hi, i am messages green&quot;;</span><br><span class="line">    logger.debug(&quot;Sender : &quot; + context);</span><br><span class="line">    this.rabbitTemplate.convertAndSend(&quot;directExchange&quot;, &quot;green&quot;, context);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">package com.example.springboot.test4;</span><br><span class="line"></span><br><span class="line">import org.slf4j.Logger;</span><br><span class="line">import org.slf4j.LoggerFactory;</span><br><span class="line">import org.springframework.amqp.rabbit.annotation.RabbitHandler;</span><br><span class="line">import org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line">@Component</span><br><span class="line">@RabbitListener(queues = &quot;direct.A&quot;)</span><br><span class="line">public class DirectReceiverA &#123;</span><br><span class="line"></span><br><span class="line">  protected static Logger logger= LoggerFactory.getLogger(DirectReceiverA.class);</span><br><span class="line"></span><br><span class="line">  @RabbitHandler</span><br><span class="line">  public void process(String message) &#123;</span><br><span class="line">    logger.debug(&quot;direct.A Receiver  : &quot; + message);</span><br><span class="line">    System.out.println(&quot;direct.A Receiver  : &quot; + message);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">package com.example.springboot.test4;</span><br><span class="line"></span><br><span class="line">import org.slf4j.Logger;</span><br><span class="line">import org.slf4j.LoggerFactory;</span><br><span class="line">import org.springframework.amqp.rabbit.annotation.RabbitHandler;</span><br><span class="line">import org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line">@Component</span><br><span class="line">@RabbitListener(queues = &quot;direct.B&quot;)</span><br><span class="line">public class DirectReceiverB &#123;</span><br><span class="line"></span><br><span class="line">  protected static Logger logger = LoggerFactory.getLogger(DirectReceiverB.class);</span><br><span class="line"></span><br><span class="line">  @RabbitHandler</span><br><span class="line">  public void process(String message) &#123;</span><br><span class="line">    logger.debug(&quot;direct.B Receiver   : &quot; + message);</span><br><span class="line">    System.out.println(&quot;direct.B Receiver  : &quot; + message);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">package com.example.springboot.test4;</span><br><span class="line"></span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line">@RestController</span><br><span class="line">@RequestMapping(&quot;/routing&quot;)</span><br><span class="line">public class DirectController &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private DirectSender directSender;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(&quot;/send1&quot;)</span><br><span class="line">    public String send1() &#123;</span><br><span class="line">        directSender.sendOrange();</span><br><span class="line">        return &quot;send1 orange ok&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(&quot;/send2&quot;)</span><br><span class="line">    public String send2() &#123;</span><br><span class="line">        directSender.sendBlack();</span><br><span class="line">        return &quot;send2  black ok&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(&quot;/send3&quot;)</span><br><span class="line">    public String send3() &#123;</span><br><span class="line">        directSender.sendGreen();</span><br><span class="line">        return &quot;send3 green ok&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试，浏览器访问：<br><a href="http://localhost:8080/routing/send1" target="_blank" rel="noopener">http://localhost:8080/routing/send1</a> 输出： direct.A Receiver  : hi, i am message orange<br><a href="http://localhost:8080/routing/send2" target="_blank" rel="noopener">http://localhost:8080/routing/send2</a> 输出： direct.B Receiver  : hi, i am messages black<br><a href="http://localhost:8080/routing/send3" target="_blank" rel="noopener">http://localhost:8080/routing/send3</a> 输出： direct.B Receiver  : hi, i am messages green</p><h4 id="RPC-Request-reply（暂未使用）"><a href="#RPC-Request-reply（暂未使用）" class="headerlink" title="RPC Request/reply（暂未使用）"></a>RPC Request/reply（暂未使用）</h4><p>RPC比较适合- 客户端调用哪个服务器比较明确 </p><ul><li>调用需要立即得到返回结果 </li><li>架构简单<br>  在一个由多个微服务构成的大系统中，某些关键服务间的调用应当在较短的时间内返回，而且各个微服务的专业化程度较高，同一个请求的关注者只有一个。这个时候就应该用RPC。   比如在一个ERP系统中，有一个管理仓储的微服务，以及一个负责订单的微服务。新建订单时需要查知当前的存货是否充足，如果不充足就通知用户；提交订单时预订指定数量的货物，如果此时货物不错，也要终止订单的提交，并通知用户。显然在这种场景下是不允许较大的延迟，否则会影响用户体验。所以应该使用RPC，及时返回仓储情况。 </li></ul><p>MQ比较适合 </p><ul><li>消息的发送者和消费者需要解耦的情况 </li><li>发送者并不明确谁是消费者 </li><li>发送者并不关心谁来消费消息 </li><li>各个消费者可以从不同的角度入手处理消息 </li><li>消费者的处理结果也不返回给发送者 </li><li>消息的发送和处理是异步的 </li><li>消息的关注者不止一个<br>  在一个由多个微服务构成的大系统中，会有一些非关键服务，用来执行一些不需要立刻得到结果的计算。而且它们的计算结果并不会返回给消息的发送者。这个时候就应该使用MQ。   比如在一个ERP系统中有一些日志服务、业务监控服务等。这些服务会发布一些系统事件，针对这些事件可能有多个应用关注。对于日志服务，当系统出现某些异常情况时需要浏览日志，查找问题的根源；也可以在分析系统运行的瓶颈时提供关键数据。对于业务监控系统，例如货物入仓出仓的消息，可以被报表系统关注，生成报表；也可以被配货系统关注，及时补足所需库存。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;RabbitMQ-术语说明：&quot;&gt;&lt;a href=&quot;#RabbitMQ-术语说明：&quot; class=&quot;headerlink&quot; title=&quot;RabbitMQ 术语说明：&quot;&gt;&lt;/a&gt;RabbitMQ 术语说明：&lt;/h3&gt;&lt;p&gt;Server(Broker):接收客户端连接，实现AMQP协议的消息队列和路由功能的进程；&lt;br&gt;Virtual Host：虚拟主机的概念，类似权限控制组，一个Virtual Host里可以有多个Exchange和Queue,权限控制的最小丽都是Virtual Host；&lt;br&gt;Exchange:交换机，接收生产者发送的消息，并根据Routing Key将消息路由到服务器中的队列Queue。&lt;br&gt;ExchangeType:交换机类型决定了路由消息行为，RabbitMQ中有三种类型Exchange，分别是fanout、direct、topic；&lt;br&gt;Message Queue：消息队列，用于存储还未被消费者消费的消息；&lt;br&gt;Message：由Header和body组成，Header是由生产者添加的各种属性的集合，包括Message是否被持久化、优先级是多少、由哪个Message Queue接收等；body是真正需要发送的数据内容；&lt;br&gt;BindingKey：绑定关键字，将一个特定的Exchange和一个特定的Queue绑定起来。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="RabbitMq" scheme="http://lastsummer.top/blog/categories/RabbitMq/"/>
    
    
      <category term="简单模式 Hello World" scheme="http://lastsummer.top/blog/tags/%E7%AE%80%E5%8D%95%E6%A8%A1%E5%BC%8F-Hello-World/"/>
    
      <category term="工作模式 Work Queue" scheme="http://lastsummer.top/blog/tags/%E5%B7%A5%E4%BD%9C%E6%A8%A1%E5%BC%8F-Work-Queue/"/>
    
      <category term="发布/订阅模式 Publish/Subscribe" scheme="http://lastsummer.top/blog/tags/%E5%8F%91%E5%B8%83-%E8%AE%A2%E9%98%85%E6%A8%A1%E5%BC%8F-Publish-Subscribe/"/>
    
      <category term="路由模式 Routing" scheme="http://lastsummer.top/blog/tags/%E8%B7%AF%E7%94%B1%E6%A8%A1%E5%BC%8F-Routing/"/>
    
      <category term="通配符模式 Topic" scheme="http://lastsummer.top/blog/tags/%E9%80%9A%E9%85%8D%E7%AC%A6%E6%A8%A1%E5%BC%8F-Topic/"/>
    
      <category term="分布式 RPC" scheme="http://lastsummer.top/blog/tags/%E5%88%86%E5%B8%83%E5%BC%8F-RPC/"/>
    
  </entry>
  
  <entry>
    <title>Window10安装RabbitMq中间件</title>
    <link href="http://lastsummer.top/blog/2019/04/17/Window10%E5%AE%89%E8%A3%85RabbitMq%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    <id>http://lastsummer.top/blog/2019/04/17/Window10安装RabbitMq中间件/</id>
    <published>2019-04-17T07:21:40.000Z</published>
    <updated>2019-05-16T01:39:49.834Z</updated>
    
    <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>Rabbit MQ是一个在AMQP协议标准基础上完整的，可服用的企业消息系统；<br>它遵循Mozilla Public License开源协议，采用 Erlang 实现的工业级的消息队列(MQ)服务器，Rabbit MQ 是建立在Erlang OTP平台上；<br>Erlang语言阻止了大量的 Java 工程师去深入研究和掌控它，对公司而言，几乎处于不可控的状态，但是是开源的，比较稳定的社区支持，活跃度也高;<br>AMQP（高级消息队列协议）是一个异步消息传递所使用应用层协议规范，为面向消息中间件设计，基于此协议的客户端与消息中间件可以无视消息来源传递消息，不受客户端、消息中间件、不同的开发语言环境等条件的限制；<br>支持主流操作系统：Linux、Windows，MacOX等；<br>支持多种客户端开发语言：Java、Python、Ruby、.NET，PHP、C/C++、Node.js等。<br><a id="more"></a></p><h3 id="安装-Erlang-及-Rabbit-MQ（安装路径不允许出现空格）"><a href="#安装-Erlang-及-Rabbit-MQ（安装路径不允许出现空格）" class="headerlink" title="安装 Erlang 及 Rabbit MQ（安装路径不允许出现空格）"></a>安装 Erlang 及 Rabbit MQ<font color="red">（安装路径不允许出现空格）</font></h3><p>Erlang 小编使用的是 <code>otp_win64_21.3</code> ，需要其他版本或者32位系统的，可以去 <a href="http://www.erlang.org/downloads" target="_blank" rel="noopener">Erlang官网下载</a>。<br>全部点击“下一步”就行。（安装完成）<br>进入CMD窗口，<br>安装成功后，确认一下是否有系统环境变量。<br>打开Dos窗口,输入 <code>erl</code> 查看Erlang版本（如果可以查看版本，则掠过下方环境配置）<br>变量名：<code>ERLANG_HOME</code>，变量值：<code>Erlang安装路径</code>。<br><img src="/blog/2019/04/17/Window10安装RabbitMq中间件/rabbitmq1.png" alt="配置ERLANG_HOME环境变量"><br><img src="/blog/2019/04/17/Window10安装RabbitMq中间件/rabbitmq2.png" alt="配置PATH环境变量"><br>Rabbit MQ 小编使用的是 <code>rabbitmq-server-3.7.14</code>，需要其他版本或者32位系统的，可以去<a href="http://www.erlang.org/downloads" target="_blank" rel="noopener">Rabbit MQ官网下载</a>。<br><img src="/blog/2019/04/17/Window10安装RabbitMq中间件/rabbitmq3.png" alt="Rabbit MQ官网下载按需下载"><br>全部点击“下一步”就行。（安装完成）<br>激活 <code>RabbitMQ&#39;s Management Plugin</code> 管理界面<br>打开Dos窗口,输入命令：<br><code>&quot;D:\Program Files\RabbitMQ Server\rabbitmq_server-3.7.14\sbin\rabbitmq-plugins.bat&quot; enable rabbitmq_management</code><br><img src="/blog/2019/04/17/Window10安装RabbitMq中间件/rabbitmq4.png" alt="RabbitMQ&#39;s Management Plugin启动成功（启动6个插件）"><br>rabbitmq必须用管理员用户启动（也可配置普通用户启动、暂未使用此方法）<br><img src="/blog/2019/04/17/Window10安装RabbitMq中间件/rabbitmq5.png" alt="普通管理员启动错误"><br>可以在Windows10系统的开始菜单上，单击鼠标右键，这时候出现的菜单中，我们选择命令提示符（管理员）点击打开这样即可。<br><img src="/blog/2019/04/17/Window10安装RabbitMq中间件/rabbitmq6.png" alt="管理员打开Dos窗口"><br><img src="/blog/2019/04/17/Window10安装RabbitMq中间件/rabbitmq7.png" alt="Rabbit MQ启动关闭命令"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">erl #查看Erlang版本</span><br><span class="line">rabbitmqctl status #查看了啊RabbitMQ版本</span><br><span class="line">net start rabbitmq #启动RabbitMQ命令</span><br><span class="line">net stop rabbitmq #关闭RabbitMQ命令</span><br><span class="line">127.0.0.1:15672 #访问RabbitMQ管理界面 默认用户名 guest 密码 guest</span><br><span class="line">默认监听端口：15672（在3.0版本之前是55672端口）</span><br><span class="line">rabbitmq-plugins enable rabbitmq_web_stomp rabbitmq_web_stomp_examples</span><br><span class="line">rabbitmq-plugins enable rabbitmq_management rabbitmq_web_stomp rabbitmq_stomp rabbitmq_web_stomp_examples</span><br><span class="line">&quot;/d/Program Files/RabbitMQ Server/rabbitmq_server-3.7.14/sbin/rabbitmq-plugins.bat&quot; enable rabbitmq_web_stomp rabbitmq_web_stomp_examples</span><br><span class="line">&quot;/d/Program Files/RabbitMQ Server/rabbitmq_server-3.7.14/sbin/rabbitmqctl.bat&quot; startus</span><br><span class="line">&quot;/d/Program Files/RabbitMQ Server/rabbitmq_server-3.7.14/sbin/rabbitmqctl.bat&quot; list_queues</span><br></pre></td></tr></table></figure></p><p><img src="/blog/2019/04/17/Window10安装RabbitMq中间件/rabbitmq8.png" alt="Rabbit MQ管理员界面"></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;p&gt;Rabbit MQ是一个在AMQP协议标准基础上完整的，可服用的企业消息系统；&lt;br&gt;它遵循Mozilla Public License开源协议，采用 Erlang 实现的工业级的消息队列(MQ)服务器，Rabbit MQ 是建立在Erlang OTP平台上；&lt;br&gt;Erlang语言阻止了大量的 Java 工程师去深入研究和掌控它，对公司而言，几乎处于不可控的状态，但是是开源的，比较稳定的社区支持，活跃度也高;&lt;br&gt;AMQP（高级消息队列协议）是一个异步消息传递所使用应用层协议规范，为面向消息中间件设计，基于此协议的客户端与消息中间件可以无视消息来源传递消息，不受客户端、消息中间件、不同的开发语言环境等条件的限制；&lt;br&gt;支持主流操作系统：Linux、Windows，MacOX等；&lt;br&gt;支持多种客户端开发语言：Java、Python、Ruby、.NET，PHP、C/C++、Node.js等。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="RabbitMq" scheme="http://lastsummer.top/blog/categories/RabbitMq/"/>
    
    
      <category term="RabbitMq" scheme="http://lastsummer.top/blog/tags/RabbitMq/"/>
    
      <category term="Queue" scheme="http://lastsummer.top/blog/tags/Queue/"/>
    
  </entry>
  
  <entry>
    <title>为什么使用消息队列</title>
    <link href="http://lastsummer.top/blog/2019/04/16/%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BD%BF%E7%94%A8%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
    <id>http://lastsummer.top/blog/2019/04/16/为什么使用消息队列/</id>
    <published>2019-04-16T07:00:53.000Z</published>
    <updated>2019-04-16T09:36:15.934Z</updated>
    
    <content type="html"><![CDATA[<p>栈：先进先出。<br>堆、队列：先进后出。</p><h3 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h3><p>队列（常用数据结构之一）。<br>队列是一种特殊的线性表，特殊之处在于它只允许在表的前端（front）进行删除操作，而在表的后端（rear）进行插入操作，和栈一样，队列是一种操作受限制的线性表。进行插入操作的端称为队尾，进行删除操作的端称为队头。<br>消息被发送到队列中，“消息队列”是在消息的传输过程中保存消息的容器。<br>消息队列管理器在将消息从它的源中继到它的目标时充当中间人。<br>队列的主要目的是提供路由并保证消息的传递。<br>如果发送消息时接收者不可用，消息队列会保留消息，直到可以成功地传递它。《百度百科》<br><a id="more"></a></p><h3 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h3><h4 id="为什么使用消息队列？（场景、优点、缺点）"><a href="#为什么使用消息队列？（场景、优点、缺点）" class="headerlink" title="为什么使用消息队列？（场景、优点、缺点）"></a>为什么使用消息队列？（场景、优点、缺点）</h4><h6 id="解耦"><a href="#解耦" class="headerlink" title="解耦"></a>解耦</h6><p>场景A：<br>A 系统发送数据到 BCD 三个系统，通过接口调用发送。如果 E 系统也要这个数据呢？那如果 C 系统现在不需要了呢？A 系统负责人几乎崩溃……在这个场景中，A 系统跟其它各种乱七八糟的系统严重耦合，A 系统产生一条比较关键的数据，很多系统都需要 A 系统将这个数据发送过来。A 系统要时时刻刻考虑 BCDE 四个系统如果挂了该咋办？要不要重发，要不要把消息存起来？头发都白了啊！<br>场景A使用MQ：<br>如果使用 MQ，A 系统产生一条数据，发送到 MQ 里面去，哪个系统需要数据自己去 MQ 里面消费。如果新系统需要数据，直接从 MQ 里消费即可；如果某个系统不需要这条数据了，就取消对 MQ 消息的消费即可。这样下来，A 系统压根儿不需要去考虑要给谁发送数据，不需要维护这个代码，也不需要考虑人家是否调用成功、失败超时等情况。<br>总结：<br>通过一个 MQ，Pub/Sub 发布订阅消息这么一个模型，A 系统就跟其它系统彻底解耦了。<br>面试技巧：<br>你需要去考虑一下你负责的系统中是否有类似的场景，就是一个系统或者一个模块，调用了多个系统或者模块，互相之间的调用很复杂，维护起来很麻烦。但是其实这个调用是不需要直接同步调用接口的，如果用 MQ 给它异步化解耦，也是可以的，你就需要去考虑在你的项目里，是不是可以运用这个 MQ 去进行系统的解耦。在简历中体现出来这块东西，用 MQ 作解耦。</p><h6 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h6><p>场景B：<br>A 系统接收一个请求，需要在自己本地写库，还需要在 BCD 三个系统写库，自己本地写库要 3ms，BCD 三个系统分别写库要 300ms、450ms、200ms。最终请求总延时是 3 + 300 + 450 + 200 = 953ms，接近 1s，用户感觉搞个什么东西，慢死了慢死了。用户通过浏览器发起请求，等待个 1s，这几乎是不可接受的。一般互联网类的企业，对于用户直接的操作，一般要求是每个请求都必须在 200 ms 以内完成，对用户几乎是无感知的。<br>场景B使用MQ：<br>如果使用 MQ，那么 A 系统连续发送 3 条消息到 MQ 队列中，假如耗时 5ms，A 系统从接受一个请求到返回响应给用户，总时长是 3 + 5 = 8ms，对于用户而言，其实感觉上就是点个按钮，8ms 以后就直接返回了，爽！网站做得真好，真快！</p><h6 id="削峰"><a href="#削峰" class="headerlink" title="削峰"></a>削峰</h6><p>场景C：<br>每天 0:00 到 12:00，A 系统风平浪静，每秒并发请求数量就 50 个。结果每次一到 12:00 ~ 13:00 ，每秒并发请求数量突然会暴增到 5k+ 条。但是系统是直接基于 MySQL 的，大量的请求涌入 MySQL，每秒钟对 MySQL 执行约 5k 条 SQL。一般的 MySQL，扛到每秒 2k 个请求就差不多了，如果每秒请求到 5k 的话，可能就直接把 MySQL 给打死了，导致系统崩溃，用户也就没法再使用系统了。但是高峰期一过，到了下午的时候，就成了低峰期，可能也就 1w 的用户同时在网站上操作，每秒中的请求数量可能也就 50 个请求，对整个系统几乎没有任何的压力。<br>场景C使用MQ：<br>如果使用 MQ，每秒 5k 个请求写入 MQ，A 系统每秒钟最多处理 2k 个请求，因为 MySQL 每秒钟最多处理 2k 个。A 系统从 MQ 中慢慢拉取请求，每秒钟就拉取 2k 个请求，不要超过自己每秒能处理的最大请求数量就 ok，这样下来，哪怕是高峰期的时候，A 系统也绝对不会挂掉。而 MQ 每秒钟 5k 个请求进来，就 2k 个请求出去，结果就导致在中午高峰期（1 个小时），可能有几十万甚至几百万的请求积压在 MQ 中。这个短暂的高峰期积压是 ok 的，因为高峰期过了之后，每秒钟就 50 个请求进 MQ，但是 A 系统依然会按照每秒 2k 个请求的速度在处理。所以说，只要高峰期一过，A 系统就会快速将积压的消息给解决掉。</p><h4 id="消息队列有什么优点和缺点？"><a href="#消息队列有什么优点和缺点？" class="headerlink" title="消息队列有什么优点和缺点？"></a>消息队列有什么优点和缺点？</h4><h5 id="优点：上面已经说了，就是在特殊场景下有其对应的好处，解耦、异步、削峰（三个）"><a href="#优点：上面已经说了，就是在特殊场景下有其对应的好处，解耦、异步、削峰（三个）" class="headerlink" title="优点：上面已经说了，就是在特殊场景下有其对应的好处，解耦、异步、削峰（三个）"></a>优点：上面已经说了，就是在特殊场景下有其对应的好处，解耦、异步、削峰（三个）</h5><h5 id="缺点：系统可用性降低、系统复杂度提高、一致性问题（三个）"><a href="#缺点：系统可用性降低、系统复杂度提高、一致性问题（三个）" class="headerlink" title="缺点：系统可用性降低、系统复杂度提高、一致性问题（三个）"></a>缺点：系统可用性降低、系统复杂度提高、一致性问题（三个）</h5><h6 id="系统可用性降低："><a href="#系统可用性降低：" class="headerlink" title="系统可用性降低："></a>系统可用性降低：</h6><p>系统引入的外部依赖越多，越容易挂掉。本来你就是 A 系统调用 BCD 三个系统的接口就好了，人 ABCD 四个系统好好的，没啥问题，你偏加个 MQ 进来，万一 MQ 挂了咋整，MQ 一挂，整套系统崩溃的，你不就完了？如何保证消息队列的高可用，可以点击这里查看。</p><h6 id="系统复杂度提高"><a href="#系统复杂度提高" class="headerlink" title="系统复杂度提高"></a>系统复杂度提高</h6><p>硬生生加个 MQ 进来，你怎么保证消息没有重复消费？怎么处理消息丢失的情况？怎么保证消息传递的顺序性？头大头大，问题一大堆，痛苦不已。</p><h6 id="一致性问题"><a href="#一致性问题" class="headerlink" title="一致性问题"></a>一致性问题</h6><p>A 系统处理完了直接返回成功了，人都以为你这个请求就成功了；但是问题是，要是 BCD 三个系统那里，BD 两个系统写库成功了，结果 C 系统写库失败了，咋整？你这数据就不一致了。</p><h4 id="Kafka、ActiveMQ、RabbitMQ、RocketMQ-都有什么区别，以及适合哪些场景？"><a href="#Kafka、ActiveMQ、RabbitMQ、RocketMQ-都有什么区别，以及适合哪些场景？" class="headerlink" title="Kafka、ActiveMQ、RabbitMQ、RocketMQ 都有什么区别，以及适合哪些场景？"></a>Kafka、ActiveMQ、RabbitMQ、RocketMQ 都有什么区别，以及适合哪些场景？</h4><p>所以消息队列实际是一种非常复杂的架构，你引入它有很多好处，但是也得针对它带来的坏处做各种额外的技术方案和架构来规避掉，做好之后，你会发现，妈呀，系统复杂度提升了一个数量级，也许是复杂了 10 倍。但是关键时刻，用，还是得用的。</p><p><img src="/blog/2019/04/16/为什么使用消息队列/rabbitmq1.png" alt="四大MQ的优缺点"></p><p>综上，各种对比之后，有如下建议：<br>1、一般的业务系统要引入 MQ，最早大家都用 ActiveMQ，但是现在确实大家用的不多了，没经过大规模吞吐量场景的验证，社区也不是很活跃，所以大家还是算了吧，我个人不推荐用这个了；<br>2、后来大家开始用 RabbitMQ，但是确实 erlang 语言阻止了大量的 Java 工程师去深入研究和掌控它，对公司而言，几乎处于不可控的状态，但是确实人家是开源的，比较稳定的支持，活跃度也高；<br>3、不过现在确实越来越多的公司会去用 RocketMQ，确实很不错，毕竟是阿里出品，但社区可能有突然黄掉的风险（目前 RocketMQ 已捐给 Apache，但 GitHub 上的活跃度其实不算高）对自己公司技术实力有绝对自信的，推荐用 RocketMQ，否则回去老老实实用 RabbitMQ 吧，人家有活跃的开源社区，绝对不会黄。<br>所以中小型公司，技术实力较为一般，技术挑战不是特别高，用 RabbitMQ 是不错的选择；<br>大型公司，基础架构研发实力较强，用 RocketMQ 是很好的选择。<br>如果是大数据领域的实时计算、日志采集等场景，用 Kafka 是业内标准的，绝对没问题，社区活跃度很高，绝对不会黄，何况几乎是全世界这个领域的事实性规范。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;栈：先进先出。&lt;br&gt;堆、队列：先进后出。&lt;/p&gt;
&lt;h3 id=&quot;队列&quot;&gt;&lt;a href=&quot;#队列&quot; class=&quot;headerlink&quot; title=&quot;队列&quot;&gt;&lt;/a&gt;队列&lt;/h3&gt;&lt;p&gt;队列（常用数据结构之一）。&lt;br&gt;队列是一种特殊的线性表，特殊之处在于它只允许在表的前端（front）进行删除操作，而在表的后端（rear）进行插入操作，和栈一样，队列是一种操作受限制的线性表。进行插入操作的端称为队尾，进行删除操作的端称为队头。&lt;br&gt;消息被发送到队列中，“消息队列”是在消息的传输过程中保存消息的容器。&lt;br&gt;消息队列管理器在将消息从它的源中继到它的目标时充当中间人。&lt;br&gt;队列的主要目的是提供路由并保证消息的传递。&lt;br&gt;如果发送消息时接收者不可用，消息队列会保留消息，直到可以成功地传递它。《百度百科》&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="queue" scheme="http://lastsummer.top/blog/categories/queue/"/>
    
    
      <category term="Queue" scheme="http://lastsummer.top/blog/tags/Queue/"/>
    
  </entry>
  
  <entry>
    <title>Git基本命令</title>
    <link href="http://lastsummer.top/blog/2019/03/04/Git%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/"/>
    <id>http://lastsummer.top/blog/2019/03/04/Git基本命令/</id>
    <published>2019-03-04T06:02:46.000Z</published>
    <updated>2019-05-23T06:44:43.702Z</updated>
    
    <content type="html"><![CDATA[<p>Git命令行基本操作！<br><a id="more"></a></p><h3 id="git-config可以配置git的参数"><a href="#git-config可以配置git的参数" class="headerlink" title="git config可以配置git的参数"></a>git config可以配置git的参数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git config --list 查看已经配置的git参数</span><br><span class="line">git config --system user.name &quot;Tocy&quot;所有用户（本系统）</span><br><span class="line">git config --system user.email zyvj@qq.com所有用户（本系统）</span><br><span class="line">git config --global user.name &quot;Tocy&quot;当前用户（全局）</span><br><span class="line">git config --global user.email zyvj@qq.com当前用户（全局）</span><br><span class="line">git config --local user.name &quot;Tocy&quot;本地配置（当前目录）</span><br><span class="line">git config --local user.email zyvj@qq.com  本地配置（当前目录）</span><br></pre></td></tr></table></figure><h3 id="创建Git仓库"><a href="#创建Git仓库" class="headerlink" title="创建Git仓库"></a>创建Git仓库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init初始化当前目录</span><br></pre></td></tr></table></figure><h3 id="克隆Git仓库"><a href="#克隆Git仓库" class="headerlink" title="克隆Git仓库"></a>克隆Git仓库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://git.oschina.net/Tocy/SampleCode.git</span><br></pre></td></tr></table></figure><h3 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">git status# 检查下修改了什么内容</span><br><span class="line">git log --stat      # 仅显示摘要选项</span><br><span class="line">git log --pretty=oneline        # 定制记录格式</span><br><span class="line">git log --graph     # 图像化分支和版本更新</span><br><span class="line">git add . # 提交所有文件到暂存区</span><br><span class="line">git add Readme.md</span><br><span class="line">git add *.png</span><br><span class="line">git add /home/code/</span><br><span class="line">git diff # 查看当前目录的所有修改</span><br><span class="line">git commit -m &quot;注释备注&quot; # 提交代码到本地仓库</span><br><span class="line">git push # 提交代码到远程仓库</span><br><span class="line">git branch # 显示本地当前所有分支</span><br><span class="line">git branch -d test # 删除分支</span><br><span class="line">git branch -D test # 强制删除分支</span><br><span class="line">git checkout -b testing # 直接切换并创建分支</span><br><span class="line">git checkout master # 切换主分支</span><br><span class="line">git merge test # 合并分支的代码</span><br><span class="line">git branch -a # 查看远程仓库所有分支</span><br><span class="line">git push origin test # 推送本地分支到远程仓库</span><br><span class="line">git push  origin --delete test # 删除远程分支</span><br><span class="line">git checkout &quot;git status项目文件路径&quot; # 还原某个文件</span><br><span class="line">git reset --hard &apos;git log中的commit id&apos;还原所有文件到一个版本</span><br><span class="line">git pull # 更新远程仓库最新代码</span><br><span class="line">git reset HEAD &quot;文件路径&quot;     # 撤回暂存区的某个文件</span><br><span class="line">git reset HEAD~     # 撤回本地仓库中的代码到暂存区</span><br><span class="line">git reset# 撤回所有本地仓库中的代码到暂存区</span><br><span class="line">git rm --cached you_file_name # 撤回暂存区中的代码（暂未使用）</span><br><span class="line">git merge dev--合并分支dev的代码（Fast-forward表示快进模式，合并速度快，会直接将Master分支指向Develop分支）</span><br><span class="line">git merge --no-ff dev # 正常工作 master生成新节点，保证版本演变的清晰，建议此方法g&apos;g</span><br><span class="line"></span><br><span class="line"># 回退一个版本,且会将暂存区的内容和本地已提交的内容全部恢复到未暂存的状态,不影响原来本地文件(未提交的也不受影响) </span><br><span class="line">git reset (–mixed) HEAD~1 </span><br><span class="line"># 回退一个版本,不清空暂存区,将已提交的内容恢复到暂存区,不影响原来本地的文件(未提交的也不受影响) </span><br><span class="line">git reset –soft HEAD~1 </span><br><span class="line"># 回退一个版本,清空暂存区,将已提交的内容的版本恢复到本地,本地的文件也将被恢复的版本替换</span><br><span class="line">git reset –hard HEAD~1 </span><br><span class="line"># 强制覆盖远程仓库，从提交记录上还很难查到是谁进行了强制覆盖</span><br><span class="line">git push origin v1.0.0 --force</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Git命令行基本操作！&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Git" scheme="http://lastsummer.top/blog/categories/Git/"/>
    
    
      <category term="Git" scheme="http://lastsummer.top/blog/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Calendar获取日期</title>
    <link href="http://lastsummer.top/blog/2019/01/09/Calendar%E8%8E%B7%E5%8F%96%E6%97%A5%E6%9C%9F/"/>
    <id>http://lastsummer.top/blog/2019/01/09/Calendar获取日期/</id>
    <published>2019-01-09T05:30:48.000Z</published>
    <updated>2019-01-09T05:33:43.522Z</updated>
    
    <content type="html"><![CDATA[<p>Calendar获取月初月末日期。<a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">SimpleDateFormat simpleDateFormat = new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;);</span><br><span class="line">SimpleDateFormat startSimpleDateFormat = new SimpleDateFormat(&quot;yyyy-MM-dd 00:00:00&quot;);</span><br><span class="line">SimpleDateFormat EndDateFormat = new SimpleDateFormat(&quot;yyyy-MM-dd 23:59:59&quot;);</span><br><span class="line">//上月第一天</span><br><span class="line">Calendar calendar = Calendar.getInstance();</span><br><span class="line">System.out.println(&quot;当前时间：&quot;+simpleDateFormat.format(calendar.getTime()));</span><br><span class="line">calendar.add(Calendar.MONTH, -1);</span><br><span class="line">calendar.set(Calendar.DAY_OF_MONTH, 1);</span><br><span class="line">System.out.println(calendar.getTime());</span><br><span class="line">System.out.println(&quot;上月第一天时间：&quot;+startSimpleDateFormat.format(calendar.getTime()));</span><br><span class="line">//上月最后一天</span><br><span class="line">Calendar calendar1 = Calendar.getInstance();</span><br><span class="line">calendar1.set(Calendar.DAY_OF_MONTH, 1);</span><br><span class="line">calendar1.add(Calendar.DATE, -1);</span><br><span class="line">System.out.println(calendar1.getTime());</span><br><span class="line">System.out.println(&quot;上月最后一天：&quot;+EndDateFormat.format(calendar1.getTime()));</span><br><span class="line">//本月第一天</span><br><span class="line">Calendar calendar2 = Calendar.getInstance();</span><br><span class="line">calendar2.set(Calendar.DAY_OF_MONTH, calendar2.getActualMinimum(Calendar.DAY_OF_MONTH));</span><br><span class="line">System.out.println(calendar2.getTime());</span><br><span class="line">System.out.println(&quot;本月第一天：&quot;+startSimpleDateFormat.format(calendar2.getTime()));</span><br><span class="line">//本月最后一天</span><br><span class="line">Calendar calendar3 = Calendar.getInstance();</span><br><span class="line">calendar3.set(Calendar.DAY_OF_MONTH, calendar3.getActualMaximum(Calendar.DAY_OF_MONTH));</span><br><span class="line">System.out.println(calendar3.getTime());</span><br><span class="line">System.out.println(&quot;本月最后一天：&quot;+EndDateFormat.format(calendar3.getTime()));</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Calendar获取月初月末日期。&lt;/p&gt;
    
    </summary>
    
      <category term="JAVA" scheme="http://lastsummer.top/blog/categories/JAVA/"/>
    
    
      <category term="java" scheme="http://lastsummer.top/blog/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>BigDecimal算法</title>
    <link href="http://lastsummer.top/blog/2018/12/24/BigDecimal%E7%AE%97%E6%B3%95/"/>
    <id>http://lastsummer.top/blog/2018/12/24/BigDecimal算法/</id>
    <published>2018-12-24T02:02:29.000Z</published>
    <updated>2018-12-24T08:01:29.307Z</updated>
    
    <content type="html"><![CDATA[<p>BigDecimal算法。<a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">BigDecimal bignum1 = new BigDecimal(&quot;10&quot;);  </span><br><span class="line">BigDecimal bignum2 = new BigDecimal(&quot;5&quot;);  </span><br><span class="line">BigDecimal bignum3 = null;  </span><br><span class="line">  </span><br><span class="line">//加法  </span><br><span class="line">bignum3 =  bignum1.add(bignum2);       </span><br><span class="line">System.out.println(&quot;和 是：&quot; + bignum3);  </span><br><span class="line">  </span><br><span class="line">//减法  </span><br><span class="line">bignum3 = bignum1.subtract(bignum2);  </span><br><span class="line">System.out.println(&quot;差  是：&quot; + bignum3);  </span><br><span class="line">  </span><br><span class="line">//乘法  </span><br><span class="line">bignum3 = bignum1.multiply(bignum2);  </span><br><span class="line">System.out.println(&quot;积  是：&quot; + bignum3);  </span><br><span class="line">  </span><br><span class="line">//除法  </span><br><span class="line">bignum3 = bignum1.divide(bignum2);  </span><br><span class="line">System.out.println(&quot;商  是：&quot; + bignum3);  </span><br><span class="line"></span><br><span class="line">//比较</span><br><span class="line">int bignum = bignum1.compareTo(bignum2);</span><br><span class="line">返回的结果是int类型，-1表示小于，0是等于，1是大于。</span><br><span class="line"></span><br><span class="line">BigDecimal decimal = new BigDecimal(&quot;1.12345&quot;);</span><br><span class="line"></span><br><span class="line">//保留四位小数，默认四舍五入</span><br><span class="line">BigDecimal setScale = decimal.setScale(4);</span><br><span class="line">System.out.println(setScale);</span><br><span class="line"></span><br><span class="line">//保留四位小数，直接删除多余的小数</span><br><span class="line">BigDecimal setScale = decimal.setScale(4,BigDecimal.ROUND_DOWN);</span><br><span class="line">System.out.println(setScale);</span><br><span class="line"></span><br><span class="line">//保留四位小数，进位处理</span><br><span class="line">BigDecimal setScale = decimal.setScale(4,BigDecimal.ROUND_UP);</span><br><span class="line">System.out.println(setScale);</span><br><span class="line"></span><br><span class="line">//保留四位小数，四舍五入（2.35变成2.4）</span><br><span class="line">BigDecimal setScale1= decimal.setScale(4,BigDecimal.ROUND_HALF_UP);</span><br><span class="line">System.out.println(setScale);</span><br><span class="line"></span><br><span class="line">//保留四位小数，四舍五入（2.35变成2.3）</span><br><span class="line">BigDecimal setScale = decimal.setScale(4,BigDecimal.ROUND_HALF_DOWN);</span><br><span class="line">System.out.println(setScale);</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;BigDecimal算法。&lt;/p&gt;
    
    </summary>
    
      <category term="JAVA" scheme="http://lastsummer.top/blog/categories/JAVA/"/>
    
    
      <category term="java" scheme="http://lastsummer.top/blog/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Oracle表恢复到特定时间点</title>
    <link href="http://lastsummer.top/blog/2018/12/13/Oracle%E8%A1%A8%E6%81%A2%E5%A4%8D%E5%88%B0%E7%89%B9%E5%AE%9A%E6%97%B6%E9%97%B4%E7%82%B9/"/>
    <id>http://lastsummer.top/blog/2018/12/13/Oracle表恢复到特定时间点/</id>
    <published>2018-12-13T02:36:35.000Z</published>
    <updated>2018-12-13T02:51:47.446Z</updated>
    
    <content type="html"><![CDATA[<p>Oracle数据库表恢复到特定时间点。<a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">-- Create table</span><br><span class="line">create table TEST</span><br><span class="line">(</span><br><span class="line">  id    NUMBER(4),</span><br><span class="line">  name  VARCHAR2(20),</span><br><span class="line">  class VARCHAR2(20),</span><br><span class="line">  score NUMBER</span><br><span class="line">);</span><br><span class="line">-- Insert table</span><br><span class="line">insert into test values (11,&apos;测试10&apos;,&apos;一年三班&apos;,80);</span><br><span class="line">insert into test values (12,&apos;测试11&apos;,&apos;一年二班&apos;,90);</span><br><span class="line">insert into test values (13,&apos;测试12&apos;,&apos;一年一班&apos;,100);</span><br><span class="line">-- 数据库表恢复到特定时间点。</span><br><span class="line">select * from test as of timestamp </span><br><span class="line">  to_timestamp(&apos;2018-12-13 10:18:00&apos;, &apos;yyyy-mm-dd hh24:mi:ss&apos;);</span><br><span class="line">-- 临时表恢复之前的数据</span><br><span class="line">create table 临时表 as</span><br><span class="line">  select * from 你的那个数据被删除的表 as of </span><br><span class="line">  timestamp to_timestamp(&apos;2013-08-13 14:00:00&apos;,  &apos;yyyy-mm-dd hh24:mi:ss&apos;);</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Oracle数据库表恢复到特定时间点。&lt;/p&gt;
    
    </summary>
    
      <category term="ORACLE" scheme="http://lastsummer.top/blog/categories/ORACLE/"/>
    
    
      <category term="SQL" scheme="http://lastsummer.top/blog/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>Oracle查询各班前三名学生信息</title>
    <link href="http://lastsummer.top/blog/2018/11/30/Oracle%E6%9F%A5%E8%AF%A2%E5%90%84%E7%8F%AD%E5%89%8D%E4%B8%89%E5%90%8D%E5%AD%A6%E7%94%9F%E4%BF%A1%E6%81%AF/"/>
    <id>http://lastsummer.top/blog/2018/11/30/Oracle查询各班前三名学生信息/</id>
    <published>2018-11-30T06:46:11.000Z</published>
    <updated>2018-11-30T09:09:59.033Z</updated>
    
    <content type="html"><![CDATA[<p>Oracle查询各班前三名学生的信息。<br>row_number函数排序最好用它，每一行记录生成一个序号，依次排序且不会重复。<br>rank函数返回结果集的分区内每行排名，行的排名是相关行之前的排名数加一，重复排序会重复。<br>dense_rank函数的功能与rank函数类似，dense_rank函数在生成序号时是连续的，依次排序会重复。<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">select * from </span><br><span class="line">  (select rank() over(partition by class order by score desc nulls last)rank,</span><br><span class="line">  s.*from test s) t</span><br><span class="line">  where rank &lt;= 3</span><br><span class="line">  order by class asc, score desc;</span><br></pre></td></tr></table></figure></p><p><img src="/blog/2018/11/30/Oracle查询各班前三名学生信息/sql1.png" alt="rank效果展示"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">select * from </span><br><span class="line">  (select row_number()over(partition by class order by score desc nulls last)</span><br><span class="line">  rank,s.*from test s) t</span><br><span class="line">  where rank &lt;= 3</span><br><span class="line">  order by class asc, score desc</span><br></pre></td></tr></table></figure></p><p><img src="/blog/2018/11/30/Oracle查询各班前三名学生信息/sql2.png" alt="row_number效果展示"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">select * from </span><br><span class="line">  (select dense_rank()over(partition by class order by score desc nulls last)</span><br><span class="line">  rank,s.*from test s) t</span><br><span class="line">  where rank &lt;= 3</span><br><span class="line">  order by class asc, score desc</span><br></pre></td></tr></table></figure></p><p><img src="/blog/2018/11/30/Oracle查询各班前三名学生信息/sql3.png" alt="dense_rank效果展示"></p><h2 id="关于Parttion-by："><a href="#关于Parttion-by：" class="headerlink" title="关于Parttion by："></a>关于Parttion by：</h2><ul><li>Parttion by关键字是Oracle中分析性函数的一部分，用于给结果集进行分区。它和聚合函数Group by不同的地方在于它只是将原始数据进行名次排列，能够返回一个分组中的多条记录（记录数不变），而Group by是对原始数据进行聚合统计，一般只有一条反映统计值的结果（每组返回一条）。<br>TIPS：<br>使用rank over()的时候，空值是最大的，如果排序字段为null, 可能造成null字段排在最前面，影响排序结果。<br>可以这样： rank over(partition by course order by score desc nulls last)</li></ul><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><ul><li>在使用排名函数的时候需要注意以下三点：<br>1、排名函数必须有 OVER 子句。<br>2、排名函数必须有包含 ORDER BY 的 OVER 子句。<br>3、分组内从1开始排序。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Oracle查询各班前三名学生的信息。&lt;br&gt;row_number函数排序最好用它，每一行记录生成一个序号，依次排序且不会重复。&lt;br&gt;rank函数返回结果集的分区内每行排名，行的排名是相关行之前的排名数加一，重复排序会重复。&lt;br&gt;dense_rank函数的功能与rank函数类似，dense_rank函数在生成序号时是连续的，依次排序会重复。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ORACLE" scheme="http://lastsummer.top/blog/categories/ORACLE/"/>
    
    
      <category term="SQL" scheme="http://lastsummer.top/blog/tags/SQL/"/>
    
  </entry>
  
</feed>
