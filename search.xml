<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[JWT生成TOKEN]]></title>
    <url>%2Fblog%2F2020%2F01%2F25%2FJWT%E7%94%9F%E6%88%90TOKEN%2F</url>
    <content type="text"><![CDATA[简介:Jwt 是一种生成token,或者解析token 返回对象的工具，现在流行的都是前后端分离项目，用之前的shiro,或者sercurity 去做权限是会遇到无法做前端的权限，所以就采用token 这种方式，服务器返回token 给前端，前端通过token 访问资源，前端通过cookie保存。 什么是jwtWT本质上是一个字符串，一个完整的JWT由三部分组成，头部(header), 荷载(Payload), 和签名(Signature)，中间用.隔开，如下是一个典型的JWT：eyJhbGciOiJIUzUxMiJ9.iIxMjM0NSIsInN1YiI6InhsIn0.5MSq92FV7vneEo9IrrZw9XH6g注意：保存的信息越多，生成的token长度越长 JWT 头部（Header）用于描述关于该JWT的最基本的信息，例如其类型以及签名所用的算法等。这也可以被表示成一个JSON对象。{“typ”:”JWT”,”alg”:”HS256”} 载荷（playload）载荷就是存放有效信息的地方（自定义变量+标准变量）。 签证（signature）jwt的第三部分是一个签证信息，这个签证信息由三部分组成：这个部分需要base64加密后的header和base64加密后的payload使用.连接组成的字符串，然后通过header中声明的加密方式进行加盐secret组合加密，然后就构成了jwt的第三部分。eyJhbGciOiJIUzUxMiJ9.iIxMjM0NSIsInN1YiI6InhsIn0.5MSq92FV7vneEo9IrrZw9XH6g 引入依赖包12345&lt;dependency&gt; &lt;groupId&gt;io.jsonwebtoken&lt;/groupId&gt; &lt;artifactId&gt;jjwt&lt;/artifactId&gt; &lt;version&gt;0.6.0&lt;/version&gt;&lt;/dependency&gt; JWT工具类123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186package com.zes.utils;import com.zexx.springcloudcommon.exception.WebException;import com.zexx.springcloudcommon.utils.StringUtil;import io.jsonwebtoken.Claims;import io.jsonwebtoken.Jwts;import io.jsonwebtoken.SignatureAlgorithm;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.beans.factory.annotation.Value;import org.springframework.data.redis.core.RedisTemplate;import org.springframework.stereotype.Component;import java.io.Serializable;import java.util.Date;import java.util.HashMap;import java.util.Map;import java.util.concurrent.TimeUnit;/** * Description: JWT生成token相关的工具类 * * @author wangrui * @date 2019/12/18 */@Componentpublic class JwtTokenUtil implements Serializable &#123; private static final long serialVersionUID = -4324967L; //用户名称 private static final String CLAIM_KEY_USERNAME = &quot;CLAIM_KEY_USERNAME&quot;; //创建时间 private static final String CLAIM_KEY_CREATE_TIME = &quot;CLAIM_KEY_CREATE_TIME&quot;; //结束时间 private static final String CLAIM_KEY_END_TIME = &quot;CLAIM_KEY_END_TIME&quot;; //注入redis @Autowired private RedisTemplate redisTemplate; // JWT 密钥（服务器密钥加密解密 application.yml配置） @Value(&quot;$&#123;jwt.secret&#125;&quot;) private String secret; // redis存储时间 分钟 一般24小时 @Value(&quot;$&#123;jwt.redisexpiration&#125;&quot;) private Long redisExpiration; //签发人 @Value(&quot;$&#123;jwt.issuer&#125;&quot;) private String issuer; /** * Description: 解析token，从token中获取信息 * * @param token */ private Claims getClaimsFromToken(String token) &#123; Claims claims; try &#123; claims = Jwts.parser() .setSigningKey(secret) .parseClaimsJws(token) .getBody(); &#125; catch (Exception e) &#123; e.printStackTrace(); claims = null; &#125; return claims; &#125; /** * Description:获取用户名 * * @param token */ public String getUserNameFromToken(String token) &#123; String userName; try &#123; final Claims claims = getClaimsFromToken(token); userName = claims.get(CLAIM_KEY_USERNAME) == null ? &quot;&quot; : claims.get(CLAIM_KEY_USERNAME).toString(); &#125; catch (Exception e) &#123; userName = null; &#125; return userName; &#125; /** * Description:获取token创建时间 * * @param token */ public Date getCreatedDateFromToken(String token) &#123; Date created; try &#123; final Claims claims = getClaimsFromToken(token); created = new Date((Long) claims.get(CLAIM_KEY_CREATE_TIME)); &#125; catch (Exception e) &#123; created = null; &#125; return created; &#125; /** * Description: 获取token过期时间 * * @param token */ public Date getExpirationDateFromToken(String token) &#123; Date expiration; try &#123; final Claims claims = getClaimsFromToken(token); expiration = claims.getExpiration(); &#125; catch (Exception e) &#123; expiration = null; &#125; return expiration; &#125; /** * Description:token生成过期时间 */ private Date generateExpirationDate() &#123; return new Date(System.currentTimeMillis() + redisExpiration * 60 * 1000); &#125; /** * Description:token是否过期 * * @param token */ private Boolean isTokenExpired(String token) &#123; final Date expiration = getExpirationDateFromToken(token); return expiration.before(new Date()); &#125; /** * Description: 创建token */ public String generateToken(String userName, String mac) &#123; Map&lt;String, Object&gt; claims = new HashMap&lt;&gt;(); claims.put(CLAIM_KEY_USERNAME, userName); claims.put(CLAIM_KEY_CREATE_TIME, new Date()); claims.put(CLAIM_KEY_END_TIME, generateExpirationDate()); return generateToken(claims); &#125; /** * Description:使用Rs256签名 */ private String generateToken(Map&lt;String, Object&gt; claims) &#123; return Jwts.builder() .setClaims(claims)//自定义变量 .setIssuer(issuer) .setIssuedAt(new Date())//发行时间 .setAudience((String) claims.get(CLAIM_KEY_USERNAME)) .setExpiration(generateExpirationDate())//过期时间 .signWith(SignatureAlgorithm.HS512, secret)//签名密钥 .compact(); &#125; /** * Description:验证token * * @param token * @param userName * @param mac */ public boolean validateToken(String token, String userName, String mac) &#123; String tokenName = &quot;&quot;; try &#123; if (redisTemplate.hasKey(&quot;token_&quot; + userName)) &#123; tokenName = (String) redisTemplate.opsForValue().get(&quot;token_&quot; + userName); if (tokenName.equals(token)) &#123; return true; &#125; else &#123; //自定义异常 throw new WebException(&quot;无效令牌&quot;); &#125; &#125; &#125; catch (WebException e) &#123; throw new WebException(e.getMessage()); &#125; return false; &#125;&#125;]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[微服务下实现日志模块]]></title>
    <url>%2Fblog%2F2019%2F12%2F09%2F%E5%BE%AE%E6%9C%8D%E5%8A%A1%E4%B8%8B%E5%AE%9E%E7%8E%B0%E6%97%A5%E5%BF%97%E6%A8%A1%E5%9D%97%2F</url>
    <content type="text"><![CDATA[微服务下实现日志模块与传统单体应用不同，微服务下由于，项目模块、业务拆分成多个独立系统，数据库一般也相互独立。所以对于日志的统一管理和收集，也趋于复杂，借助于springboot自动配置和spring事件发布订阅（RabbitMq）、SpringAop以及组件化思想，构建一个通用日志模块 自定义SysLog注解1234567891011121314151617181920/** * 自定义日志注解 * @author wangrui * @date 2019-12-9 */@Target(ElementType.METHOD)@Retention(RetentionPolicy.RUNTIME)@Documentedpublic @interface SysLog &#123; /** * 服务(子系统)名 默认取$&#123;spring.application.name&#125; */ String serverName() default &quot;&quot;; /** * 日志描述信息 */ String description() default &quot;&quot;;&#125; 通过Aop pointCut拦截@SysLog的请求123456789101112131415161718192021222324252627282930313233343536373839/** * aop拦截 * @author wangrui * @date 2019-06-09 17:47 */@Aspectpublic class LogAspect &#123; @Autowired private ThreadPoolTaskExecutor taskExecutor; @Autowired private AmqpTemplate amqpTemplate; @Value(&quot;$&#123;spring.application.name&#125;&quot;) private String serverName; @Around(value = &quot;@annotation(SysLog)&quot;) public Object around(ProceedingJoinPoint point, ZgLog zgLog) throws Throwable &#123; String strClassName = point.getTarget().getClass().getName(); String strMethodName = point.getSignature().getName(); SysLog logVo = SysLogUtils.getSysLog(); logVo.setServerName(StringUtils.isNotBlank(zgLog.serverName()) ? zgLog.serverName() : serverName); logVo.setModule(zgLog.module()); logVo.setDescription(zgLog.description()); Long startTime = System.currentTimeMillis(); Object obj = point.proceed(); Long endTime = System.currentTimeMillis(); logVo.setTime(endTime - startTime); 1、实现spirng消息发布及订阅 2、springboot连接池异步多线程发送消息 taskExecutor.execute(new MyThread()); 3、mq异步发送保存日志信息 amqpTemplate.convertAndSend(&quot;springcloud.exchange&quot;,&quot;log&quot;, JSONObject.toJSONString(logVo)); return obj; &#125;&#125;]]></content>
      <categories>
        <category>SpringCloud</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>SpringBoot</tag>
        <tag>SpringCloud</tag>
        <tag>RabbitMQ</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SpringCloud基础]]></title>
    <url>%2Fblog%2F2019%2F11%2F26%2FSpringCloud%E5%9F%BA%E7%A1%80%2F</url>
    <content type="text"><![CDATA[SpringCloud基础 微服务的优缺点12345678910111213微服务是一种架构模式，叫微服务架构更合理，把一个系统的各个功能点都拆开为一个个的应用单独部署优点：1.每个服务直接足够内聚，代码容易理解2.开发效率高，一个服务只做一件事，适合小团队开发3.松耦合，有功能意义的服务4.可以用不同语言开发，面向接口编程5.易于第三方集成6.微服务只是业务逻辑的代码，不会和HTML,CSS或其他界面结合7.可以灵活搭配，连接公共库/连接独立库缺点：1.分布式系统的责任性2.多服务运维难度加大3.系统部署依赖，服务间通信成本，数据一致性，系统集成测试，性能监控 springCloud?123Spring cloud流应用程序启动器是基于Spring Boot的Spring集成应用程序，提供与外部系统的集成Spring cloud Task，一个生命周期短暂的微服务框架，用于快速构建执行有限数据处理的应用程序相比Dubbo等RPC框架,Spring Cloud提供的全套的分布式系统解决方案 springCloud和Dubbo区别?12341.服务调用方式 dubbo基于RPC springcloud基于Rest Api2.注册中心,dubbo 是zookeeper springcloud是eureka，也可以是zookeeper3.服务网关,dubbo本身没有实现，只能通过其他第三方技术整合springcloud有Zuul路由网关，进行消费者的请求分发,springcloud支持断路器，与git完美集成配置文件支持版本控制，事物总线实现配置文件的更新与服务自动装配等等一系列的微服务架构要素 RPC和REST区别？12345REST是一种架构风格，REST规范把所有内容都视为资源，网络上一切皆资源REST并没有创造新的技术，组件或服务，只是使用Web的现有特征和能力完全通过HTTP协议实现，使用 HTTP 协议处理数据通信REST架构对资源的操作CRTUD的操作正好对应HTTP协议提供的GET、POST、PUT和DELETE方法RPC远程方法调用，就是像调用本地方法一样调用远程方法 微服务通信方式？1234561.RestTemplate（1）restTemplate.getForObject(&quot;http://localhost:8773/hi&quot;,String.class);（2）loadBalancerClient（3）server_id服务调用2.远程调用，比如feign接口调用，直接通过远程过程调用来访问别的service。3.消息中间件rabbitmq Eureka和Zookeeper区别?1234561.Eureka取CAP的AP，注重可用性，Zookeeper取CAP的CP注重一致性2.Zookeeper在选举期间注册服务瘫痪，虽然服务最终会恢复，但选举期间不可用3.eureka的自我保护机制，会导致一个结果就是不会再从注册列表移除因长时间没收到心跳而过期的服务。依然能接受新服务的注册和查询请求，但不会被同步到其他节点。不会服务瘫痪4.Zookeeper有Leader和Follower角色，Eureka各个节点平等5.Zookeeper采用过半数存活原则，Eureka采用自我保护机制解决分区问题6.eureka本质是一个工程，Zookeeper只是一个进程 Eureka和Zookeeper中CAP区别？12345678910CAP理论1.C（Consistency）：数据一致性2.A（Availability）：可用性3.P（Partition Tolerance）：分区容错性当向注册中心查询服务列表时，我们可以容忍注册中心返回的是几分钟以前的注册信息，单不能接受服务直接down掉不可用,服务注册功能对可用性的要求要高于一致性Eureka看明白了这点，因此在设计师就有限保证可用性，Eureka各个节点都是平等的，几个节点挂掉不会影响正常节点的工作，剩余的节点依然可以提供注册和查询服务。而Eureka的客户端在向某个Eureka注册时如果发现连接失败，会自动切换至其他节点，只要有一台Eureka还在，就能保证注册服务可用（保证可用性），只不过查到的信息可能不是最新的（不保证强一致性）,Eureka还有一种自我保护机制Eureka基于AP原则，Eureka可以很好的应对因网络故障导致部分节点失去联系的情况，而不会像Zookeeper 那样使整个注册服务瘫痪Zookeeper基于CP原则，不是强一致的，并且选举时间在30-120秒在选举期间集群不可用，服务瘫痪作为注册中心，最主要得到就是保证可用性，可以接受短时间内数据不一致的情况个人觉得Eureka做i为单纯的服务注册中心来说比Zookeeper更专业一点 Eureka的自我保护机制？123456Eureka还有一种自我保护机制，如果在15分钟内超过85%的节点都没有正常的心跳，那么Eureka就认为客户端与注册中心出现了网络故障当Eureka Server 节点在短时间内丢失了过多实例的连接时（比如网络故障或频繁启动关闭客户端）节点会进入自我保护模式，保护注册信息，不再删除注册数据，故障恢复时，自动退出自我保护模式。1、Eureka不再从注册列表中溢出因为长时间没有收到心跳而应该过期的服务2、Eureka仍然能够接受新服务的注册和查询请求，但是不会被同步到其他节点上（即保证当前节点依然可用）3、当网络稳定是，当前实例新的注册信息会被同步到其他节点中因此，Eureka可以很好的应对网络故障导致部分节点失去联系的情况，而不会像zookeeper那样使整个注册服务瘫痪 Ribbon和Feign的区别？12341.Ribbon都是调用其他服务的，但方式不同2.启动类注解不同，Ribbon是@RibbonClient feign的是@EnableFeignClients3.服务指定的位置不同，Ribbon是在@RibbonClient注解上声明，Feign则是在定义抽象方法的接口中使用@FeignClient声明4.调用方式不同，Ribbon需要自己构建http请求，模拟http请求然后使用RestTemplate发送给其他服务，步骤相当繁琐。Feign需要将调用的方法定义成抽象方法即可 什么是Spring Cloud Bus?123spring cloud bus 将分布式的节点用轻量的消息代理连接起来，可用于广播配置文件的更改或者服务直接的通讯和监控如果修改了配置文件，发送一次请求，所有的客户端便会重新读取配置文件 springcloud断路器作用?1234当一个服务调用另一个服务由于网络原因或自身原因出现问题，调用者就会等待被调用者的响应 当更多的服务请求到这些资源导致更多的请求等待，发生连锁效应（雪崩效应）打开:一段时间内 达到一定的次数无法调用 并且多次监测没有恢复的迹象 断路器完全打开 那么下次请求就不会请求到该服务半开:短时间内 有恢复迹象 断路器会将部分请求发给该服务，正常调用时 断路器关闭关闭：当服务一直处于正常状态 能正常调用 什么是SpringCloudConfig?123在分布式系统中，由于服务数量巨多，为了方便服务配置文件统一管理，实时更新，所以需要分布式配置中心组件在Spring Cloud中，有分布式配置中心组件spring cloud config ，它支持配置服务放在配置服务的内存中（即本地），也支持放在远程Git仓库中在spring cloud config 组件中，分两个角色，一是config server，二是config client]]></content>
      <categories>
        <category>SpringCloud</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>SpringBoot</tag>
        <tag>SpringCloud</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux常用命令详解]]></title>
    <url>%2Fblog%2F2019%2F11%2F26%2FLinux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3%2F</url>
    <content type="text"><![CDATA[Linux常用命令详解 关机及重启1234567shutdown -h now 立刻关机shutdown -h 5 5分钟后关机poweroff 立刻关机shutdown -r nowshutdown -r 5 5分钟后重启reboot 立刻重启 帮助命令12shutdown --help：ifconfig --help：查看网卡信息 目录操作指令12345678910111213141516171819cd 切换目录ls 目录查看mkdir aaa 创建目录rm -f aaa 删除当前目录下的aaa目录（不询问）rm -r aaa 递归删除当前下的aaa目录rm -rf aaa 递归删除当前目录下的aaa目录（不询问，谨慎使用，避免全部删除）rm可以删除文件、目录、压缩包、mv 移动文件或者重命名文件或目录cp -r 目录名称 目录拷贝的目标位置 -r代表递归find 目录 参数 文件名称 搜索目录 find /usr/tmp -name &apos;a*&apos; touch aaa.txt 创建文件pwd 查看当前目录vim及vi编辑器命令模式底行模式及插入模式cat 文件的查看 看最后一屏more 百分比查看less 翻页查看head 显示文件头数据tail 指定行数或者动态查看echo 创建带有内容的文件 安装下载解压操作123456789101112yum 应用市场安装wegt 加地址 表示下载tar -zvxf-A 新增文件到已压缩文件中-c 新建新压缩文件-r 将新文件添加到已压缩文件的末尾-x 解压缩文件-k 保留原压缩文件-f 待压缩或待解压缩文件-j bzip2格式-z gzip格式-v 显示过程 权限修改123456789101112131415chmod权限分为三种：读（r=4），写（w=2），执行（x=1）可读可执行 rx=5=4+1可读可写 rw=6=4+2可执行可写 wx=3=2+1可读可写可执行 rwx=7=4+1+2常用数字权限-rw------- (600) 只有拥有者有读写权限。-rw-r--r-- (644) 只有拥有者有读写权限；而属组用户和其他用户只有读权限。-rwx------ (700) 只有拥有者有读、写、执行权限。-rwxr-xr-x (755) 拥有者有读、写、执行权限；而属组用户和其他用户只有读、执行权限。-rwx--x--x (711) 拥有者有读、写、执行权限；而属组用户和其他用户只有执行权限。-rw-rw-rw- (666) 所有用户都有文件读、写权限。-rwxrwxrwx (777) 所有用户都有读、写、执行权限。创建sh文件后需要赋予可执行权限 进程命令123456789101112131415161718ps -ef | grep java 查看进程su 默认切换root用户ps -ef 查看所有正在运行的进程kill pid 杀死进程kill -9 pid 强制杀死进程ifconfig 查看你网卡信息ping 查看与某台机器的连接情况netstat 显示网络状态信息netstat -an 查看当前系统接口netstat -an | grep 8080 搜索指定端口8080clear 清屏usermod 修改用户useradd 添加用户userdel 删除用户passwd 修改密码groupadd 添加用户组groupmod 修改用户组groupdel 删除用户组 环境变量路径配置1234/etc/profile java环境变量/etc/sysconfig/network-scripts/ifcfg-eno 网卡配置source /etc/profile 刷新环境变量uname -a 查看系统版本]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java代理模式]]></title>
    <url>%2Fblog%2F2019%2F11%2F14%2FJava%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[Java代理模式 代理模式主要为其他对象提供一种代理以控制这个对象的访问。在某些情况下，一个对象不想或者不能直接引用另一个对象，而代理对象可以在客户端和目标对象之间起到中介的作用，好比你将一些繁琐的事情交给第三方去管理，那么第三方就是你的代理，其他人只会去找这个代理，而不会去找你，AOP本身就是基于动态代理实现的，所以掌握了代理模式对AOP的学习很有帮助的哦。代理模式的三种种实现方式(静态代理、jdk动态代理、CGLib代理) 静态代理代理类在程序运行前就已经存在,那么这种代理方式被成为静态代理(接口、实现类、代理类都存在) jdk动态代理代理类在程序运行时创建的代理方式被称为 动态代理如果目标对象实现了接口,采用JDK的动态代理(接口、实现类存在，代理类运行后创建)如果目标对象没有实现接口,必须采用cglib动态代理(实现类，代理类运行后创建) CGLib代理目标类不能为final,目标对象的方法如果为final / static，那么就不会被拦截，即不会执行目标对象额外的业务方法 区别静态代理：(1)可以做到在不修改目标对象的功能前提下,对目标功能扩展(2)代理对象需要与目标对象实现一样的接口,所以会有很多代理类,类太多.同时,一旦接口增加方法,目标对象与代理对象都要维护JDK动态代理:(1)代理对象不需要实现接口, 利用JDK的API,动态的在内存中构建代理对象(需要我们指定创建代理对象/目标对象实现的接口的类型)(2)目标对象一定要实现接口,否则不能用动态代理CGLib代理:(1)静态代理和动态代理模式都是要求目标对象是实现一个接口的目标对象,但是有时候目标对象只是一个单独的对象,并没有实现任何的接口,这个时候就可以使用以目标对象类实现代理 JDK动态代理使用Java的反射技术生成代理类，只能代理实现了接口的类，没有实现接口的类不能实现动态代理，CGLib会在运行时动态的生成一个被代理类的子类，子类重写了被代理类中所有非final的方法，在子类中采用方法拦截的技术拦截所有父类方法的调用，不需要被代理类对象实现接口，从而CGLIB动态代理效率比Jdk动态代理反射技术效率要高]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java8中抽象类与接口的异同]]></title>
    <url>%2Fblog%2F2019%2F11%2F06%2FJava8%E4%B8%AD%E6%8A%BD%E8%B1%A1%E7%B1%BB%E4%B8%8E%E6%8E%A5%E5%8F%A3%E7%9A%84%E5%BC%82%E5%90%8C%2F</url>
    <content type="text"><![CDATA[Java 8中抽象类与接口的异同 相同点123(1)都是抽象类型；(2)都可以有实现方法（以前接口不行）；(3)都可以不需要实现类或者继承者去实现所有方法,以前不行，现在接口中默认方法不需要实现者实现 不同点12345(1)抽象类不可以多重继承，接口可以（无论是多重类型继承还是多重行为继承）；(2)抽象类和接口所反映出的设计理念不同。 其实抽象类表示的是&quot;is-a&quot;关系，接口表示的是&quot;like-a&quot;关系；(3)接口中定义的变量默认是public static final 型，且必须给其初值，所以实现类中不能重新定义，也不能改变其值； 抽象类中的变量默认是 friendly 型，其值可以在子类中重新定义，也可以重新赋值。 接口实例12345678910111213141516171819202122232425262728293031323334353637383940414243444546public interface InterfaceClass &#123; //接口中的常量定义（必须为其赋值） public static final String s = &quot;1&quot;; //抽象方法的定义（没有具体的实现） public abstract void query(); //没有构造方法 //java8新增的默认方法(默认方法实现类可以实现也可以不实现，不实现也能直接调用接口的默认方法) default void default1() &#123; System.out.println(&quot;测试默认方法&quot;); &#125; //默认方法的重载 default void default1(String a) &#123; System.out.println(&quot;测试默认方法111&quot;); &#125; //包含方法的实现的静态方法（实现类不能重写此方法） static String static1() &#123; System.out.println(&quot;这是一个静态的方法！！！&quot;); return &quot;这是一个静态的方法！！！&quot;; &#125; public static void main(String[] args) &#123; testInterface test = new testInterface(); System.out.println(test.s); test.default1(); test.default1(&quot;ss&quot;); System.out.println(InterfaceClass.s); System.out.print(InterfaceClass.static1()); &#125;&#125;class testInterface implements InterfaceClass&#123; @Override public void query() &#123; &#125; @Override public void default1() &#123; System.out.println(&quot;子类自我实现默认方法&quot;); &#125; @Override public void default1(String a) &#123; InterfaceClass.super.default1(a); &#125;&#125; 抽象实例12345678910111213141516171819202122232425262728293031323334353637383940public abstract class AbstractClass &#123; &#123; //构造代码块 &#125; static&#123; //可以有静态代码块 &#125; //抽象类中变量的定义，默认为friendly类型，默认类型，只允许包内访问 String s = &quot;1&quot;; //可以有构造方法 public AbstractClass() &#123;&#125; //抽象方法使用public abstract、protected abstract、abstract修饰 public abstract void query(); protected abstract void query1(); abstract void query2(); //包含普通方法 public void ss() &#123;&#125;&#125;class testAbstract extends AbstractClass&#123; @Override public void query() &#123; &#125; @Override protected void query1() &#123; &#125; @Override public void query2() &#123; &#125; @Override public void ss() &#123; super.ss(); &#125;&#125;]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JAVA基础面试题四]]></title>
    <url>%2Fblog%2F2019%2F10%2F10%2FJAVA%E5%9F%BA%E7%A1%80%E9%9D%A2%E8%AF%95%E9%A2%98%E5%9B%9B%2F</url>
    <content type="text"><![CDATA[本文主要JAVA基础面试题四 Class.forName的作用?为什么要用?12345678910111213141516171819202122Class.forName(&quot;&quot;)返回的是类Class.forName(&quot;&quot;).newInstance()返回的是objectA a = (A)Class.forName(&quot;pacage.A&quot;).newInstance(); 动态加载和创建Class 对象，比如想根据用户输入的字符串来创建对象。jvm会执行静态代码段，你要记住一个概念，静态代码是和class绑定的，class装载成功就表示执行了你的静态代码了。而且以后不会再走这段静态代码了。第一是CLASSPATH下指定名字的.class文件加载到Java虚拟机内存中第二是初始化这个类一.首先你要明白在java里面任何class都要装载在虚拟机上才能运行。 1.forName这句话就是装载类用的(new是根据加载到内存中的类创建一个实例，要分清楚)。 2.至于什么时候用，可以考虑一下这个问题，给你一个字符串变量，它代表一个类的包名和类名，你怎么实例化它？ A a = (A)Class.forName(&quot;pacage.A&quot;).newInstance();这和 A a =new A();是一样的效果。 3.jvm在装载类时会执行类的静态代码段，要记住静态代码是和class绑定的，class装载成功就表示执行了你的静态代码了，而且以后不会再执行这段静态代码了。 4.Class.forName(xxx.xx.xx)的作用是要求JVM查找并加载指定的类，也就是说JVM会执行该类的静态代码段。 5. 动态加载和创建Class 对象，比如想根据用户输入的字符串来创建对象二.在初始化一个类，生成一个实例的时候，newInstance()方法和new关键字除了一个是方法，一个是关键字外，最主要有什么区别？ 1.它们的区别在于创建对象的方式不一样，前者是使用类加载机制，后者是创建一个新类。 2.那么为什么会有两种创建对象方式？ 这主要考虑到软件的可伸缩、可扩展和可重用等软件设计思想。 3.从JVM的角度看，我们使用关键字new创建一个类的时候，这个类可以没有被加载。 但是使用newInstance()方法的时候，必须保证这个类已经加载且这个类已经连接了。三.最后用最简单的描述来区分new关键字和newInstance()方法的区别： 1. newInstance: 弱类型。低效率。只能调用无参构造。 2. new: 强类型。相对高效。能调用任何public构造。 Servlet介绍？(单例多线程)1234567891011servlet的生命周期由servlet容器控制，该容器创建servlet的实例。servlet的生命周期就是指servlet实例在创建之后响应客户端请求直至销毁的全过程。servlet实例的首次创建取决于servlet的首次调用。servlet接口定义了servlet生命周期的三个方法，这些方法就是init(),service(),destroy().（1）init()方法用来把servlet导入和初始化。这个方法在servlet被预加载或在第一次请求时执行。（2）servlet处理0个或多个请求。servlet对每个方法都用service()方法来处理。（3）当web应用声明servlet被关闭、servlet被销毁、垃圾收集器对资源进行收集时，用destroy()方法来关闭servlet。 高并发、不安全只存在一个servlet、多个线程同时请求实例变量、非线程安全如何做到线程安全？1.实现SingleThreadModel接口2.synchronized关键字加锁lock3.尽量不使用实例变量 Volatile关键字1234Java语言中关键字 volatile 被称作轻量级的 synchronized用volatile修饰的变量，线程在每次使用变量的时候，都会读取变量修改后的最新的值。volatile很容易被误用，用来进行原子性操作，它不能保证多个线程修改的安全性。Java可以使用volatile关键字，确保每个线程对本地变量的访问和修改都直接与主内存交互，而不是与本地线程的工作内存交互的，保证每个线程都能获得最新的值。 ==和equals的区别？123456(1)对于==，比较的是值是否相等 如果作用于基本数据类型的变量，则直接比较其存储的 “值”是否相等； 如果作用于引用类型的变量，则比较的是所指向的对象的地址(2)对于equals方法，注意：equals方法不能作用于基本数据类型的变量，equals继承Object类，比较的是是否是同一个对象 如果没有对equals方法进行重写，则比较的是引用类型的变量所指向的对象的地址； 诸如String、Date等类对equals方法进行了重写的话，比较的是所指向的对象的内容。 数组有没有length()方法？string没有lenght()方法？12数据没有length()，但有length属性string有length()方法 服务代理后获取真实ip地址1234java获取客户端IP地址的方法为request.getRemoteAddr()。request.getHeader(&quot;x-forwarded-for&quot;)request.getHeader(&quot;Proxy-Client-IP&quot;)request.getHeader(&quot;WL-Proxy-Client-IP&quot;); Oracle和Mysql的区别123451、关系型数据库2、Oracle收费、Mysql开源3、Oracle一个实例对应多个用户 Mysql一个用户对应多个数据库4、与Oracle相比，MySQL没有表空间，角色管理，快照，同义词和包以及自动存储管理。 Vue和JQuery区别12341、Vue比JQuery减少了 DOM 操作2、Vue支持双向数据绑定及组件化3、jquery 是javacript库，封装了一些js常用的方法。（动态效果） vue 是一个前端框架，vue有成熟的生态链，mvvm模式，是一个真正的web框架（单页面开发）。 JWT和Token区别12345678token一个字符串。每次客户端保存localstore，每次请求放入到http head请求头中进行访问（Bearer），服务器查询数据库验证信息是否正确相同： 都是访问资源的令牌， 都可以记录用户信息，都是只有验证成功后区别：​服务端验证客户端发来的token信息要进行数据的查询操作；JWT验证客户端发来的token信息就不用， 在服务端使用密钥校验就可以，不用数据库的查询。JWT（请求头【类型jwt+hs256算法加密】、载荷【预定义声明+自定义声明userid+签名】、签名）base64请求头+base64载荷+签名【(base64请求头+base64载荷)hash算法】组成两个点的字符串（secret解密） shell脚本12启动jar包nginx日志切割 Git冲突处理方案12当Git merge无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。把修改的文件复制出来、先pull在修改。]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Web相关优化]]></title>
    <url>%2Fblog%2F2019%2F10%2F09%2FWeb%E7%9B%B8%E5%85%B3%E4%BC%98%E5%8C%96%2F</url>
    <content type="text"><![CDATA[Web相关优化 表现层页面的优化12345678尽量使用静态HTML页面不使用FLASH、图片尽量使用DIV、不将整个页面放入TABLE中将javascript放入到js文件中使用IFrame嵌套另一个页面，和主页面分开加载，不影响页面加载速度CSS放在头部、JS脚本放在底部加载对于访问量高的页面，设计缓存方案，经常访问的数据缓存起来优化重要的公共模块、高度集成提示信息 缓存1234redis分布式缓存ehcache、oscache缓存hibernate二级缓存前端静态js、css、样式文件缓存 数据库的优化12数据库的优化(读写分离、分区、分表、缓存、索引、视图、存储过程等)sql优化 服务器的优化123456789101112131415161718192021外部环境优化：（1）java虚拟机的优化、尽量采用最新的版本、设置java虚拟机的内存参数服务器自身的优化：（1）Tomcat 例如：设置线程数量、JSP编译速度、防止恶意攻击、压缩 1、优化Tomcat的JVM环境内存优化 2、优化tomcat线程池 3、禁用DNS查询 enableLookups=&quot;false&quot; 4、session过期时间 5、Apr插件提高Tomcat性能 6、压缩 7、文字转码UTF-8（2）Nginx 1、expires缓存模块、网页缓存 2、gzip压缩模块 3、隐藏版本号 4、日志切割 5、设置连接超时、进程数、配置防盗链 6、动静分离 7、代理http跳转https这块配置 8、nginx添加用户组 9、最多可以打开文件数 硬件优化1234负载均衡：是大型网站解决高负荷访问和大量并发请求采用的最终解决办法与图片服务器分离：设置独立的图片服务器，可以降低web应用的服务器的压力，保证系统不会因为图片问题二奔溃(优化) 减少外部http协议CDN加速12CDN的全称是Content Delivery Network，即内容分发网络。其基本思路是尽可能避开互联网上有可能影响数据传输速度和稳定性的瓶颈和环节，使内容传输的更快、更稳定。简单的来说，就是把原服务器上数据复制到其他服务器上，用户访问时，那台服务器近访问到的就是那台服务器上的数据。CDN加速优点是成本低，速度快。适合访问量比较大的网站。 echarts简单优化？12345678模块复用缓存关闭动画（3D）SQL优化可选择 dataZoomtype为line时可选择sampling懒加载（逐步加载）echarts模块或图片lazyload清理不用的图表、clear和dispose]]></content>
      <categories>
        <category>WEB</category>
      </categories>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JAVA基础面试题三]]></title>
    <url>%2Fblog%2F2019%2F10%2F07%2FJAVA%E5%9F%BA%E7%A1%80%E9%9D%A2%E8%AF%95%E9%A2%98%E4%B8%89%2F</url>
    <content type="text"><![CDATA[本文主要JAVA基础面试题三 JDK、JRE、JVM三者间的关系？123JDK:Java运行环境JRE、Java工具和Java基础类库。JRE:运行JAVA程序所必须的环境的集合，包含JVM标准实现及Java核心类库。JVM:整个java实现跨平台的最核心的部分，能够运行以Java语言写作的软件程序。 &amp; 和 &amp;&amp; 的区别？12345678910相同点：&amp;和&amp;&amp;都可以用作逻辑与的运算符，表示逻辑与（and）。不同点：(1)&amp;&amp;具有短路的功能，而&amp;不具备短路功能。(2)当&amp;运算符两边的表达式的结果都为true时，整个运算结果才为true。而&amp;&amp;运算符第一个表达式为false时，则结果为false，不再计算第二个表达式。(3)&amp;还可以用作位运算符，当&amp;操作符两边的表达式不是boolean类型时，&amp;表示按位与操作，我们通常使用0x0f来与一个整数进行&amp;运算，来获取该整数的最低4个bit位，例如：0x31 &amp; 0x0f的结果为0x01。5 &amp; 4 4000001010000010000000100 a+=b与a=a+b的区别？123456(1)byte、short类型的数相加、都会提升为int类型(2)=+赋值运算符 自动类型转换，也称隐式类型转换，是指不需要书写代码，由系统自动完成的类型转换。从存储范围小的类型到存储范围大的类型。具体规则为：short(char)→int→long→float→double+算数运算符 如何不使用第三个变量，交换变量a，b的值？12345a = a + b;b = a - b;a = a - b;a = b + (b = a)0; 求最大公约数？123456789//求出两个数字之间的小值int min = a &lt; b ? a : b;for (int i = min;i &gt;= 1;i --) &#123; if (a % i == 0 &amp;&amp; b % i == 0) &#123; System.out.println(&quot;最大公约数是：&quot; + i); break; &#125;&#125; 字符流和字节流的区别?1234字符流：用于处理文字和字符的 流。操作完成后不关闭流，数据无法传递。采用Unicode编码，由字符组成，1字符=2字节。字节流：文字以外的都可以用。操作完成后不需关闭流，也可以传递数据。采用ASCII编码,按字节处理。字符流有缓冲区，将数据接受于缓冲区，达到区的极限（通过手动 1.colse 2.flush）就会进入文件中，打开文件次数少。字节流：每传一次数据就会打开一次文件，打开数据次数多。占用内存。 类和对象的区别？123java面对对象开发。类是对象的抽象，而对象是类的具体实例。类的实例化结果就是对象。 drop、truncate、delete区别？123drop：将表所占用的空间全释放掉。truncate：不会触发触发器、执行速度快、初始化索引和表、不能回滚。只能对tabledelete：每次删除一行触发触发器，记入日志保存、可以添加条件、必须commit、存在缓存区、可以回退。可以是table和view。 JS中3种弹出窗口函数区别分析？123window.alert：只有一个显示警告框的信息,无返回值；window.confirm：就一个参数即提示信息，有返回值 true或false；window.prompt：有两个参数，第一个显示提示信息，第二个显示输入框的默认值； 内存溢出和内存泄漏的区别？12345678910内存溢出：系统已经不能再分配出你所需要的空间，比如你需要100M的空间，系统只剩90M了，这就叫内存溢出。内存泄漏：意思就是你用资源的时候为他开辟了一段空间，当你用完时忘记释放资源了，这时内存还被占用着，一次没关系，但是内存泄漏次数多了就会导致内存溢出。(1)for缓存、while(true)代码中存在死循环或循环产生过多重复的对象实体； (2)使用完后没有关闭资源；(3)重复创建对象；(4)内存中加载的数据量过于庞大，如一次从数据库取出过多数据；(5)启动参数内存值设定的过小；(6)使用的第三方软件中的BUG；]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JAVA基础面试题二]]></title>
    <url>%2Fblog%2F2019%2F10%2F07%2FJAVA%E5%9F%BA%E7%A1%80%E9%9D%A2%E8%AF%95%E9%A2%98%E4%BA%8C%2F</url>
    <content type="text"><![CDATA[本文主要JAVA基础面试题二（二叉树） 树的介绍？1234(1)、每个结点有零个或多个子节点(2)、设有父节点的结点称为根节点(3)、每一个非根结点有且只有一个父节点(4)、除了根节点外，每个子结点可以分为多个不相交的子树 二叉树的介绍？1234(1)、二叉树是每个结点最多有两个子树的结构(2)、基本形态：可以是空集、根可以有空的左右树、或者左、右树(3)、每一个非根结点有且只有一个父节点(4)、除了根节点外，每个子结点可以分为多个不相交的子树 二叉查找树有哪些特性？123(1)、左子树上所有的节点的值均小于或等于他的根节点的值(2)、右子数上所有的节点的值均大于或等于他的根节点的值(3)、左右子树也一定分别为二叉排序树 红黑树的特性？(自平衡二叉查找树,自平衡：左旋、右旋和变色)红黑树就是一种平衡的二叉查找树，说他平衡的意思是他不会变成“瘸子”，左腿特别长或者右腿特别长。除了符合二叉查找树的特性之外，还具体下列的特性：12345(1)、节点是红色或者黑色(2)、根节点是黑色(3)、每个叶子的节点都是黑色的空节点（NULL）(4)、每个红色节点的两个子节点都是黑色的。(5)、从任意节点到其每个叶子的所有路径都包含相同的黑色节点。]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JAVA基础面试题一]]></title>
    <url>%2Fblog%2F2019%2F10%2F04%2FJAVA%E5%9F%BA%E7%A1%80%E9%9D%A2%E8%AF%95%E9%A2%98%E4%B8%80%2F</url>
    <content type="text"><![CDATA[本文主要JAVA基础面试题一 如何跳出的多重嵌套循环？12345678910111213141516171819202122232425（1）在Java中，要想跳出多重循环，可以在外面的循环语句前定义一个标号public static void method1()&#123; ok:for(int i=0;i&lt;10;i++)&#123; for(int j=0;j&lt;10;j++)&#123; System.out.println(&quot;i=&quot;+i+&quot;,j=&quot;+j); if(j==5)&#123; break ok;//跳到循环外的ok出，即终止整个循环 &#125; &#125; &#125;&#125;（2）也可以在里层循环体的代码中使用带有标号的break语句，即可跳出外层循环public static void method2()&#123; int[][] arr = &#123;&#123;1,2,3&#125;,&#123;4,5,6,7&#125;,&#123;9&#125;&#125;; boolean found = false; for(int i=0;i&lt;arr.length &amp;&amp; !found;i++)&#123; for(int j=0;j&lt;arr[i].length;j++)&#123; System.out.println(&quot;i=&quot;+i+&quot;,j=&quot;+j); if(arr[i][j]==5)&#123; found = true;//找到5，使外层循环判断条件变为false则终止整个循环 break;//跳出当前循环 &#125; &#125; &#125;&#125; 静态变量和实例变量的区别？1234（1）：首先在语法定义上区别：静态变量前面要加static，实例变量不用（2）：在程序运行时：实例变量输入对象的属性，必须创建了实例对象（如 new）才会被分配空间，才可以使用实例变量， 静态变量不属于某个实例对象，而是属于类，也叫类变量，只要程序加载了类的字节码，不用创建任何实例对象就会被分配空间，就可以被使用（3）：总之，实例变量必须创建对象后才可以通过这个对象来使用，静态变量则可以直接使用类名来引用。 堆和栈的区别在什么地方？123456堆（一般存放对象本身，block的copy等）（1）Java的堆是一个运行时数据区，类的对象从堆中分配空间。这些对象通过new等指令建立，通过垃圾回收器来销毁。（2）堆的优势是可以动态地分配内存空间，需要多少内存空间不必事先告诉编译器，因为它是在运行时动态分配的。但缺点是，由于需要在运行时动态分配内存，所以存取速度较慢。栈:后进先出（一般存储基本数据类型，对象的地址）（1）栈中主要存放一些基本数据类型的变量（byte，short，int，long，float，double，boolean，char）和对象的引用。（2）栈的优势是，存取速度比堆快，栈数据可以共享。但缺点是，存放在栈中的数据占用多少内存空间需要在编译时确定下来，缺乏灵活性。 类的实例化顺序?12345678父类静态代变量父类静态代码块子类静态变量子类静态代码块父类非静态变量（父类实例成员变量）父类构造函数子类非静态变量（子类实例成员变量）子类构造函数 集合区别？ http,https协议？123456789HTTP：是互联网上应用最为广泛的一种网络协议，是一个客户端和服务器端请求和应答的标准（TCP），用于从WWW服务器传输超文本到本地浏览器的传输协议，它可以使浏览器更加高效，使网络传输减少。HTTPS：是以安全为目标的HTTP通道，简单讲是HTTP的安全版，即HTTP下加入SSL层，HTTPS的安全基础是SSL，因此加密的详细内容就需要SSL。区别：1、https协议需要到ca申请证书，一般免费证书较少，因而需要一定费用。2、http是超文本传输协议，信息是明文传输，https则是具有安全性的ssl加密传输协议。3、http和https使用的是完全不同的连接方式，用的端口也不一样，前者是80，后者是443。4、http的连接很简单，是无状态的；HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，比http协议安全。 常见到的runtime exception？12345678空指针：NullPointerException类型转换失败：ClassCastException文件找不到：FileNotFoundException数组下标越界：ArrayIndexOutOfBoundsException类找不到：ClassNotFoundException字符串转换为数字异常：NumberFormatException方法未找到异常：NoSuchMethodException字符串索引越界异常：StringIndexOutOfBoundsException 类型转换1Java的基本数据类型转换规则，大的数据类型转换为小的数据类型需要强制转换，反之可以自动转换 char能存贮一个中文汉字?为什么1char型变量是用来存储Unicode编码的字符的，unicode编码字符集中包含了汉字，所以，char型变量中当然可以存储汉字啦。不过，如果某个特殊的汉字没有被包含在unicode编码字符集中，那么，这个char型变量中就不能存储这个特殊汉字。补充说明：unicode编码占用两个字节，所以，char类型的变量也是占用两个字节。 abstractclass和interface区别]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Nginx日志切割]]></title>
    <url>%2Fblog%2F2019%2F07%2F08%2FNginx%E6%97%A5%E5%BF%97%E5%88%87%E5%89%B2%2F</url>
    <content type="text"><![CDATA[Nginx日志切割nginx版本：1.8.1nginx目录：/usr/local/nginx/nginx日志：/usr/local/nginx/logs acces.log #访问量 error.log #错误日志 pid.log #NGINX进程ID 1234# 获取昨天的access日志mv access.log &apos;date +%F -d -1day&apos;_access.log# 重新打开日志文件/usr/local/nginx/sbin/nginx -s reopen 完整代码/usr/local/nginx/logs新建backup.sh命令并且vim编辑/usr/local/nginx/logs/新建oldLogs文件夹1234567891011121314#!/bin/bash# 备份日志文件夹（旧的日志）LOGS_PATH=/usr/local/nginx/logs/oldLogs# 当前日志文件夹（新的日志）CUR_LOGS_PATH=/usr/local/nginx/logs# 昨天的日期YESTERDAY=$(date +%F -d -1day)# 备份access.logmv $CUR_LOGS_PATH/access.log $LOGS_PATH/$&#123;YESTERDAY&#125;_access.log# 备份error.logmv $CUR_LOGS_PATH/error.log $LOGS_PATH/$&#123;YESTERDAY&#125;_error.log# 重新打开日志文件kill -USR1 $(cat /usr/local/nginx/logs/nginx.pid)# USR1 通常被用来告知应用程序重载配置文件 执行sh backup.sh即可在oldLogs下生成昨天日志（完成） 定时任务自动执行shell脚本crontab -e #编辑定时任务10 0 * * * /bin/bash /usr/local/nginx/logs/backup.sh crontab -l #查看编辑任务0 0 * * *每天执行一次生成昨天的日志]]></content>
      <categories>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Nginx配置Https遇到的问题]]></title>
    <url>%2Fblog%2F2019%2F07%2F06%2FNginx%E9%85%8D%E7%BD%AEHttps%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[Nginx配置Https 开启例外443端口 Nginx如果未开启SSL模块，配置Https时提示错误1nginx: [emerg] the &quot;ssl&quot; parameter requires ngx_http_ssl_module in /usr/local/nginx/conf/nginx.conf:37 nginx缺少http_ssl_module模块，编译安装的时候带上–with-http_ssl_module配置就行了 Nginx开启SSL模块（重新编译）Nginx源码包1cd /usr/local/nginx-1.8.1 查看Nginx已安装的模块1/usr/local/nginx/sbin/nginx -V 重新编译安装nginx（必须停止Nginx）1234567891011121314151617# 停止Nginx/usr/local/nginx/sbin/nginx -s stop# 重新编译Nginx./configure --prefix=/usr/local/nginx --with-http_stub_status_module --with-http_ssl_module# Nginx编译(不要进行make install，否则就是覆盖安装Nginx)make# 然后备份原有已安装好的nginxcp /usr/local/nginx/sbin/nginx /usr/local/nginx/sbin/nginx.bak# 然后将刚刚编译好的nginx覆盖掉原有的nginx（这个时候nginx要停止状态）cp ./objs/nginx /usr/local/nginx/sbin/# 然后启动nginx，仍可以通过命令查看是否已经加入成功/usr/local/nginx/sbin/nginx -V Nginx配置Https123456789101112131415161718192021server &#123; listen 80; server_name web.tset.com; # 改为绑定证书的域名 return 301 https://$server_name$request_uri; # 重定向https&#125; server &#123; listen 443; server_name web.tset.com; # 改为绑定证书的域名 ssl on; # Nginx SSL性能调优 ssl_certificate cert/web.tset.com.pem; # 改为自己申请得到的 crt 文件的名称(新建cert目录) ssl_certificate_key cert/web.tset.com.key; # 改为自己申请得到的 key 文件的名称(新建cert目录) ssl_session_timeout 5m; ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4; ssl_protocols TLSv1 TLSv1.1 TLSv1.2; ssl_prefer_server_ciphers on; location / &#123; root html; index index.html index.htm; &#125;&#125; 重启Nginx1/usr/local/nginx/sbin/nginx -s reload 阿里云开启服务器443端口及80端口（https默认端口）阿里云控制台=》云计算基础服务=》云服务器ECS=》网络和安全=》安全组，没有安全组的创建一个安全组，有的直接选择相应安全组，点击配置规则=》添加安全组规则（把80端口和443端口添加进安全组，授权对象填0.0.0.0/0） 阿里云申请SSL证书教大家怎么申请阿里云的免费版 SSL证书 配置完成！！！]]></content>
      <categories>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
        <tag>SSL</tag>
        <tag>HTTPS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux常用命令]]></title>
    <url>%2Fblog%2F2019%2F06%2F24%2FLinux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[Linux常用命令 12345netstat -tunlp|grep 端口号 #查看指定端口被哪个进程占用的情况ps -ef|grep nginx #查看进程号kill -9 pid #强制杀死进程nohup java -jar aaa.jar &gt; spring.log &amp; #后台启动jar包打印日志到springtail -f spring.log #动态查看日志 登录mysql查看默认字符集1show variables like &apos;%char%&apos;; mysql乱码123456789vim /etc/mysql/my.cnf [client]default-character-set=utf8[mysqld]default-storage-engine=INNODBcharacter-set-server=utf8collation-server=utf8_general_ci 重启msyql1service mysql restart nginx命令12nginx -s reload #重新启动nginx -s stop #停止]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Jquery data()方法]]></title>
    <url>%2Fblog%2F2019%2F05%2F22%2FJquery-data-%E6%96%B9%E6%B3%95%2F</url>
    <content type="text"><![CDATA[jQuery.extend 与 jQuery.fn.extend 的区别在于：jQuery.extend 是在 jQuery 这个构造函数上扩展的方法，调用的时候写成 $.xxx 或者 jQuery.xxxjQuery.fn.extend 是在 jQuery 原型上扩展的方法，方法被所有 jQuery 对象共享，调用的时候为 $().xxx$.data()可以用来设置DOM元素的data-属性，也可以用来获取DOM元素的data-的值Jquery.data()方法作用：给普通对象或DOM元素附加（及获取） 数据。12345678910111213141516171819202122232425&lt;script src=&quot;http://libs.baidu.com/jquery/1.9.0/jquery.js&quot;&gt;&lt;/script&gt;&lt;div id=&apos;testDiv&apos; data-test=&quot;111&quot;&gt;&lt;/div&gt;&lt;script&gt; $(&apos;#testDiv&apos;).data(&quot;test1&quot;,&quot;1111&quot;)&lt;/script&gt;&lt;div&gt; 存储的值为 &lt;span&gt;&lt;/span&gt; 和 &lt;span&gt;&lt;/span&gt;&lt;/div&gt;&lt;script&gt;$(function () &#123; var div = $( &quot;div&quot; )[ 0 ]; jQuery.data( div, &quot;test2&quot;, &#123; first: 16, last: &quot;pizza!&quot; &#125;); $( &quot;span:first&quot; ).text( jQuery.data( div, &quot;test2&quot; ).first ); $( &quot;span:last&quot; ).text( jQuery.data( div, &quot;test2&quot; ).last ); console.dir($( &quot;span:last&quot; ));&#125;)var obj = &#123;&#125;;jQuery.data(obj, &apos;name&apos;, &apos;王麻子&apos;);&lt;/script&gt; 源码解读12345678910111213141516171819202122232425262728$ = function() &#123; var expando = &quot;jQuery&quot; + (&quot;1.6&quot; + Math.random()).replace(/\D/g, &apos;&apos;); function getData(cache, name) &#123; return cache[name]; &#125; function setData(cache, name, value) &#123; cache[name] = value; &#125; function getCache(obj) &#123; obj[expando] = obj[expando] || &#123;&#125;; return obj[expando]; &#125; return &#123; data : function(obj, name, value) &#123; var cache = getCache(obj); if (value === undefined) &#123; return getData(cache, name); &#125; else &#123; setData(cache, name, value); &#125; &#125; &#125; &#125;();]]></content>
      <categories>
        <category>Jquery</category>
      </categories>
      <tags>
        <tag>Jquery</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[java matcher中find,matches,lookingAt方法的区别]]></title>
    <url>%2Fblog%2F2019%2F05%2F13%2Fjava-matcher%E4%B8%ADfind-matches-lookingAt%E6%96%B9%E6%B3%95%E7%9A%84%E5%8C%BA%E5%88%AB%2F</url>
    <content type="text"><![CDATA[在Matcher类中有matches、lookingAt和find都是匹配目标的方法，但容易混淆，整理它们的区别如下： matches:整个匹配，只有整个字符序列完全匹配成功，才返回True，否则返回False。但如果前部分匹配成功，将移动下次匹配的位置。 lookingAt:部分匹配，总是从第一个字符进行匹配,匹配成功了不再继续匹配，匹配失败了,也不继续匹配。 find:部分匹配，从当前位置开始匹配，找到一个匹配的子串，将移动下次匹配的位置。 reset:给当前的Matcher对象配上个新的目标，目标是就该方法的参数；如果不给参数，reset会把Matcher设到当前字符串的开始处。12345678910111213141516171819202122232425262728Pattern pattern = Pattern.compile(&quot;\\d&#123;3,5&#125;&quot;);String charSequence = &quot;123-34345-234-00&quot;;Matcher matcher = pattern.matcher(charSequence);//虽然匹配失败，由于charSequence里面的&quot;123&quot;和pattern是匹配的//下次的匹配从位置4开始print(matcher.matches()); /*false*///测试匹配位置matcher.find();print(matcher.start()); /*4*///使用reset方法重置匹配位置(从0开始)matcher.reset();//第一次find匹配以及匹配的目标和匹配的起始位置print(matcher.find()); /*true*/print(matcher.group()+&quot; - &quot;+matcher.start()); /*123---0*///第二次find匹配以及匹配的目标和匹配的起始位置print(matcher.find()); /*true*/print(matcher.group()+&quot; - &quot;+matcher.start()); /*34345---4*///第一次lookingAt匹配以及匹配的目标和匹配的起始位置print(matcher.lookingAt()); /*true*/print(matcher.group()+&quot; - &quot;+matcher.start()); /*123---0*///第二次lookingAt匹配以及匹配的目标和匹配的起始位置print(matcher.lookingAt()); /*true*/print(matcher.group()+&quot; - &quot;+matcher.start()); /*123---0*/]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>matcher</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Nginx+Tomcat+Redis（负载均衡+session共享+动静分离）案例]]></title>
    <url>%2Fblog%2F2019%2F04%2F29%2FNginx-Tomcat-Redis%EF%BC%88%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1-session%E5%85%B1%E4%BA%AB-%E5%8A%A8%E9%9D%99%E5%88%86%E7%A6%BB%EF%BC%89%E6%A1%88%E4%BE%8B%2F</url>
    <content type="text"><![CDATA[今天整合了一些资源，做了一个Nginx+Tomcat+Redis（负载均衡+session共享+动静分离）完整案例，使部署的web项目能够承载较大的访问压力，Nginx实现负载均衡及动静分离，并使用Redis实现session共享。 警告注意redis实现session共享，需要三个jar包（如果报错就是版本不符合，放入tomcat文件夹下的lib中）tomcat-redis-session-manager1.2.jarcommons-pool2-2.4.1.jarjedis-2.6.2.jar 完整步骤Tomcat集群复制多个tomcat文件，修改server.xml，修改其中的8005、8080、8009端口号（nginx和tomcat解压路径最好再同一目录D:/User/nginxTest）在多个tomcat的webapps下新建nginx文件夹，在nginx下新建index.jsp(多个jsp修改&lt;h2&gt;Nginx动静分离2&lt;/h2&gt;)，代码如下123456789101112131415161718192021222324252627&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=utf-8&quot; pageEncoding=&quot;utf-8&quot;%&gt;&lt;!DOCTYPE html&gt;&lt;head&gt; &lt;link href=&quot;/nginx/css/index.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot; /&gt; &lt;script type=&quot;text/javascript&quot; src=&quot;/nginx/js/index.js&quot;&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;h2&gt;Nginx动静分离&lt;/h2&gt;&lt;% out.println(&quot;[&quot;+request.getLocalAddr()+&quot;:&quot; +request.getLocalPort()+&quot;]&quot; + &quot;&lt;br/&gt;session id:&quot; + session.getId()); %&gt;&lt;!--当前的css、js、图片均来自nginx的静态文件--&gt;&lt;br/&gt;&lt;img alt=&quot;图片&quot; src=&quot;/nginx/img/1.png&quot; style=&quot;width:300px;height:300px&quot;&gt;&lt;br&gt;&lt;% HttpSession mySession = request.getSession(false); if(mySession.getAttribute(&quot;appname&quot;) == null)&#123; mySession = request.getSession(true); mySession.setAttribute(&quot;appname&quot;, &quot;AAA111&quot;); out.println(&quot;new session:&quot;+mySession.getAttribute(&quot;appname&quot;)); &#125;else&#123; out.println(&quot;old session:&quot;+mySession.getAttribute(&quot;appname&quot;)); &#125;%&gt;&lt;/body&gt;&lt;/html&gt; 动静分离的 Nginx 配置安装Nginx：我使用的Nginx为绿色版本，双击即可开启（安装路径 D:/User/nginxTest/nginx）修改 conf nginx.conf 配置文件，多个Tomcat服务器都是在这里配置：123456789101112131415161718192021222324252627282930313233343536upstream test &#123; server 127.0.0.1:8080 weight=2; server 127.0.0.1:8081 weight=1; #配置多个tomcat，负载均衡&#125;server &#123; listen 80; server_name localhost; #charset koi8-r; #access_log logs/host.access.log main; location / &#123; index index.html index.htm; &#125; # 所有动态请求都转发给tomcat处理 location ~ \.(jsp|do)$ &#123; proxy_next_upstream http_502 http_504 error timeout invalid_header; proxy_pass http://test; &#125; #静态文件交给nginx处理 location ~ .*\.(htm|html|gif|jpg|jpeg|png|bmp|swf|ioc|rar|zip|txt|flv|mid|doc|ppt|pdf|xls|mp3|wma)$ &#123; # 绝对路径 root D:/User/nginxTest/nginx/webapps; &#125; #静态文件交给nginx处理 location ~ .*\.(js|css)?$ &#123; # 绝对路径 root D:/User/nginxTest/nginx/webapps; &#125;&#125; 由于静态文件都在D:/User/nginxTest/nginx/webapps中，在nginx文件夹下新建webapps，继续新建jsp中的路径/nginx/img/1.png、/nginx/css/index.css、/nginx/js/index.js现在动静分离和负载均衡就配置成功了，下面开始redis共享session把前文提到的三个包加入到所有tomcat的lib中。修改tomcat的conf中的context.xml，添加代码如下:1234567&lt;Valve className=&quot;com.orangefunction.tomcat.redissessions.RedisSessionHandlerValve&quot; /&gt; &lt;Manager className=&quot;com.orangefunction.tomcat.redissessions.RedisSessionManager&quot; host=&quot;localhost&quot; port=&quot;6379&quot; password=&quot;admin&quot; &lt;!--redis密码，需要修改redis.window.conf文件--》 database=&quot;0&quot; maxInactiveInterval=&quot;60&quot; /&gt; redis共享session安装redis：我使用的redis为绿色版本，双击即可开启（安装路径 D:/User/nginxTest/redis）修改redis.windows.conf文件12# requirepass foobared redis密码requirepass admin 启动redis，redis-server.exe redis.windows.conf大功告成！session默认时间是30秒，可修改tomcat下的web.xml，根据实际情况调整123&lt;session-config&gt; &lt;session-timeout&gt;60&lt;/session-timeout&gt;&lt;!--默认是30秒--&gt;&lt;/session-config&gt;]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
        <tag>Tomcat</tag>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo+Github实现相册功能]]></title>
    <url>%2Fblog%2F2019%2F04%2F26%2FHexo-Github%E5%AE%9E%E7%8E%B0%E7%9B%B8%E5%86%8C%E5%8A%9F%E8%83%BD%2F</url>
    <content type="text"><![CDATA[Hexo+Github+Python实现相册功能最终效果请看这里 https://lastsummer.top/blog/photos/我使用的主题是hexo-theme-shana-master,该主题没有集成相册功能，自己上网查了些资料,摸索摸索,终于搭建好了。 实现方案在github上新建一个仓库，主要用于存储图片，可以通过url访问到，也方便管理（后期可以在七牛云上进行图片储存）将要放到相册的图片处理成json格式的数据，然后进行访问，这里json的格式需要配合要使用的样式，所以需要处理成特定格式的json数据，下面会给出图片裁剪，因为相册显示的样式最好是正方形的的图片，这里使用脚本处理一下图片压缩，相册显示的图片是压缩后的图片，提高加载的速度，打开后的图片是原图。 新建一个仓库存储图片源码下载地址https://github.com/wangrui15034005712/Blog-Back-Up建立一个用于存储相册的仓库，我这里建立了名为Blog-Back-Up的仓库（和博客地址同一目录）重点 修改Blog-Back-Up中blog_photos_copy的ins.js文件，主要是里面的render函数，修改成自己的Github图片路径,这个链接很多人输入错了，不是直接的图片url，是github需要点“download”才能看到的url。12var minSrc = &apos;https://raw.githubusercontent.com/wangrui15034005712/Blog-Back-Up/master/min_photos/&apos; + data.link[i];var src = &apos;https://raw.githubusercontent.com/wangrui15034005712/Blog-Back-Up/master/photos/&apos; + data.link[i]; 重点 修改Blog-Back-Up中tool.py文件12345678# 把json文件发布到自己的博客中with open(&quot;../Hexo/source/photos/data.json&quot;,&quot;w&quot;) as fp: json.dump(final_dict, fp)# 我设置的是本地博客路径如 D:\User\Hexo\source\photos\data.json# 把下载的博客Blog-Back-Up上传至自己新创建的仓库# 把自己的相册图片放入到Blog-Back-Up的photos中# DOS命令执行 Python tool.py 命令压缩图片到min_photos及json并且发布到Github# 如果报错自行百度python等问题（缺少模块、版本不对） 修改Hexo博客在Hexo目录中打开DOS命令创建新的相册菜单hexo new page &quot;photos&quot;1hexo new page &quot;photos&quot; 之后，去下载“empty.png” 点击这里，右键保存下载在Hexo本地仓库source下新建一个文件夹命名为assets,再在assets下新建一个文件夹命名为img。最后把empty.png放到img里面。把之前clone下来的Blog-Back-Up下blog_photos_copy的所有文件copy到Hexo本地仓库source中的photo文件夹下如无法显示，可能是图片路径，网络传输较慢，js、css样式待优化，小编自己的样式是经过调整的。有问题可以在下方评论区评论。个人博客：去年夏天参考博客：hexo+yilia完美实现相册功能]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>Github</tag>
        <tag>Hexo</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[RabbitMq入门及六种模式讲解]]></title>
    <url>%2Fblog%2F2019%2F04%2F23%2FRabbitMq%E5%85%A5%E9%97%A8%E5%8F%8A%E5%85%AD%E7%A7%8D%E6%A8%A1%E5%BC%8F%E8%AE%B2%E8%A7%A3%2F</url>
    <content type="text"><![CDATA[RabbitMQ 术语说明：Server(Broker):接收客户端连接，实现AMQP协议的消息队列和路由功能的进程；Virtual Host：虚拟主机的概念，类似权限控制组，一个Virtual Host里可以有多个Exchange和Queue,权限控制的最小丽都是Virtual Host；Exchange:交换机，接收生产者发送的消息，并根据Routing Key将消息路由到服务器中的队列Queue。ExchangeType:交换机类型决定了路由消息行为，RabbitMQ中有三种类型Exchange，分别是fanout、direct、topic；Message Queue：消息队列，用于存储还未被消费者消费的消息；Message：由Header和body组成，Header是由生产者添加的各种属性的集合，包括Message是否被持久化、优先级是多少、由哪个Message Queue接收等；body是真正需要发送的数据内容；BindingKey：绑定关键字，将一个特定的Exchange和一个特定的Queue绑定起来。 RabbitMQ 五种队列模式与(SpringBoot)实例在pom.xml中添加相关依赖12345&lt;!--消息队列模块--&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-amqp&lt;/artifactId&gt;&lt;/dependency&gt; 修改application.properties在application.properties添加rabbitmq的相关信息（默认账号密码guest）：1234spring.rabbitmq.host=127.0.0.1spring.rabbitmq.port=5672spring.rabbitmq.username=guestspring.rabbitmq.password=guest 简单模式 Hello World + 工作模式简单模式：一个生产者P发送消息到队列hello,一个消费者C接收 一对一的使用配置一对一，一个发送者发送消息，一个接受者接受消息。12345678910111213141516171819package com.example.springboot.test1;import org.springframework.amqp.core.Queue;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;/** * @Author: wangrui * @Description: 队列配置，队列的名称，发送者和接受者的名称必须一致，否则接收不到消息 * @Date: 2019/4/26 16：54 */@Configurationpublic class RabbitMqConfig &#123; public Queue Queue1() &#123; return new Queue(&quot;lyhTest1&quot;); &#125;&#125; 1234567891011121314151617181920212223242526272829package com.example.springboot.test1;import org.springframework.amqp.core.AmqpTemplate;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RestController;import java.util.Date;/** * @Author: wangrui * @Description: 发送者通过Controller类发送消息： * @Date: 2019/4/26 16：54 */@RestControllerpublic class SendController &#123; @Autowired private AmqpTemplate amqpTemplate; //一对一 @RequestMapping(&quot;/send&quot;) public String send()&#123; String content=&quot;Date:&quot;+new Date(); amqpTemplate.convertAndSend(&quot;lyhTest1&quot;,content); return content; &#125;&#125; 123456789101112131415161718192021package com.example.springboot.test1;import org.springframework.amqp.rabbit.annotation.RabbitHandler;import org.springframework.amqp.rabbit.annotation.RabbitListener;import org.springframework.stereotype.Component;/** * @Author: wangrui * @Description: 接收者Receiver1类接收信息 * @Date: 2019/4/26 16：54 */@Component@RabbitListener(queues = &quot;lyhTest1&quot;)public class Receiver1 &#123; @RabbitHandler public void receiver(String msg)&#123; System.out.println(&quot;Test1 receiver1:&quot;+msg); &#125;&#125; 测试：浏览器访问地址：http://localhost:8080/send终端输出Receiver1接收的内容查看RabbitMQ的Web客户端http://localhost:15672 可以在列表里看到之前创建的队列。 一对多的使用配置一对多，一个发送者发送消息，多个接受者接受同一个消息，添加新的接收者Receiver2。1234567891011121314151617package com.example.springboot.test1;import org.springframework.amqp.rabbit.annotation.RabbitHandler;import org.springframework.amqp.rabbit.annotation.RabbitListener;import org.springframework.stereotype.Component;@Component@RabbitListener(queues = &quot;lyhTest1&quot;)//这里的lyhTest2是多对多，如果要测试一对多改成lyhTest1public class Receiver2 &#123; @RabbitHandler public void receiver(String msg)&#123; System.out.println(&quot;Test1 receiver2:&quot;+msg); &#125; &#125; 在SendController添加一对多发送方法1234567891011//可以看到发送者发送一个消息被多个接收者接收，注意这里的消息只能被消费一次（一对多）@RequestMapping(&quot;/multiSend&quot;)public String multiSend()&#123; StringBuilder times=new StringBuilder(); for(int i=0;i&lt;10;i++)&#123; long time=System.nanoTime(); amqpTemplate.convertAndSend(&quot;lyhTest1&quot;,&quot;第&quot;+i+&quot;次发送的时间：&quot;+time); times.append(time+&quot;&lt;br&gt;&quot;); &#125; return times.toString();&#125; 测试，浏览器访问http://localhost:8080/multiSend 多对多的使用配置在配置类RabbbitMqConfig添加新的队列名lyhTest21234567891011121314@Configurationpublic class RabbitMqConfig &#123; @Bean public Queue Queue1() &#123; return new Queue(&quot;lyhTest1&quot;); &#125; @Bean public Queue Queue2() &#123; return new Queue(&quot;lyhTest2&quot;); &#125;&#125; 修改Receiver2接收队列名为lyhTest21234567891011@Component@RabbitListener(queues = &quot;lyhTest2&quot;)//这里的lyhTest2是多对多，如果要测试一对多改成lyhTest1public class Receiver2 &#123; @RabbitHandler public void receiver(String msg)&#123; System.out.println(&quot;Test1 receiver2:&quot;+msg); &#125;&#125; 在SendController添加多对多发送消息的方法1234567891011@RequestMapping(&quot;/multi2MultiSend&quot;)public String mutil2MutilSend()&#123; StringBuilder times=new StringBuilder(); for(int i=0;i&lt;10;i++)&#123; long time=System.nanoTime(); amqpTemplate.convertAndSend(&quot;lyhTest1&quot;,&quot;第&quot;+i+&quot;次发送的时间：&quot;+time); amqpTemplate.convertAndSend(&quot;lyhTest2&quot;,&quot;第&quot;+i+&quot;次发送的时间：&quot;+time); times.append(time+&quot;&lt;br&gt;&quot;); &#125; return times.toString();&#125; 测试，浏览器访问：http://localhost:8080/multi2MultiSend Topic Exchange（自定义程度较高 通配符）12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849package com.example.springboot.test2; import org.springframework.amqp.core.Binding; import org.springframework.amqp.core.BindingBuilder; import org.springframework.amqp.core.Queue; import org.springframework.amqp.core.TopicExchange; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration;/** * @Author:wangrui * @Description:Topic Exchange配置类 * @Date:2019/4/18 9:32 */@Configurationpublic class RabbitMqTopicConfig &#123; //只接一个topic final static String message = &quot;topic.message&quot;; //接收多个topic final static String messages = &quot;topic.messages&quot;; @Bean public Queue queueMessage() &#123; return new Queue(RabbitMqTopicConfig.message); &#125; @Bean public Queue queueMessages() &#123; return new Queue(RabbitMqTopicConfig.messages); &#125; @Bean TopicExchange exchange() &#123; return new TopicExchange(&quot;exchange&quot;); &#125; @Bean Binding bindingExchangeMessage(Queue queueMessage, TopicExchange exchange) &#123; return BindingBuilder.bind(queueMessage).to(exchange).with(&quot;topic.message&quot;); &#125; @Bean Binding bindingExchangeMessages(Queue queueMessages, TopicExchange exchange) &#123; //这里的#表示零个或多个词。 return BindingBuilder.bind(queueMessages).to(exchange).with(&quot;topic.#&quot;); &#125;&#125; 1234567891011121314151617package com.example.springboot.test2;import org.springframework.amqp.rabbit.annotation.RabbitHandler;import org.springframework.amqp.rabbit.annotation.RabbitListener;import org.springframework.stereotype.Component;@Component@RabbitListener(queues = &quot;topic.message&quot;)public class TopicReceiver1 &#123; @RabbitHandler public void process(String msg) &#123; System.out.println(&quot;TopicReceiver1:&quot; + msg); &#125;&#125; 1234567891011121314151617package com.example.springboot.test2;import org.springframework.amqp.rabbit.annotation.RabbitHandler;import org.springframework.amqp.rabbit.annotation.RabbitListener;import org.springframework.stereotype.Component;@Component@RabbitListener(queues = &quot;topic.messages&quot;)public class TopicReceiver2 &#123; @RabbitHandler public void process(String msg) &#123; System.out.println(&quot;TopicReceiver2 :&quot; + msg); &#125;&#125; 1234567891011121314151617181920212223242526272829package com.example.springboot.test2;import org.springframework.amqp.core.AmqpTemplate;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RestController;@RestControllerpublic class SendController1 &#123; @Autowired private AmqpTemplate amqpTemplate; @RequestMapping(&quot;/topicSend1&quot;) public String topicSend1() &#123; String context = &quot;my topic 1&quot;; System.out.println(&quot;发送者说 : &quot; + context); this.amqpTemplate.convertAndSend(&quot;exchange&quot;, &quot;topic.message&quot;, context); return context; &#125; @RequestMapping(&quot;/topicSend2&quot;) public String topicSend2() &#123; String context = &quot;my topic 2&quot;; System.out.println(&quot;发送者说 : &quot; + context); this.amqpTemplate.convertAndSend(&quot;exchange&quot;, &quot;topic.messages&quot;, context); return context; &#125;&#125; 测试，浏览器访问：http://localhost:8080/topicSend1 输出两个消费者测试，浏览器访问：http://localhost:8080/topicSend2 输出一个消费者 Fanout 广播模式，发布订阅12345678910111213141516171819202122232425262728293031323334353637383940414243444546package com.example.springboot.test3;import org.springframework.amqp.core.Binding;import org.springframework.amqp.core.BindingBuilder;import org.springframework.amqp.core.FanoutExchange;import org.springframework.amqp.core.Queue;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;/** * @Author:wangrui * @Description:队列配置，队列的名称，发送者和接受者的名称必须一致，否则接收不到消息 * @Date:2019/4/28 9:36 */@Configurationpublic class RabbitMqFanoutConfig &#123; private static String EXCHANGE_NAME = &quot;hello111&quot;; //声明两个队列 @Bean public Queue queue() &#123; return new Queue(&quot;hello&quot;); &#125; @Bean public Queue queue1() &#123; return new Queue(&quot;hello1&quot;); &#125; //声明一个fanout的交换机 @Bean public FanoutExchange fanoutExchange() &#123; return new FanoutExchange(EXCHANGE_NAME); &#125; //将队列和交互机进行绑定 @Bean public Binding bindfanout(Queue queue, FanoutExchange fanoutExchange) &#123; return BindingBuilder.bind(queue).to(fanoutExchange); &#125; @Bean public Binding bindfanout1(Queue queue1, FanoutExchange fanoutExchange) &#123; return BindingBuilder.bind(queue1).to(fanoutExchange); &#125;&#125; 12345678910111213141516package com.example.springboot.test3;import org.springframework.amqp.rabbit.annotation.RabbitHandler;import org.springframework.amqp.rabbit.annotation.RabbitListener;import org.springframework.stereotype.Service;@Service@RabbitListener(queues = &quot;hello&quot;) //这个队列就是我们之前定义的队列名称，监听hello队列的消息public class FanoutReceiver1 &#123; @RabbitHandler public void receive(String message) throws InterruptedException &#123; System.err.println(&quot;1:收到消息&quot; + message); &#125;&#125; 12345678910111213141516package com.example.springboot.test3;import org.springframework.amqp.rabbit.annotation.RabbitHandler;import org.springframework.amqp.rabbit.annotation.RabbitListener;import org.springframework.stereotype.Service;@Service@RabbitListener(queues=&quot;hello1&quot;) //这个队列就是我们之前定义的队列名称，监听hello队列的消息public class FanoutReceiver2 &#123; @RabbitHandler public void receive(String message) throws InterruptedException&#123; System.err.println(&quot;2收到消息:&quot;+message); &#125;&#125; 12345678910111213141516171819202122232425package com.example.springboot.test3;import org.springframework.amqp.core.AmqpTemplate;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RestController;@RestControllerpublic class SendController2 &#123; private static String EXCHANGE_NAME = &quot;hello111&quot;; @Autowired private AmqpTemplate amqpTemplate; @RequestMapping(value = &quot;testFanout&quot;) public void test() throws InterruptedException &#123; for (int i = 0; i &lt; 10; i++) &#123; Thread.sleep(i * 20); amqpTemplate.convertAndSend(EXCHANGE_NAME, &quot;fanout&quot;, &quot;hello word&quot; + i); &#125; System.err.println(&quot;消息发送成功&quot;); &#125;&#125; 测试，浏览器访问：http://localhost:8080/testFanout Direct 路由模式123456789101112131415161718192021222324252627282930313233343536373839404142434445464748package com.example.springboot.test4;import org.springframework.amqp.core.Binding;import org.springframework.amqp.core.BindingBuilder;import org.springframework.amqp.core.DirectExchange;import org.springframework.amqp.core.Queue;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;/** * Routing 模式.配置类 * * @author Administrator */@Configurationpublic class DirectRabbitConfig &#123; @Bean public Queue AMessage() &#123; return new Queue(&quot;direct.A&quot;); &#125; @Bean public Queue BMessage() &#123; return new Queue(&quot;direct.B&quot;); &#125; @Bean DirectExchange directExchange() &#123; return new DirectExchange(&quot;directExchange&quot;); &#125; @Bean Binding bindingExchangeMessage(Queue AMessage, DirectExchange exchange) &#123; return BindingBuilder.bind(AMessage).to(exchange).with(&quot;orange&quot;); &#125; @Bean Binding bindingExchangeMessageBOfBlack(Queue BMessage, DirectExchange exchange) &#123; return BindingBuilder.bind(BMessage).to(exchange).with(&quot;black&quot;); &#125; @Bean Binding bindingExchangeMessageBOfGreen(Queue BMessage, DirectExchange exchange) &#123; return BindingBuilder.bind(BMessage).to(exchange).with(&quot;green&quot;); &#125;&#125; 12345678910111213141516171819202122232425262728293031323334package com.example.springboot.test4;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.amqp.core.AmqpTemplate;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Component;@Componentpublic class DirectSender &#123; protected static Logger logger= LoggerFactory.getLogger(DirectSender.class); @Autowired private AmqpTemplate rabbitTemplate; public void sendOrange() &#123; String context = &quot;hi, i am message orange&quot;; logger.debug(&quot;Sender : &quot; + context); this.rabbitTemplate.convertAndSend(&quot;directExchange&quot;, &quot;orange&quot;, context); &#125; public void sendBlack() &#123; String context = &quot;hi, i am messages black&quot;; logger.debug(&quot;Sender : &quot; + context); this.rabbitTemplate.convertAndSend(&quot;directExchange&quot;, &quot;black&quot;, context); &#125; public void sendGreen() &#123; String context = &quot;hi, i am messages green&quot;; logger.debug(&quot;Sender : &quot; + context); this.rabbitTemplate.convertAndSend(&quot;directExchange&quot;, &quot;green&quot;, context); &#125;&#125; 123456789101112131415161718192021package com.example.springboot.test4;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.amqp.rabbit.annotation.RabbitHandler;import org.springframework.amqp.rabbit.annotation.RabbitListener;import org.springframework.stereotype.Component;@Component@RabbitListener(queues = &quot;direct.A&quot;)public class DirectReceiverA &#123; protected static Logger logger= LoggerFactory.getLogger(DirectReceiverA.class); @RabbitHandler public void process(String message) &#123; logger.debug(&quot;direct.A Receiver : &quot; + message); System.out.println(&quot;direct.A Receiver : &quot; + message); &#125;&#125; 123456789101112131415161718192021package com.example.springboot.test4;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.amqp.rabbit.annotation.RabbitHandler;import org.springframework.amqp.rabbit.annotation.RabbitListener;import org.springframework.stereotype.Component;@Component@RabbitListener(queues = &quot;direct.B&quot;)public class DirectReceiverB &#123; protected static Logger logger = LoggerFactory.getLogger(DirectReceiverB.class); @RabbitHandler public void process(String message) &#123; logger.debug(&quot;direct.B Receiver : &quot; + message); System.out.println(&quot;direct.B Receiver : &quot; + message); &#125;&#125; 1234567891011121314151617181920212223242526272829303132package com.example.springboot.test4;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RestController;@RestController@RequestMapping(&quot;/routing&quot;)public class DirectController &#123; @Autowired private DirectSender directSender; @RequestMapping(&quot;/send1&quot;) public String send1() &#123; directSender.sendOrange(); return &quot;send1 orange ok&quot;; &#125; @RequestMapping(&quot;/send2&quot;) public String send2() &#123; directSender.sendBlack(); return &quot;send2 black ok&quot;; &#125; @RequestMapping(&quot;/send3&quot;) public String send3() &#123; directSender.sendGreen(); return &quot;send3 green ok&quot;; &#125;&#125; 测试，浏览器访问：http://localhost:8080/routing/send1 输出： direct.A Receiver : hi, i am message orangehttp://localhost:8080/routing/send2 输出： direct.B Receiver : hi, i am messages blackhttp://localhost:8080/routing/send3 输出： direct.B Receiver : hi, i am messages green RPC Request/reply（暂未使用）RPC比较适合- 客户端调用哪个服务器比较明确 调用需要立即得到返回结果 架构简单 在一个由多个微服务构成的大系统中，某些关键服务间的调用应当在较短的时间内返回，而且各个微服务的专业化程度较高，同一个请求的关注者只有一个。这个时候就应该用RPC。 比如在一个ERP系统中，有一个管理仓储的微服务，以及一个负责订单的微服务。新建订单时需要查知当前的存货是否充足，如果不充足就通知用户；提交订单时预订指定数量的货物，如果此时货物不错，也要终止订单的提交，并通知用户。显然在这种场景下是不允许较大的延迟，否则会影响用户体验。所以应该使用RPC，及时返回仓储情况。 MQ比较适合 消息的发送者和消费者需要解耦的情况 发送者并不明确谁是消费者 发送者并不关心谁来消费消息 各个消费者可以从不同的角度入手处理消息 消费者的处理结果也不返回给发送者 消息的发送和处理是异步的 消息的关注者不止一个 在一个由多个微服务构成的大系统中，会有一些非关键服务，用来执行一些不需要立刻得到结果的计算。而且它们的计算结果并不会返回给消息的发送者。这个时候就应该使用MQ。 比如在一个ERP系统中有一些日志服务、业务监控服务等。这些服务会发布一些系统事件，针对这些事件可能有多个应用关注。对于日志服务，当系统出现某些异常情况时需要浏览日志，查找问题的根源；也可以在分析系统运行的瓶颈时提供关键数据。对于业务监控系统，例如货物入仓出仓的消息，可以被报表系统关注，生成报表；也可以被配货系统关注，及时补足所需库存。]]></content>
      <categories>
        <category>RabbitMq</category>
      </categories>
      <tags>
        <tag>简单模式 Hello World</tag>
        <tag>工作模式 Work Queue</tag>
        <tag>发布/订阅模式 Publish/Subscribe</tag>
        <tag>路由模式 Routing</tag>
        <tag>通配符模式 Topic</tag>
        <tag>分布式 RPC</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Window10安装RabbitMq中间件]]></title>
    <url>%2Fblog%2F2019%2F04%2F17%2FWindow10%E5%AE%89%E8%A3%85RabbitMq%E4%B8%AD%E9%97%B4%E4%BB%B6%2F</url>
    <content type="text"><![CDATA[简介Rabbit MQ是一个在AMQP协议标准基础上完整的，可服用的企业消息系统；它遵循Mozilla Public License开源协议，采用 Erlang 实现的工业级的消息队列(MQ)服务器，Rabbit MQ 是建立在Erlang OTP平台上；Erlang语言阻止了大量的 Java 工程师去深入研究和掌控它，对公司而言，几乎处于不可控的状态，但是是开源的，比较稳定的社区支持，活跃度也高;AMQP（高级消息队列协议）是一个异步消息传递所使用应用层协议规范，为面向消息中间件设计，基于此协议的客户端与消息中间件可以无视消息来源传递消息，不受客户端、消息中间件、不同的开发语言环境等条件的限制；支持主流操作系统：Linux、Windows，MacOX等；支持多种客户端开发语言：Java、Python、Ruby、.NET，PHP、C/C++、Node.js等。 安装 Erlang 及 Rabbit MQ（安装路径不允许出现空格）Erlang 小编使用的是 otp_win64_21.3 ，需要其他版本或者32位系统的，可以去 Erlang官网下载。全部点击“下一步”就行。（安装完成）进入CMD窗口，安装成功后，确认一下是否有系统环境变量。打开Dos窗口,输入 erl 查看Erlang版本（如果可以查看版本，则掠过下方环境配置）变量名：ERLANG_HOME，变量值：Erlang安装路径。Rabbit MQ 小编使用的是 rabbitmq-server-3.7.14，需要其他版本或者32位系统的，可以去Rabbit MQ官网下载。全部点击“下一步”就行。（安装完成）激活 RabbitMQ&#39;s Management Plugin 管理界面打开Dos窗口,输入命令：&quot;D:\Program Files\RabbitMQ Server\rabbitmq_server-3.7.14\sbin\rabbitmq-plugins.bat&quot; enable rabbitmq_managementrabbitmq必须用管理员用户启动（也可配置普通用户启动、暂未使用此方法）可以在Windows10系统的开始菜单上，单击鼠标右键，这时候出现的菜单中，我们选择命令提示符（管理员）点击打开这样即可。1234567891011erl #查看Erlang版本rabbitmqctl status #查看了啊RabbitMQ版本net start rabbitmq #启动RabbitMQ命令net stop rabbitmq #关闭RabbitMQ命令127.0.0.1:15672 #访问RabbitMQ管理界面 默认用户名 guest 密码 guest默认监听端口：15672（在3.0版本之前是55672端口）rabbitmq-plugins enable rabbitmq_web_stomp rabbitmq_web_stomp_examplesrabbitmq-plugins enable rabbitmq_management rabbitmq_web_stomp rabbitmq_stomp rabbitmq_web_stomp_examples&quot;/d/Program Files/RabbitMQ Server/rabbitmq_server-3.7.14/sbin/rabbitmq-plugins.bat&quot; enable rabbitmq_web_stomp rabbitmq_web_stomp_examples&quot;/d/Program Files/RabbitMQ Server/rabbitmq_server-3.7.14/sbin/rabbitmqctl.bat&quot; startus&quot;/d/Program Files/RabbitMQ Server/rabbitmq_server-3.7.14/sbin/rabbitmqctl.bat&quot; list_queues]]></content>
      <categories>
        <category>RabbitMq</category>
      </categories>
      <tags>
        <tag>RabbitMq</tag>
        <tag>Queue</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[为什么使用消息队列]]></title>
    <url>%2Fblog%2F2019%2F04%2F16%2F%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BD%BF%E7%94%A8%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%2F</url>
    <content type="text"><![CDATA[栈：先进先出。堆、队列：先进后出。 队列队列（常用数据结构之一）。队列是一种特殊的线性表，特殊之处在于它只允许在表的前端（front）进行删除操作，而在表的后端（rear）进行插入操作，和栈一样，队列是一种操作受限制的线性表。进行插入操作的端称为队尾，进行删除操作的端称为队头。消息被发送到队列中，“消息队列”是在消息的传输过程中保存消息的容器。消息队列管理器在将消息从它的源中继到它的目标时充当中间人。队列的主要目的是提供路由并保证消息的传递。如果发送消息时接收者不可用，消息队列会保留消息，直到可以成功地传递它。《百度百科》 面试题为什么使用消息队列？（场景、优点、缺点）解耦场景A：A 系统发送数据到 BCD 三个系统，通过接口调用发送。如果 E 系统也要这个数据呢？那如果 C 系统现在不需要了呢？A 系统负责人几乎崩溃……在这个场景中，A 系统跟其它各种乱七八糟的系统严重耦合，A 系统产生一条比较关键的数据，很多系统都需要 A 系统将这个数据发送过来。A 系统要时时刻刻考虑 BCDE 四个系统如果挂了该咋办？要不要重发，要不要把消息存起来？头发都白了啊！场景A使用MQ：如果使用 MQ，A 系统产生一条数据，发送到 MQ 里面去，哪个系统需要数据自己去 MQ 里面消费。如果新系统需要数据，直接从 MQ 里消费即可；如果某个系统不需要这条数据了，就取消对 MQ 消息的消费即可。这样下来，A 系统压根儿不需要去考虑要给谁发送数据，不需要维护这个代码，也不需要考虑人家是否调用成功、失败超时等情况。总结：通过一个 MQ，Pub/Sub 发布订阅消息这么一个模型，A 系统就跟其它系统彻底解耦了。面试技巧：你需要去考虑一下你负责的系统中是否有类似的场景，就是一个系统或者一个模块，调用了多个系统或者模块，互相之间的调用很复杂，维护起来很麻烦。但是其实这个调用是不需要直接同步调用接口的，如果用 MQ 给它异步化解耦，也是可以的，你就需要去考虑在你的项目里，是不是可以运用这个 MQ 去进行系统的解耦。在简历中体现出来这块东西，用 MQ 作解耦。 异步场景B：A 系统接收一个请求，需要在自己本地写库，还需要在 BCD 三个系统写库，自己本地写库要 3ms，BCD 三个系统分别写库要 300ms、450ms、200ms。最终请求总延时是 3 + 300 + 450 + 200 = 953ms，接近 1s，用户感觉搞个什么东西，慢死了慢死了。用户通过浏览器发起请求，等待个 1s，这几乎是不可接受的。一般互联网类的企业，对于用户直接的操作，一般要求是每个请求都必须在 200 ms 以内完成，对用户几乎是无感知的。场景B使用MQ：如果使用 MQ，那么 A 系统连续发送 3 条消息到 MQ 队列中，假如耗时 5ms，A 系统从接受一个请求到返回响应给用户，总时长是 3 + 5 = 8ms，对于用户而言，其实感觉上就是点个按钮，8ms 以后就直接返回了，爽！网站做得真好，真快！ 削峰场景C：每天 0:00 到 12:00，A 系统风平浪静，每秒并发请求数量就 50 个。结果每次一到 12:00 ~ 13:00 ，每秒并发请求数量突然会暴增到 5k+ 条。但是系统是直接基于 MySQL 的，大量的请求涌入 MySQL，每秒钟对 MySQL 执行约 5k 条 SQL。一般的 MySQL，扛到每秒 2k 个请求就差不多了，如果每秒请求到 5k 的话，可能就直接把 MySQL 给打死了，导致系统崩溃，用户也就没法再使用系统了。但是高峰期一过，到了下午的时候，就成了低峰期，可能也就 1w 的用户同时在网站上操作，每秒中的请求数量可能也就 50 个请求，对整个系统几乎没有任何的压力。场景C使用MQ：如果使用 MQ，每秒 5k 个请求写入 MQ，A 系统每秒钟最多处理 2k 个请求，因为 MySQL 每秒钟最多处理 2k 个。A 系统从 MQ 中慢慢拉取请求，每秒钟就拉取 2k 个请求，不要超过自己每秒能处理的最大请求数量就 ok，这样下来，哪怕是高峰期的时候，A 系统也绝对不会挂掉。而 MQ 每秒钟 5k 个请求进来，就 2k 个请求出去，结果就导致在中午高峰期（1 个小时），可能有几十万甚至几百万的请求积压在 MQ 中。这个短暂的高峰期积压是 ok 的，因为高峰期过了之后，每秒钟就 50 个请求进 MQ，但是 A 系统依然会按照每秒 2k 个请求的速度在处理。所以说，只要高峰期一过，A 系统就会快速将积压的消息给解决掉。 消息队列有什么优点和缺点？优点：上面已经说了，就是在特殊场景下有其对应的好处，解耦、异步、削峰（三个）缺点：系统可用性降低、系统复杂度提高、一致性问题（三个）系统可用性降低：系统引入的外部依赖越多，越容易挂掉。本来你就是 A 系统调用 BCD 三个系统的接口就好了，人 ABCD 四个系统好好的，没啥问题，你偏加个 MQ 进来，万一 MQ 挂了咋整，MQ 一挂，整套系统崩溃的，你不就完了？如何保证消息队列的高可用，可以点击这里查看。 系统复杂度提高硬生生加个 MQ 进来，你怎么保证消息没有重复消费？怎么处理消息丢失的情况？怎么保证消息传递的顺序性？头大头大，问题一大堆，痛苦不已。 一致性问题A 系统处理完了直接返回成功了，人都以为你这个请求就成功了；但是问题是，要是 BCD 三个系统那里，BD 两个系统写库成功了，结果 C 系统写库失败了，咋整？你这数据就不一致了。 Kafka、ActiveMQ、RabbitMQ、RocketMQ 都有什么区别，以及适合哪些场景？所以消息队列实际是一种非常复杂的架构，你引入它有很多好处，但是也得针对它带来的坏处做各种额外的技术方案和架构来规避掉，做好之后，你会发现，妈呀，系统复杂度提升了一个数量级，也许是复杂了 10 倍。但是关键时刻，用，还是得用的。 综上，各种对比之后，有如下建议：1、一般的业务系统要引入 MQ，最早大家都用 ActiveMQ，但是现在确实大家用的不多了，没经过大规模吞吐量场景的验证，社区也不是很活跃，所以大家还是算了吧，我个人不推荐用这个了；2、后来大家开始用 RabbitMQ，但是确实 erlang 语言阻止了大量的 Java 工程师去深入研究和掌控它，对公司而言，几乎处于不可控的状态，但是确实人家是开源的，比较稳定的支持，活跃度也高；3、不过现在确实越来越多的公司会去用 RocketMQ，确实很不错，毕竟是阿里出品，但社区可能有突然黄掉的风险（目前 RocketMQ 已捐给 Apache，但 GitHub 上的活跃度其实不算高）对自己公司技术实力有绝对自信的，推荐用 RocketMQ，否则回去老老实实用 RabbitMQ 吧，人家有活跃的开源社区，绝对不会黄。所以中小型公司，技术实力较为一般，技术挑战不是特别高，用 RabbitMQ 是不错的选择；大型公司，基础架构研发实力较强，用 RocketMQ 是很好的选择。如果是大数据领域的实时计算、日志采集等场景，用 Kafka 是业内标准的，绝对没问题，社区活跃度很高，绝对不会黄，何况几乎是全世界这个领域的事实性规范。]]></content>
      <categories>
        <category>queue</category>
      </categories>
      <tags>
        <tag>Queue</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Git基本命令]]></title>
    <url>%2Fblog%2F2019%2F03%2F04%2FGit%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[Git命令行基本操作！ git config可以配置git的参数1234567git config --list 查看已经配置的git参数git config --system user.name &quot;Tocy&quot; 所有用户（本系统）git config --system user.email zyvj@qq.com 所有用户（本系统）git config --global user.name &quot;Tocy&quot; 当前用户（全局）git config --global user.email zyvj@qq.com 当前用户（全局）git config --local user.name &quot;Tocy&quot; 本地配置（当前目录）git config --local user.email zyvj@qq.com 本地配置（当前目录） 创建Git仓库1git init 初始化当前目录 克隆Git仓库1git clone https://git.oschina.net/Tocy/SampleCode.git 基本命令1234567891011121314151617181920212223242526272829303132333435363738git status # 检查下修改了什么内容git log --stat # 仅显示摘要选项git log --pretty=oneline # 定制记录格式git log --graph # 图像化分支和版本更新git add . # 提交所有文件到暂存区git add Readme.mdgit add *.pnggit add /home/code/git diff # 查看当前目录的所有修改git commit -m &quot;注释备注&quot; # 提交代码到本地仓库git push # 提交代码到远程仓库git branch # 显示本地当前所有分支git branch -d test # 删除分支git branch -D test # 强制删除分支git checkout -b testing # 直接切换并创建分支git checkout master # 切换主分支git merge test # 合并分支的代码git branch -a # 查看远程仓库所有分支git push origin test # 推送本地分支到远程仓库git push origin --delete test # 删除远程分支git checkout &quot;git status项目文件路径&quot; # 还原某个文件git reset --hard &apos;git log中的commit id&apos; 还原所有文件到一个版本git pull # 更新远程仓库最新代码git reset HEAD &quot;文件路径&quot; # 撤回暂存区的某个文件git reset HEAD~ # 撤回本地仓库中的代码到暂存区git reset # 撤回所有本地仓库中的代码到暂存区git rm --cached you_file_name # 撤回暂存区中的代码（暂未使用）git merge dev --合并分支dev的代码（Fast-forward表示快进模式，合并速度快，会直接将Master分支指向Develop分支）git merge --no-ff dev # 正常工作 master生成新节点，保证版本演变的清晰，建议此方法g&apos;g# 回退一个版本,且会将暂存区的内容和本地已提交的内容全部恢复到未暂存的状态,不影响原来本地文件(未提交的也不受影响) git reset (–mixed) HEAD~1 # 回退一个版本,不清空暂存区,将已提交的内容恢复到暂存区,不影响原来本地的文件(未提交的也不受影响) git reset –soft HEAD~1 # 回退一个版本,清空暂存区,将已提交的内容的版本恢复到本地,本地的文件也将被恢复的版本替换git reset –hard HEAD~1 # 强制覆盖远程仓库，从提交记录上还很难查到是谁进行了强制覆盖git push origin v1.0.0 --force]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Calendar获取日期]]></title>
    <url>%2Fblog%2F2019%2F01%2F09%2FCalendar%E8%8E%B7%E5%8F%96%E6%97%A5%E6%9C%9F%2F</url>
    <content type="text"><![CDATA[Calendar获取月初月末日期。1234567891011121314151617181920212223242526SimpleDateFormat simpleDateFormat = new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;);SimpleDateFormat startSimpleDateFormat = new SimpleDateFormat(&quot;yyyy-MM-dd 00:00:00&quot;);SimpleDateFormat EndDateFormat = new SimpleDateFormat(&quot;yyyy-MM-dd 23:59:59&quot;);//上月第一天Calendar calendar = Calendar.getInstance();System.out.println(&quot;当前时间：&quot;+simpleDateFormat.format(calendar.getTime()));calendar.add(Calendar.MONTH, -1);calendar.set(Calendar.DAY_OF_MONTH, 1);System.out.println(calendar.getTime());System.out.println(&quot;上月第一天时间：&quot;+startSimpleDateFormat.format(calendar.getTime()));//上月最后一天Calendar calendar1 = Calendar.getInstance();calendar1.set(Calendar.DAY_OF_MONTH, 1);calendar1.add(Calendar.DATE, -1);System.out.println(calendar1.getTime());System.out.println(&quot;上月最后一天：&quot;+EndDateFormat.format(calendar1.getTime()));//本月第一天Calendar calendar2 = Calendar.getInstance();calendar2.set(Calendar.DAY_OF_MONTH, calendar2.getActualMinimum(Calendar.DAY_OF_MONTH));System.out.println(calendar2.getTime());System.out.println(&quot;本月第一天：&quot;+startSimpleDateFormat.format(calendar2.getTime()));//本月最后一天Calendar calendar3 = Calendar.getInstance();calendar3.set(Calendar.DAY_OF_MONTH, calendar3.getActualMaximum(Calendar.DAY_OF_MONTH));System.out.println(calendar3.getTime());System.out.println(&quot;本月最后一天：&quot;+EndDateFormat.format(calendar3.getTime()));]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[BigDecimal算法]]></title>
    <url>%2Fblog%2F2018%2F12%2F24%2FBigDecimal%E7%AE%97%E6%B3%95%2F</url>
    <content type="text"><![CDATA[BigDecimal算法。123456789101112131415161718192021222324252627282930313233343536373839404142434445BigDecimal bignum1 = new BigDecimal(&quot;10&quot;); BigDecimal bignum2 = new BigDecimal(&quot;5&quot;); BigDecimal bignum3 = null; //加法 bignum3 = bignum1.add(bignum2); System.out.println(&quot;和 是：&quot; + bignum3); //减法 bignum3 = bignum1.subtract(bignum2); System.out.println(&quot;差 是：&quot; + bignum3); //乘法 bignum3 = bignum1.multiply(bignum2); System.out.println(&quot;积 是：&quot; + bignum3); //除法 bignum3 = bignum1.divide(bignum2); System.out.println(&quot;商 是：&quot; + bignum3); //比较int bignum = bignum1.compareTo(bignum2);返回的结果是int类型，-1表示小于，0是等于，1是大于。BigDecimal decimal = new BigDecimal(&quot;1.12345&quot;);//保留四位小数，默认四舍五入BigDecimal setScale = decimal.setScale(4);System.out.println(setScale);//保留四位小数，直接删除多余的小数BigDecimal setScale = decimal.setScale(4,BigDecimal.ROUND_DOWN);System.out.println(setScale);//保留四位小数，进位处理BigDecimal setScale = decimal.setScale(4,BigDecimal.ROUND_UP);System.out.println(setScale);//保留四位小数，四舍五入（2.35变成2.4）BigDecimal setScale1= decimal.setScale(4,BigDecimal.ROUND_HALF_UP);System.out.println(setScale);//保留四位小数，四舍五入（2.35变成2.3）BigDecimal setScale = decimal.setScale(4,BigDecimal.ROUND_HALF_DOWN);System.out.println(setScale);]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Oracle表恢复到特定时间点]]></title>
    <url>%2Fblog%2F2018%2F12%2F13%2FOracle%E8%A1%A8%E6%81%A2%E5%A4%8D%E5%88%B0%E7%89%B9%E5%AE%9A%E6%97%B6%E9%97%B4%E7%82%B9%2F</url>
    <content type="text"><![CDATA[Oracle数据库表恢复到特定时间点。12345678910111213141516171819-- Create tablecreate table TEST( id NUMBER(4), name VARCHAR2(20), class VARCHAR2(20), score NUMBER);-- Insert tableinsert into test values (11,&apos;测试10&apos;,&apos;一年三班&apos;,80);insert into test values (12,&apos;测试11&apos;,&apos;一年二班&apos;,90);insert into test values (13,&apos;测试12&apos;,&apos;一年一班&apos;,100);-- 数据库表恢复到特定时间点。select * from test as of timestamp to_timestamp(&apos;2018-12-13 10:18:00&apos;, &apos;yyyy-mm-dd hh24:mi:ss&apos;);-- 临时表恢复之前的数据create table 临时表 as select * from 你的那个数据被删除的表 as of timestamp to_timestamp(&apos;2013-08-13 14:00:00&apos;, &apos;yyyy-mm-dd hh24:mi:ss&apos;);]]></content>
      <categories>
        <category>ORACLE</category>
      </categories>
      <tags>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Oracle查询各班前三名学生信息]]></title>
    <url>%2Fblog%2F2018%2F11%2F30%2FOracle%E6%9F%A5%E8%AF%A2%E5%90%84%E7%8F%AD%E5%89%8D%E4%B8%89%E5%90%8D%E5%AD%A6%E7%94%9F%E4%BF%A1%E6%81%AF%2F</url>
    <content type="text"><![CDATA[Oracle查询各班前三名学生的信息。row_number函数排序最好用它，每一行记录生成一个序号，依次排序且不会重复。rank函数返回结果集的分区内每行排名，行的排名是相关行之前的排名数加一，重复排序会重复。dense_rank函数的功能与rank函数类似，dense_rank函数在生成序号时是连续的，依次排序会重复。12345select * from (select rank() over(partition by class order by score desc nulls last)rank, s.*from test s) t where rank &lt;= 3 order by class asc, score desc; 12345select * from (select row_number()over(partition by class order by score desc nulls last) rank,s.*from test s) t where rank &lt;= 3 order by class asc, score desc 12345select * from (select dense_rank()over(partition by class order by score desc nulls last) rank,s.*from test s) t where rank &lt;= 3 order by class asc, score desc 关于Parttion by： Parttion by关键字是Oracle中分析性函数的一部分，用于给结果集进行分区。它和聚合函数Group by不同的地方在于它只是将原始数据进行名次排列，能够返回一个分组中的多条记录（记录数不变），而Group by是对原始数据进行聚合统计，一般只有一条反映统计值的结果（每组返回一条）。TIPS：使用rank over()的时候，空值是最大的，如果排序字段为null, 可能造成null字段排在最前面，影响排序结果。可以这样： rank over(partition by course order by score desc nulls last) 总结： 在使用排名函数的时候需要注意以下三点：1、排名函数必须有 OVER 子句。2、排名函数必须有包含 ORDER BY 的 OVER 子句。3、分组内从1开始排序。]]></content>
      <categories>
        <category>ORACLE</category>
      </categories>
      <tags>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java获得日期间的所有月份]]></title>
    <url>%2Fblog%2F2018%2F11%2F28%2FJava%E8%8E%B7%E5%BE%97%E6%97%A5%E6%9C%9F%E9%97%B4%E7%9A%84%E6%89%80%E6%9C%89%E6%9C%88%E4%BB%BD%2F</url>
    <content type="text"><![CDATA[java获得两个日期之间的所有月份及日期之间的间隔。12345678910111213141516171819202122232425262728293031323334353637383940414243444546private static List&lt;String&gt; getMonthBetween(String minDate, String maxDate) throws ParseException &#123; ArrayList&lt;String&gt; result = new ArrayList&lt;String&gt;(); SimpleDateFormat sdf = new SimpleDateFormat(&quot;yyyy-MM&quot;);//格式化为年月 Calendar min = Calendar.getInstance(); Calendar max = Calendar.getInstance(); min.setTime(sdf.parse(minDate)); min.set(min.get(Calendar.YEAR), min.get(Calendar.MONTH), 1); max.setTime(sdf.parse(maxDate)); max.set(max.get(Calendar.YEAR), max.get(Calendar.MONTH), 2); Calendar curr = max; while (min.before(curr)) &#123; result.add(sdf.format(curr.getTime())); curr.add(Calendar.MONTH, -1); &#125; //得到日期之间的间隔totalMonth Calendar calendarStart = Calendar.getInstance(); int startYear = calendarStart.get(Calendar.YEAR); int startMonth = calendarStart.get(Calendar.MONTH); Calendar calendarEnd = Calendar.getInstance(); calendarEnd.setTime(sdf.parse(maxDate)); int endYear = calendarEnd.get(Calendar.YEAR); int endMonth = calendarEnd.get(Calendar.MONTH); int totalMonth = 0; if (endYear &gt; startYear) &#123; totalMonth = (endYear-startYear)*12 +(endMonth - startMonth)+1; &#125;else if (endYear == startYear) &#123; totalMonth = endMonth - startMonth+1; &#125;else &#123; throw new ParameterException(&quot;结束时间不能小于开始时间&quot;); &#125; return result;&#125;public static void main(String[] args) throws ParseException &#123; List&lt;String&gt; list= getMonthBetween(&quot;2018-10&quot;,&quot;2019-10&quot;); for(String date : list) &#123; System.out.println(date); &#125;&#125;]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Git添加Tag用法]]></title>
    <url>%2Fblog%2F2018%2F11%2F14%2FGit%E6%B7%BB%E5%8A%A0Tag%E7%94%A8%E6%B3%95%2F</url>
    <content type="text"><![CDATA[作为版本管理工具，Git可以对某个版本打上标签(tag)，表示本版本为发行版。这样一个不可修改的历史代码版本就像被我们封存起来一样,不论是运维发布拉取,或者以后的代码版本管理,都是十分方便的。Git标签分为两类：1、轻量级的：它其实是一个独立的分支,或者说是一个不可变的分支.指向特定提交对象的引用2、带附注的：实际上是存储在仓库中的一个独立对象，它有自身的校验和信息，包含着标签的名字，标签说明，标签本身也允许使用 GNU Privacy Guard (GPG) 来签署或验证,电子邮件地址和日期，一般我们都建议使用含附注型的标签，以便保留相关信息 查看标签打印所有标签1git tag 打印符合检索条件的标签1git tag -l &lt;版本号&gt; 如 git tag -l 1.*.* 为搜索一级版本为1的版本 查看对应标签状态1git checkout &lt;版本号&gt; 创建本地标签创建轻量标签轻量标签指向一个发行版的分支，其只是一个像某commit的引用，不存储名称时间戳及标签说明等信息。定义方法如下1git tag &lt;版本号&gt;-light 创建带附注标签相对于轻量标签，附注标签是一个独立的标签对象，包含了名称时间戳以及标签备注等信息，同时指向对应的commit。定义方法如下1git tag -a &lt;版本号&gt; -m &quot;&lt;备注信息&gt;&quot; 同时我们也可以像特定的commit添加标签，使用该commit对应的SHA值即可1git tag -a &lt;版本号&gt; &lt;SHA值&gt; -m &quot;&lt;备注信息&gt;&quot; 比如 git tag -a 1.0.0 0c3b62d -m &quot;Release Edition v1.0.0&quot; 就是为SHA为0c3b62d的这次提交打了1.0发行版的tag 删除标签删除本地标签1git tag -d &lt;版本号&gt; 删除远程仓库的标签1git push origin --delete &lt;版本号&gt; #新版本Git (&gt; v1.7.0) 推送标签推送所有标签1git push origin --tags 推送指定版本的标签1git push origin &lt;版本号&gt; 总结最后总结一下常用命令，方便查阅。123456789101112131415161718192021222324252627282930// 创建标签(本地)// 创建轻量标签git tag 1.0.0-light// 创建带备注标签(推荐)git tag -a 1.0.0 -m &quot;这是备注信息&quot;// 针对特定commit版本SHA创建标签git tag -a 1.0.0 0c3b62d -m &quot;这是备注信息&quot;// 查看标签// 打印所有标签git tag// 打印符合检索条件的标签git tag -l 1.*.*// 查看对应标签状态git checkout 1.0.0// 将本地标签发布到远程仓库// 发送所有git push origin --tags// 指定版本发送git push origin 1.0.0// 删除标签(本地)git tag -d 1.0.0// 删除远程仓库对应标签// Git版本 &gt; V1.7.0git push origin --delete 1.0.0// 旧版本Gitgit push origin :refs/tags/1.0.0 参考博客：使用Git添加Tag的方法]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo实现github+coding双线部署]]></title>
    <url>%2Fblog%2F2018%2F11%2F08%2FHexo%E5%AE%9E%E7%8E%B0github-coding%E5%8F%8C%E7%BA%BF%E9%83%A8%E7%BD%B2%2F</url>
    <content type="text"><![CDATA[Hexo是一个开源的静态博客框架，支持markdown文档，应用起来很方便而且有丰富的主题模板可供选择，是建立个性化的个人博客的不二之选，因为GitHub在国内访问速度较慢，因此选择Coding.从网上搜索的结果来看，很多人都认为github博客在国内的seo情况不太好，不被百度爬虫所青睐。一个比较好的方案是，同时将hexo博客部署到github和Coding上。 第一步：注册Coding账号第二步：Coding应用配置 第三步：配置SSH公钥我们要想生成SSH key，首先就得先安装 SSH，对于 Linux 和 Mac 系统，其默认是安装 SSH 的，而对于 Windows 系统，其默认是不安装 SSH 的，不过由于我们安装了 Git Bash，其也应该自带了 SSH. 可以通过在 Git Bash 中输入ssh命令，查看本机是否安装 SSH： 初次使用git的用户要使用git协议大概需要三个步骤：一、生成密钥对二、设置远程仓库（本文以github为例）上的公钥三、把git的 remote url 修改为git协议（以上两个步骤初次设置过以后，以后使用都不需要再次设置，此步骤视以后项目的remote url而定，如果以后其他项目的协议为https则需要此步骤）打开Hexo安装目录，右键git bash here点击打开你的id_rsa.pub文件，复制下里面的内容，然后登录进去你的coding； 第四步：初始化部署仓库 修改博客站点_config.yml 12345678# Deployment## Docs: https://hexo.io/docs/deployment.html#（修改coding的路径，实现coding及github同时部署）deploy:- type: git repository: github: git@github.com:wangrui15034005712/blog.git,master coding: https://git.dev.tencent.com/wangrui15034005712/demo.git,master 在gitbash上输入hexo clean 、hexo g再hexo d这样你的博客就被部署到Coding上了第五步：域名配置进入域名控制台，如有不理解之处可查看Hexo-Github搭建个人博客二 大功告成！ 个人博客：去年夏天参考博客：hexo+github打造个人博客系列之Coding托管（实现github+coding双线部署）]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>Github</tag>
        <tag>Coding</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo博客用自己的页面做首页]]></title>
    <url>%2Fblog%2F2018%2F11%2F07%2FHexo%E5%8D%9A%E5%AE%A2%E7%94%A8%E8%87%AA%E5%B7%B1%E7%9A%84%E9%A1%B5%E9%9D%A2%E5%81%9A%E9%A6%96%E9%A1%B5%2F</url>
    <content type="text"><![CDATA[Hexo博客用自己的页面做首页。个人网站 去年夏天 欢迎大家的访问！ Demo地址：https://lastsummer.topDemo仓库：https://github.com/wangrui15034005712/wangrui15034005712.github.io那么接下来是教程，本教程的前提已经用hexo将博客搭建在 xxxxxx.github.io的repository上那么现在你要做的有以下几步 新建一个仓库 名字随便起 我起了 blog那么现在你有了一个空的仓库repository然后本地clone下按照提示初始化一个主master分支访问xxxxxx.github.io/blog成功即可 修改博客站点_config.yml1234567891011# URL## If your site is put in a subdirectory, set url as &apos;http://yoursite.com/child&apos; and root as &apos;/child/&apos;url: https://xxxxxx.github.io/blog(改这里)root: /blog(改这里)permalink: :year/:month/:day/:title/permalink_defaults:deploy: type: git repository: https://github.com/xxxxxx/blog.git(改这里) branch: master 重新部署你的博客 在对应的文件下在gitbash上输入hexo clean 、hexo g再hexo d这样你的博客就被部署到https://xxxxxx.github.io/blog/上了 清空原来的仓库 现在原来那个xxxxxx.github.io的repository你就可以清空或者直接删除重新新建xxxxxx.github.io的repository（进入想要删除的仓库，点击setting 占到delete this repository 在弹窗里输入仓库名，确认即可）然后新建一个index.html，把你自定义页面的代码复制到里面就好了，然后可以通过&lt;a href=&quot;blog/&quot;&gt;&lt;/a&gt;跳转到你的博客界面了可以使用Demo进行配置，已在参考博客Demo代码中进行了优化 大功告成！ 个人博客：去年夏天参考博客：Hexo-用自己的页面做首页]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>Github</tag>
        <tag>Html</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo博客添加返回顶部按钮]]></title>
    <url>%2Fblog%2F2018%2F11%2F06%2FHexo%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0%E8%BF%94%E5%9B%9E%E9%A1%B6%E9%83%A8%E6%8C%89%E9%92%AE%2F</url>
    <content type="text"><![CDATA[Hexo博客添加返回顶部按钮。 返回顶部模块代码1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859&lt;div class=&quot;top gongyong&quot;&gt; &lt;a href=&quot;javascript:void(0);&quot;&gt;顶部&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;bottom gongyong&quot;&gt; &lt;a href=&quot;javascript:void(0);&quot;&gt;底部&lt;/a&gt;&lt;/div&gt;&lt;style&gt;body &#123; position:relative;&#125;.gongyong a &#123; width:50px; height:50px; background:#fff; color:#000; position:fixed; text-align:center; line-height:50px; right:2%; text-decoration:none; transition:all 0.5s; display:none;&#125;.top a &#123; top:70%;&#125;.bottom a &#123; top:80%;&#125;.gongyong a.hover &#123; background:#e14da0;&#125;&lt;/style&gt;&lt;script&gt;$(function() &#123; $(window).scroll(function() &#123; if ($(window).scrollTop() &gt;= 300) &#123; $(&apos;.gongyong a&apos;).fadeIn(600); &#125; else &#123; $(&apos;.gongyong a&apos;).fadeOut(600); &#125; &#125;); $(&apos;.gongyong a&apos;).hover(function() &#123; $(this).addClass(&apos;hover&apos;); &#125;, function() &#123; $(this).removeClass(&apos;hover&apos;); &#125;); $(&apos;.top a&apos;).click(function() &#123; $(&quot;html,body&quot;).animate(&#123; scrollTop: 0 &#125;, 500); &#125;); $(&apos;.bottom a&apos;).click(function() &#123; $(&quot;html,body&quot;).animate(&#123; scrollTop: $(document).height() &#125;, 500); &#125;);&#125;);&lt;/script&gt; 大功告成！]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>Html</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo添加评论功能]]></title>
    <url>%2Fblog%2F2018%2F11%2F05%2FHexo%E6%B7%BB%E5%8A%A0%E8%AF%84%E8%AE%BA%E5%8A%9F%E8%83%BD%2F</url>
    <content type="text"><![CDATA[目前博客站点使用的评论功能，多说，网易云跟贴都已经下线。Disqus也被挡在墙外，友言貌似也不行。 可用的评论系统大概有 来必力：https://livere.com （来自韩国，使用邮箱注册） 畅言： http://changyan.kuaizhan.com （安装需要备案号） Valine: https://github.com/xCss/Valine (用了下没效果，应该是我的主题没有集成Valine，支持Next） 综上，最终采用了来必力及畅言。 来必力注册官网 打开来必力官网 https://livere.com 安装及配置themes\hexo-theme-shana-master\layout\_partial\comments 下新建 livere.ejs(如不存在目录就新建即可) 把复制的内容粘贴进来；12345678910111213141516171819&lt;!-- 来必力City版安装代码 --&gt;&lt;div id=&quot;lv-container&quot; data-id=&quot;city&quot; data-uid=&quot;&lt;%= theme.livere_uid %&gt;&quot;&gt;&lt;script type=&quot;text/javascript&quot;&gt;var refer = &quot;&#123;Permalink&#125;&quot;.replace(&quot;http://&quot;,&quot;&quot;); (function(d, s) &#123; var j, e = d.getElementsByTagName(s)[0]; if (typeof LivereTower === &apos;function&apos;) &#123; return; &#125; j = d.createElement(s); j.src = &apos;https://cdn-city.livere.com/js/embed.dist.js&apos;; j.async = true; e.parentNode.insertBefore(j, e); &#125;)(document, &apos;script&apos;);&lt;/script&gt;&lt;noscript&gt;为正常使用来必力评论功能请激活JavaScript&lt;/noscript&gt;&lt;/div&gt;&lt;!-- City版安装代码已完成 --&gt; 在 themes\hexo-theme-shana-master\layout\_partial\article.ejs 中的内容底部添加如下内容：123&lt;% if (!index &amp;&amp; post.comments &amp;&amp; theme.livere.on)&#123; %&gt; &lt;%- partial(&apos;comments/livere&apos;) %&gt;&lt;% &#125; %&gt; 在主题themes\hexo-theme-shana-master\_config.yml添加内容如下(livere_uid就是data-uid)1234#来必力livere: on: true livere_uid: ############### 来必力就已经集成到自己的博客中啦！ 畅言注册官网 打开畅言官网 http://changyan.kuaizhan.com/ 安装及配置themes\hexo-theme-shana-master\layout\_partial\comments 下新建 changyan.ejs(如不存在目录就新建即可) 把复制的内容粘贴进来；12345678910111213141516171819202122232425&lt;!--PC和WAP自适应版 sid=&quot;请将此处替换为配置SourceID的语句&quot;--&gt;&lt;div id=&quot;SOHUCS&quot;&gt;&lt;/div&gt; &lt;script type=&quot;text/javascript&quot;&gt; (function()&#123; var appid = &apos;修改成自己的畅言APP ID&apos;; var conf = &apos;修改成自己的畅言APP KEY&apos;; var width = window.innerWidth || document.documentElement.clientWidth; if (width &lt; 960) &#123; window.document.write(&apos;&lt;script id=&quot;changyan_mobile_js&quot; charset=&quot;utf-8&quot; type=&quot;text/javascript&quot; src=&quot;https://changyan.sohu.com/upload/mobile/wap-js/changyan_mobile.js?client_id=&apos; + appid + &apos;&amp;conf=&apos; + conf + &apos;&quot;&gt;&lt;\/script&gt;&apos;); &#125; else &#123; var loadJs=function(d,a)&#123; var c=document.getElementsByTagName(&quot;head&quot;)[0]||document.head||document.documentElement; var b=document.createElement(&quot;script&quot;); b.setAttribute(&quot;type&quot;,&quot;text/javascript&quot;); b.setAttribute(&quot;charset&quot;,&quot;UTF-8&quot;); b.setAttribute(&quot;src&quot;,d); if(typeof a===&quot;function&quot;)&#123; if(window.attachEvent)&#123; b.onreadystatechange=function()&#123; var e=b.readyState;if(e===&quot;loaded&quot;||e===&quot;complete&quot;)&#123; b.onreadystatechange=null;a()&#125;&#125;&#125;else&#123;b.onload=a&#125;&#125;c.appendChild(b)&#125;; loadJs(&quot;https://changyan.sohu.com/upload/changyan.js&quot;, function()&#123;window.changyan.api.config(&#123;appid:appid,conf:conf&#125;)&#125;); &#125; &#125;)(); &lt;/script&gt; 在 themes\hexo-theme-shana-master\layout\_partial\article.ejs 中的内容底部添加如下内容：123&lt;% if (!index &amp;&amp; post.comments &amp;&amp; theme.changyan.on)&#123; %&gt; &lt;%- partial(&apos;comments/changyan&apos;) %&gt;&lt;% &#125; %&gt; 在主题themes\hexo-theme-shana-master\_config.yml添加内容如下123#畅言changyan: on: true 畅言就已经集成到自己的博客中啦！ 如果要修改来必力及畅言评论的样式，可以在官网进行相关配置：1、评论管理2、评论审核3、评论数据统计4、系统配置]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>Html</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[zookeeper安装和使用 windows环境]]></title>
    <url>%2Fblog%2F2018%2F10%2F30%2Fzookeeper%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8-windows%E7%8E%AF%E5%A2%83%2F</url>
    <content type="text"><![CDATA[简介1、ZooKeeper是一个分布式的，开放源码的分布式应用程序协调服务，是Google的Chubby一个开源的实现，是Hadoop和Hbase的重要组件。它是一个为分布式应用提供一致性服务的软件，提供的功能包括：配置维护、域名服务、分布式同步、组服务等。2、ZooKeeper的目标就是封装好复杂易出错的关键服务，将简单易用的接口和性能高效、功能稳定的系统提供给用户。3、ZooKeeper包含一个简单的原语集，提供Java和C的接口。4、ZooKeeper代码版本中，提供了分布式独享锁、选举、队列的接口，代码在zookeeper-3.4.12\src\recipes。其中分布锁和队列有Java和C两个版本，选举只有Java版本。 下载Apache官方最新版本为：3.4.12下载地址：http://mirror.bit.edu.cn/apache/zookeeper/stable/zookeeper-3.4.12.tar.gz 安装解压到指定目录下 D:\dubbo\zookeeper-3.4.12修改zoo_sample.cfg 文件名(D:\dubbo\zookeeper-3.4.12\conf) 为 zoo.cfg主要修改一下日志位置，具体配置文件如下：1234567891011121314151617181920212223242526272829303132333435363738# The number of milliseconds of each tick#tickTime：这个时间是作为 Zookeeper 服务器之间或客户端与服务器之间维持心跳的时间间隔，也就是每个 tickTime 时间就会发送一个心跳。 #默认情况下最小的会话超时时间为两倍的tickTime tickTime=2000# The number of ticks that the initial # synchronization phase can take #zookeeper集群中的包含多台server, 其中一台为leader, 集群中其余的server为follower. initLimit参数配置初始化连接时, #follower和leader之间的最长心跳时间. 此时该参数设置为5, 说明时间限制为5倍tickTime, 即5*2000=10000ms=10s. initLimit=10# The number of ticks that can pass between # sending a request and getting an acknowledgement#该参数配置leader和follower之间发送消息, 请求和应答的最大时间长度. 此时该参数设置为2, 说明时间限制为2倍tickTime, 即4000ms. syncLimit=5# the directory where the snapshot is stored.# do not use /tmp for storage, /tmp here is just # example sakes.#dataDir：顾名思义就是 Zookeeper 保存数据的目录，默认情况下，Zookeeper 将写数据的日志文件也保存在这个目录里。 dataDir=D:\\dubbo\\zookeeper-3.4.12-1\\data#dataLogDir：顾名思义就是 Zookeeper 保存日志文件的目录 dataLogDir=D:\\dubbo\\zookeeper-3.4.12-1\\log# the port at which the clients will connect#clientPort：这个端口就是客户端连接 Zookeeper 服务器的端口，Zookeeper 会监听这个端口，接受客户端的访问请求。 clientPort=2181# the maximum number of client connections.# increase this if you need to handle more clients#maxClientCnxns：限制连接到 ZooKeeper 的客户端的数量 #maxClientCnxns=60## Be sure to read the maintenance section of the # administrator guide before turning on autopurge.## http://zookeeper.apache.org/doc/current/zookeeperAdmin.html#sc_maintenance## The number of snapshots to retain in dataDir#autopurge.snapRetainCount=3# Purge task interval in hours# Set to &quot;0&quot; to disable auto purge feature#autopurge.purgeInterval=1 配置文件简单解析1、tickTime：这个时间是作为 Zookeeper 服务器之间或客户端与服务器之间维持心跳的时间间隔，也就是每个 tickTime 时间就会发送一个心跳。2、dataDir：顾名思义就是 Zookeeper 保存数据的目录，默认情况下，Zookeeper 将写数据的日志文件也保存在这个目录里。3、dataLogDir：顾名思义就是 Zookeeper 保存日志文件的目录4、clientPort：这个端口就是客户端连接 Zookeeper 服务器的端口，Zookeeper 会监听这个端口，接受客户端的访问请求。 启动进入到bin目录，并且启动zkServer.cmd，这个脚本中会启动一个java进程(不可关闭，造成客户端无法访问)启动后jps可以看到QuorumPeerMain的进程也可以启动客户端连接一下OK，安装成功，很简单。 个人博客：去年夏天参考博客：zookeeper安装和使用 windows环境]]></content>
      <categories>
        <category>RPC</category>
      </categories>
      <tags>
        <tag>Zookeeper</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Dubbo入门---搭建一个最简单的Demo框架]]></title>
    <url>%2Fblog%2F2018%2F10%2F30%2FDubbo%E5%85%A5%E9%97%A8-%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E6%9C%80%E7%AE%80%E5%8D%95%E7%9A%84Demo%E6%A1%86%E6%9E%B6%2F</url>
    <content type="text"><![CDATA[Dubbo背景和简介Dubbo开始于电商系统，因此在这里先从电商系统的演变讲起。1.单一应用框架(ORM)当网站流量很小时，只需一个应用，将所有功能如下单支付等都部署在一起，以减少部署节点和成本。缺点：单一的系统架构，使得在开发过程中，占用的资源越来越多，而且随着流量的增加越来越难以维护。2.垂直应用框架(MVC)垂直应用架构解决了单一应用架构所面临的扩容问题，流量能够分散到各个子系统当中，且系统的体积可控，一定程度上降低了开发人员之间协同以及维护的成本，提升了开发效率。缺点：但是在垂直架构中相同逻辑代码需要不断的复制，不能复用。 3.分布式应用架构(RPC)当垂直应用越来越多，应用之间交互不可避免，将核心业务抽取出来，作为独立的服务，逐渐形成稳定的服务中心。4.流动计算架构(SOA)随着服务化的进一步发展，服务越来越多，服务之间的调用和依赖关系也越来越复杂，诞生了面向服务的架构体系(SOA)，也因此衍生出了一系列相应的技术，如对服务提供、服务调用、连接处理、通信协议、序列化方式、服务发现、服务路由、日志输出等行为进行封装的服务框架。 单一应用架构 当网站流量很小时，只需一个应用，将所有功能都部署在一起，以减少部署节点和成本。 此时，用于简化增删改查工作量的 数据访问框架(ORM) 是关键。 垂直应用架构 当访问量逐渐增大，单一应用增加机器带来的加速度越来越小，将应用拆成互不相干的几个应用，以提升效率。 此时，用于加速前端页面开发的 Web框架(MVC) 是关键。 分布式服务架构 当垂直应用越来越多，应用之间交互不可避免，将核心业务抽取出来，作为独立的服务，逐渐形成稳定的服务中心，使前端应用能更快速的响应多变的市场需求。 此时，用于提高业务复用及整合的 分布式服务框架(RPC) 是关键。 流动计算架构 当服务越来越多，容量的评估，小服务资源的浪费等问题逐渐显现，此时需增加一个调度中心基于访问压力实时管理集群容量，提高集群利用率。 此时，用于提高机器利用率的 资源调度和治理中心(SOA) 是关键。 Dubbo是什么Dubbo是：一款分布式服务框架高性能和透明化的RPC远程服务调用方案SOA服务治理方案每天为2千多个服务提供大于30亿次访问量支持，并被广泛应用于阿里巴巴集团的各成员站点以及别的公司的业务中。 Dubbo架构Provider: 暴露服务的服务提供方。Consumer: 调用远程服务的服务消费方。Registry: 服务注册与发现的注册中心。Monitor: 统计服务的调用次数和调用时间的监控中心。 调用流程0.服务容器负责启动，加载，运行服务提供者。1.服务提供者在启动时，向注册中心注册自己提供的服务。2.服务消费者在启动时，向注册中心订阅自己所需的服务。3.注册中心返回服务提供者地址列表给消费者，如果有变更，注册中心将基于长连接推送变更数据给消费者。4.服务消费者，从提供者地址列表中，基于软负载均衡算法，选一台提供者进行调用，如果调用失败，再选另一台调用。5.服务消费者和提供者，在内存中累计调用次数和调用时间，定时每分钟发送一次统计数据到监控中心。 Dubbo注册中心对于服务提供方，它需要发布服务，而且由于应用系统的复杂性，服务的数量、类型也不断膨胀；对于服务消费方，他关心如何获取到它所需要的服务，而面对复杂的应用系统，需要管理大量的服务调用。对于服务提供方和服务消费方来说，他们还有可能兼具这两种角色，即既需要提供服务，有需要消费服务。 通过将服务统一管理起来，可以有效地优化内部应用对服务发布/使用的流程和管理。服务注册中心可以通过特定协议来完成服务对外的统一。 Dubbo提供的注册中心有如下几种类型可供选择： Multicast注册中心 Zookeeper注册中心 Redis注册中心 Simple注册中心 Dubbo优缺点优点：1.透明化的远程方法调用&nbsp;&nbsp;&nbsp;&nbsp;像调用本地方法一样调用远程方法；只需简单配置，没有任何API侵入。2.软负载均衡及容错机制&nbsp;&nbsp;&nbsp;&nbsp;可在内网替代nginx lvs等硬件负载均衡器。3.服务注册中心自动注册 &amp; 配置管理&nbsp;&nbsp;&nbsp;&nbsp;不需要写死服务提供者地址，注册中心基于接口名自动查询提供者ip。&nbsp;&nbsp;&nbsp;&nbsp;使用类似zookeeper等分布式协调服务作为服务注册中心，可以将绝大部分项目配置移入zookeeper集群。4.服务接口监控与治理&nbsp;&nbsp;&nbsp;&nbsp;Dubbo-admin与Dubbo-monitor提供了完善的服务接口管理与监控功能，针对不同应用的不同接口，可以进行 多版本，多协议，多注册中心管理。缺点：只支持JAVA语言 Dubbo入门Demo了解了Dubbo以后，自然要搭建一个简单的Demo实现。本文采用Dubbo与Zookeeper、Spring框架的整合。主要步骤：1.安装Zookeeper,启动；2.创建MAVEN项目，构建Dubbo+Zookeeper+Spring实现的简单Demo；3.安装Dubbo-admin，实现监控。 Zookeeper介绍与安装本Demo中的Dubbo注册中心采用的是Zookeeper。为什么采用Zookeeper呢？Zookeeper是一个分布式的服务框架，是树型的目录服务的数据存储，能做到集群管理数据 ，这里能很好的作为Dubbo服务的注册中心。Dubbo能与Zookeeper做到集群部署，当提供者出现断电等异常停机时，Zookeeper注册中心能自动删除提供者信息，当提供者重启时，能自动恢复注册数据，以及订阅请求。具体的安装方法在此不一一叙述，可参考博文： zookeeper安装和使用 windows环境安装完成后，进入到bin目录，并且启动zkServer.cmd，这个脚本中会启动一个java进程：(注：需要先启动zookeeper后，后续dubbo demo代码运行才能使用zookeeper注册中心的功能，不可关闭) MAVEN项目 项目结构： 主要分三大模块： dubbo-api : 存放公共接口； dubbo-provider : 提供远程服务； dubbo-consumer : 调用远程服务； dubbo-consumer2 : 调用远程服务；具体的项目在此不一一叙述，整个项目的代码已经上传到我的github上https://github.com/wangrui15034005712/dubboTest.git 欢迎下载查看。运行项目，先确保provider已被运行后再启动consumer模块：当然，这只是一个模拟的项目，实际中有多提供者多消费者情况，比这要复杂的多，当然只有这样才能体现dubbo的特性。 Dubbo管理控制台介绍下载dubbo-admin，可自行根据网上介绍安装。大致做法就是将dubbo-admin中 的某个文件夹内容替换到tomcat的conf中，再运行tomcat即可。但我在实际操作中发现JDK8无法运行，后来找到一个JDK8可以实现的dubbo-admin版本，下载地址：链接: https://pan.baidu.com/s/1dxu1NctjLowFQylINul3gA 提取码: 5ci8 。把下载的dubbo-admin-2.6.0.war放置tomcat下的webapp中,访问localhost:8080/dubbo-admin-2.6.0即可访问管理控制台，账号密码默认都是root。 个人博客：去年夏天参考博客：Dubbo入门—搭建一个最简单的Demo框架]]></content>
      <categories>
        <category>SOA</category>
      </categories>
      <tags>
        <tag>Zookeeper</tag>
        <tag>Dubbo</tag>
        <tag>Maven</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo博客实现站内搜索]]></title>
    <url>%2Fblog%2F2018%2F10%2F29%2FHexo%E5%8D%9A%E5%AE%A2%E5%AE%9E%E7%8E%B0%E7%AB%99%E5%86%85%E6%90%9C%E7%B4%A2%2F</url>
    <content type="text"><![CDATA[&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当博文慢慢变多的时候，标签和分类已经不能提供太大的作用，无法准确的定位到自己想要看的博客上去，所以添加一个本站内搜索功能是很有必要的，以 hexo-theme-shana-master 主题为例。Hexo提供的Local Search,原理是通过hexo-generator-search插件在本地生成一个search.xml文件，搜索的时候从这个文件中根据关键字检索出相应的链接。 基本思路123利用插件hexo-generator-search生成xml文件利用jQuery.ajax解析xml寻找所用主题对应文件修改 主要步骤安装插件直接在自己的博客文件夹下（我的是Hexo）点击鼠标右键选择Git Bash Here12cnpm install hexo-generator-search --savecnpm install hexo-generator-searchdb --save 修改站点配置文件博客Hexo下的_config.yml文件，进行编辑。123456#搜索search: path: search.xml #生成的路径 field: post format: html limit: 10000 编写站内搜索模块的代码(index.ejs)123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107&lt;div id=&quot;site_search&quot; align=&apos;center&apos; style=&quot;margin:15px 0 0 0;&quot;&gt; &lt;input type=&quot;text&quot; id=&quot;local-search-input&quot; name=&quot;q&quot; results=&quot;0&quot; placeholder=&quot;本站搜索&quot; style=&apos;width:180px;height:25px;&apos;/&gt; &lt;div id=&quot;local-search-result&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;script src=&quot;//apps.bdimg.com/libs/jquery/2.1.4/jquery.min.js&quot;&gt;&lt;/script&gt;&lt;script&gt;var searchFunc = function(path, search_id, content_id) &#123;&apos;use strict&apos;;$.ajax(&#123; url : path, dataType : &quot;xml&quot;, success : function(xmlResponse) &#123; // get the contents from search data var datas = $(&quot;entry&quot;, xmlResponse).map(function() &#123; return &#123; title : $(&quot;title&quot;, this).text(), content : $(&quot;content&quot;, this).text(), url : $(&quot;url&quot;, this).text() &#125;; &#125;).get(); var $input = document.getElementById(search_id); var $resultContent = document.getElementById(content_id); $input.addEventListener(&apos;input&apos;, function() &#123; var str = &apos;&lt;ul class=\&quot;search-result-list\&quot;&gt;&apos;; var keywords = this.value.trim().toLowerCase().split( /[\s\-]+/); $resultContent.innerHTML = &quot;&quot;; if (this.value.trim().length &lt;= 0) &#123; return; &#125; // perform local searching datas.forEach(function(data) &#123; var isMatch = true; var content_index = []; var data_title = data.title.trim().toLowerCase(); var data_content = data.content.trim().replace( /&lt;[^&gt;]+&gt;/g, &quot;&quot;).toLowerCase(); var data_url = data.url; var index_title = -1; var index_content = -1; var first_occur = -1; // only match artiles with not empty titles and contents if (data_title != &apos;&apos; &amp;&amp; data_content != &apos;&apos;) &#123; keywords.forEach(function(keyword, i) &#123; index_title = data_title.indexOf(keyword); index_content = data_content.indexOf(keyword); if (index_title &lt; 0 &amp;&amp; index_content &lt; 0) &#123; isMatch = false; &#125; else &#123; if (index_content &lt; 0) &#123; index_content = 0; &#125; if (i == 0) &#123; first_occur = index_content; &#125; &#125; &#125;); &#125; // show search results if (isMatch) &#123; str += &quot;&lt;li&gt;&lt;a href=&apos;&quot; + data_url + &quot;&apos; class=&apos;search-result-title&apos;&gt;&quot; + data_title + &quot;&lt;/a&gt;&quot;; var content = data.content.trim().replace( /&lt;[^&gt;]+&gt;/g, &quot;&quot;); if (first_occur &gt;= 0) &#123; // cut out 100 characters var start = first_occur - 20; var end = first_occur + 80; if (start &lt; 0) &#123; start = 0; &#125; if (start == 0) &#123; end = 100; &#125; if (end &gt; content.length) &#123; end = content.length; &#125; var match_content = content.substr(start, end); // highlight all keywords keywords.forEach(function(keyword) &#123; var regS = new RegExp(keyword, &quot;gi&quot;); match_content = match_content.replace( regS, &quot;&lt;em class=\&quot;search-keyword\&quot;&gt;&quot; + keyword + &quot;&lt;/em&gt;&quot;); &#125;); str += &quot;&lt;p class=\&quot;search-result\&quot;&gt;&quot; + match_content + &quot;...&lt;/p&gt;&quot; &#125; str += &quot;&lt;/li&gt;&quot;; &#125; &#125;); str += &quot;&lt;/ul&gt;&quot;; $resultContent.innerHTML = str; &#125;); &#125;&#125;);&#125;var search_path = &quot;&lt;%= config.search.searchpath %&gt;&quot;;if (search_path.length == 0) &#123; search_path = &quot;search.xml&quot;;&#125;var path = &quot;/&quot; + search_path;searchFunc(path, &apos;local-search-input&apos;, &apos;local-search-result&apos;);&lt;/script&gt; 大功告成！个人博客：去年夏天推荐博客：Hexo博客添加文章目录]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>Nodejs</tag>
        <tag>Html</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo博客添加文章目录]]></title>
    <url>%2Fblog%2F2018%2F10%2F29%2FHexo%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0%E6%96%87%E7%AB%A0%E7%9B%AE%E5%BD%95%2F</url>
    <content type="text"><![CDATA[Hexo博客添加嵌入边栏的文章目录，以 hexo-theme-shana-master 主题为例。 第一步：编写文章目录模块的代码themes\hexo-theme-shana-master\layout\_partial 下新建 toc.ejs 输入如下内容：12345678910111213141516171819202122232425&lt;!-- 目录内容 --&gt;&lt;p class="show-toc-btn" id="show-toc-btn" onclick="showToc();" style="display:none"&gt; &lt;span class="btn-bg"&gt;&lt;/span&gt; &lt;span class="btn-text"&gt;文章导航&lt;/span&gt;&lt;/p&gt;&lt;div id="toc-article" class="toc-article" &gt; &lt;span id="toc-close" class="toc-close" title="隐藏导航" onclick="showBtn();"&gt;×&lt;/span&gt; &lt;strong class="toc-title"&gt;文章目录&lt;/strong&gt; &lt;%- toc(post.content) %&gt;&lt;/div&gt;&lt;script type="text/javascript"&gt;function showToc()&#123; var toc_article = document.getElementById("toc-article"); var show_toc_btn = document.getElementById("show-toc-btn"); toc_article.setAttribute("style","display:block"); show_toc_btn.setAttribute("style","display:none");&#125;;function showBtn()&#123; var toc_article = document.getElementById("toc-article"); var show_toc_btn = document.getElementById("show-toc-btn"); toc_article.setAttribute("style","display:none"); show_toc_btn.setAttribute("style","display:block");&#125;;&lt;/script&gt;&lt;!-- 目录内容结束 --&gt; 第二步：编写文章目录模块的样式themes\hexo-theme-shana-master\source\css\_partial 下新建 toc.styl 输入如下内容：123456789101112131415161718192021222324&lt;style&gt;#container .show-toc-btn,#container .toc-article&#123;display:block&#125;.toc-article&#123;z-index:100;background:#fff;border:1px solid #ccc;max-width:250px;min-width:150px;max-height:500px;overflow-y:auto;-webkit-box-shadow:5px 5px 2px #ccc;box-shadow:5px 5px 2px #ccc;font-size:12px;padding:10px;position:fixed;right:35px;top:129px&#125;.toc-article .toc-close&#123;font-weight:700;font-size:20px;cursor:pointer;float:right;color:#ccc&#125;.toc-article .toc-close:hover&#123;color:#000&#125;.toc-article .toc&#123;font-size:12px;padding:0;line-height:20px&#125;.toc-article .toc .toc-number&#123;color:#333&#125;.toc-article .toc .toc-text:hover&#123;text-decoration:underline;color:#2a6496&#125;.toc-article li&#123;list-style-type:none&#125;.toc-article .toc-level-1&#123;margin:4px 0&#125;.toc-article .toc-child&#123;&#125;@-moz-keyframes cd-bounce-1&#123;0%&#123;opacity:0;-o-transform:scale(1);-webkit-transform:scale(1);-moz-transform:scale(1);-ms-transform:scale(1);transform:scale(1)&#125;60%&#123;opacity:1;-o-transform:scale(1.01);-webkit-transform:scale(1.01);-moz-transform:scale(1.01);-ms-transform:scale(1.01);transform:scale(1.01)&#125;100%&#123;-o-transform:scale(1);-webkit-transform:scale(1);-moz-transform:scale(1);-ms-transform:scale(1);transform:scale(1)&#125;&#125;@-webkit-keyframes cd-bounce-1&#123;0%&#123;opacity:0;-o-transform:scale(1);-webkit-transform:scale(1);-moz-transform:scale(1);-ms-transform:scale(1);transform:scale(1)&#125;60%&#123;opacity:1;-o-transform:scale(1.01);-webkit-transform:scale(1.01);-moz-transform:scale(1.01);-ms-transform:scale(1.01);transform:scale(1.01)&#125;100%&#123;-o-transform:scale(1);-webkit-transform:scale(1);-moz-transform:scale(1);-ms-transform:scale(1);transform:scale(1)&#125;&#125;@-o-keyframes cd-bounce-1&#123;0%&#123;opacity:0;-o-transform:scale(1);-webkit-transform:scale(1);-moz-transform:scale(1);-ms-transform:scale(1);transform:scale(1)&#125;60%&#123;opacity:1;-o-transform:scale(1.01);-webkit-transform:scale(1.01);-moz-transform:scale(1.01);-ms-transform:scale(1.01);transform:scale(1.01)&#125;100%&#123;-o-transform:scale(1);-webkit-transform:scale(1);-moz-transform:scale(1);-ms-transform:scale(1);transform:scale(1)&#125;&#125;@keyframes cd-bounce-1&#123;0%&#123;opacity:0;-o-transform:scale(1);-webkit-transform:scale(1);-moz-transform:scale(1);-ms-transform:scale(1);transform:scale(1)&#125;60%&#123;opacity:1;-o-transform:scale(1.01);-webkit-transform:scale(1.01);-moz-transform:scale(1.01);-ms-transform:scale(1.01);transform:scale(1.01)&#125;100%&#123;-o-transform:scale(1);-webkit-transform:scale(1);-moz-transform:scale(1);-ms-transform:scale(1);transform:scale(1)&#125;&#125;.show-toc-btn&#123;display:none;z-index:10;width:30px;min-height:14px;overflow:hidden;padding:4px 6px 8px 5px;border:1px solid #ddd;border-right:none;position:fixed;right:40px;text-align:center;background-color:#f9f9f9&#125;.show-toc-btn .btn-bg&#123;margin-top:2px;display:block;width:16px;height:14px;background:url(http://7xtawy.com1.z0.glb.clouddn.com/show.png) no-repeat;-webkit-background-size:100%;-moz-background-size:100%;background-size:100%&#125;.show-toc-btn .btn-text&#123;color:#999;font-size:12px&#125;.show-toc-btn:hover&#123;cursor:pointer&#125;.show-toc-btn:hover .btn-bg&#123;background-position:0 -16px&#125;.show-toc-btn:hover .btn-text&#123;font-size:12px;color:#ea8010&#125;.toc-article li ol, .toc-article li ul &#123;margin-left: 30px;&#125;.toc-article ol, .toc-article ul &#123;margin: 10px 0;&#125;&lt;/style&gt; 最后，记得在 toc.styl 中添加 @import _partial/toc 第三步：将文章目录模块整合到文章中在 themes\hexo-theme-shana-master\layout\_partial\article.ejs 中的 &lt;article&gt; &lt;/article&gt; 标签内添加如下内容：12345&lt;% if (!index &amp;&amp; post.toc)&#123; %&gt; &lt;%- partial(&apos;toc&apos;) %&gt; &lt;%- post.content %&gt; &lt;% &#125; %&gt;&lt;% &#125; %&gt; 若想要文章显示目录，在每篇文章开头加入：toc: true 大功告成！个人博客：去年夏天推荐博客：Hexo博客添加文章目录参考博客：Hexo+yilia主题实现文章目录和添加视频]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>Html</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo博客用Leancloud统计文章阅读量]]></title>
    <url>%2Fblog%2F2018%2F10%2F26%2FHexo%E5%8D%9A%E5%AE%A2%E7%94%A8Leancloud%E7%BB%9F%E8%AE%A1%E6%96%87%E7%AB%A0%E9%98%85%E8%AF%BB%E9%87%8F%2F</url>
    <content type="text"><![CDATA[Hexo博客用Leancloud统计文章阅读量，以 hexo-theme-shana-master 主题为例。 第一步：注册LeanCloud账号(GitHub)第二步：LeanCloud应用配置 第三步：Hexo主题配置打开博客根目录/themes/next/下的_config.yml，查找leancloud，填写复制来的App ID和App Key，重新生成、步署博客即可正常统计文章阅读量。12345# leadcloud访问次数统计leancloud_visitors: enable: true app_id: Your AppId app_key: Your AppKey 第四步：域名附赠说明因为AppID以及AppKey是暴露在外的，为了确保只用于我们自己的博客，建议设置Web安全域名，填入自己的博客域名。1.记录文章访问量的唯一标识符是文章的发布日期和文章的标题，因此请确保这两个数值组合的唯一性，如果更改了这两个数值，会造成文章阅读数值的清零重计。 2.初始的文章统计量显示为0。在配置好阅读量统计服务之后，第一次打开博文时，会自动向服务器发送数据，该数据会被记录在对应的应用的Counter表中。 3.修改Counter表中的time字段的数值，可以修改文章的访问量。双击具体的数值，修改之后回车即可保存。 大功告成！个人博客：去年夏天推荐博客：NexT主题用Leancloud统计文章阅读量参考博客：NexT主题下，用Leancloud统计文章阅读量]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>Leancloud</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo博客添加打赏功能]]></title>
    <url>%2Fblog%2F2018%2F10%2F25%2FHexo%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0%E6%89%93%E8%B5%8F%E5%8A%9F%E8%83%BD%2F</url>
    <content type="text"><![CDATA[基本思路是将微信和支付宝的收款二维码放到每篇文章的最后，打赏的时候扫下二维码就可以了。以 hexo-theme-shana-master 主题为例： 第一步：编写打赏模块的代码themes\hexo-theme-shana-master\layout\_partial 下新建 donate.ejs 输入如下内容：123456789101112131415161718192021222324252627&lt;! -- 添加捐赠图标 --&gt; &lt;div align='center' style='margin-top:80px;'&gt; &lt;div id='donate_board' class="donate_bar"&gt; &lt;a id="btn_donate" class="btn_donate" href="javascript:;" title="打赏"&gt;&lt;/a&gt; &lt;span class="donate_txt"&gt; &amp;uarr;&lt;br&gt; &lt;%=theme.donate_message%&gt; &lt;/span&gt; &lt;/div&gt; &lt;div id="donate_guide" class="donate_bar hidden" &gt; &lt;!-- 支付宝打赏图案 --&gt; &lt;img src="/photos/donate/zhifubao.jpg" alt="支付宝打赏"&gt; &lt;!-- 微信打赏图案 --&gt; &lt;img src="/photos/donate/weixin.png" alt="微信打赏"&gt; &lt;/div&gt; &lt;script&gt; document.getElementById('btn_donate').onclick = function()&#123; $('#donate_board').addClass('hidden'); $('#donate_guide').removeClass('hidden'); &#125; document.getElementById('donate_guide').onclick = function()&#123; $('#donate_guide').addClass('hidden'); $('#donate_board').removeClass('hidden'); &#125; &lt;/script&gt; &lt;/div&gt;&lt;! -- 添加捐赠图标 --&gt; 第二步： 编写打赏模块的样式themes\hexo-theme-shana-master\source\css\_partial 下新建 donate.styl 输入如下内容：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647.donate_bar &#123; text-align: center; margin-top: 5%&#125;.donate_bar a.btn_donate &#123; display: inline-block; width: 82px; height: 82px; margin-left: auto; margin-right: auto; background: url(http://img.t.sinajs.cn/t5/style/images/apps_PRF/e_media/btn_reward.gif)no-repeat; -webkit-transition: background 0s; -moz-transition: background 0s; -o-transition: background 0s; -ms-transition: background 0s; transition: background 0s&#125;.donate_bar a.btn_donate:hover &#123; background-position: 0 -82px&#125;.donate_bar .donate_txt &#123; display: block; color: #9d9d9d; font: 14px/2 "Microsoft Yahei"&#125;.donate_bar.hidden&#123; display: none&#125;.post-donate&#123; margin-top: 80px;&#125;#donate_guide&#123; height: 210px; width: 420px; margin: 0 auto;&#125;#donate_guide img&#123; height: 200px; height: 200px;&#125; 最后，记得在 style.styl 中添加 @import _partial/donate 第三步： 讲打赏模块整合到文章中在 themes\hexo-theme-shana-master\layout\_partial\article.ejs 中的 &lt;article&gt; &lt;/article&gt; 标签内添加如下内容：123&lt;% if (!index &amp;&amp; theme.donate &amp;&amp; post.donate)&#123; %&gt; &lt;%- partial(&apos;donate/donate&apos;) %&gt;&lt;% &#125; %&gt; 第四步： 编写配置文件我们在\themes\hexo-theme-shana-master\_config.yml主题文件中关闭和打开打赏功能，还可以自定义设置打赏文案。1234#是否开启打赏功能donate: true#打赏文案donate_message: 欣赏此文？求鼓励，求支持！ 如果我们要针对某一篇文章关闭打赏功能的话，只需要在该篇文章上添加 donate: false 代码即可。 大功告成！个人博客：去年夏天推荐博客：Hexo博客添加打赏功能参考博客：Hexo 博客添加打赏功能]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>Html</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo博客添加图片音乐及视频]]></title>
    <url>%2Fblog%2F2018%2F10%2F23%2FHexo%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0%E5%9B%BE%E7%89%87%E9%9F%B3%E4%B9%90%E5%8F%8A%E8%A7%86%E9%A2%91%2F</url>
    <content type="text"><![CDATA[Hexo博客添加图片音乐及视频。 插入外部链接图片1![“图片描述”](“图片地址”) 添加本地图片在\hexo\source目录下新建文件夹，命名为images或者其他你喜欢的名字，然后编辑你的md博文，插入下面的代码样式：1![“图片描述”](/images/你的图片名字.JPG) 插入音乐1&lt;iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=660 height=86 src="//music.163.com/outchain/player?type=2&amp;id=1306515028&amp;auto=0&amp;height=66"&gt;&lt;/iframe&gt; 插入视频1&lt;iframe height=498 width=660 src='//player.youku.com/embed/XMzgyNTI5NTY1Mg==' frameborder=0 'allowfullscreen'&gt;&lt;/iframe&gt; 个人博客：去年夏天相关链接: 去年夏天参考博客：hexo博客添加图片，音乐，视频]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>Html</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo-Github搭建个人博客二]]></title>
    <url>%2Fblog%2F2018%2F10%2F19%2FHexo-Github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E4%BA%8C%2F</url>
    <content type="text"><![CDATA[本文主要介绍了域名解析绑定及SSH部署博客到Github。 Github绑定域名相关步骤Github注册访问Github官方地址 Github输入用户名、电子邮箱、密码,然后点击注册按钮.–&gt;之后验证邮箱（进入自己邮箱进行验证）在github上面创建项目(借用github服务器)静态网站在git命令框中安装git插件(cnpm install hexo-deployer-git –save)打开Hexo安装目录，编辑_config.yml文件1234deploy: type: git repository: git@github.com:wangrui15034005712/wangrui15034005712.github.io.git branch: master Git使用ssh密钥git支持https和git两种传输协议，github分享链接时会有两种协议可选：我们要想生成SSH key，首先就得先安装 SSH，对于 Linux 和 Mac 系统，其默认是安装 SSH 的，而对于 Windows 系统，其默认是不安装 SSH 的，不过由于我们安装了 Git Bash，其也应该自带了 SSH. 可以通过在 Git Bash 中输入ssh命令，查看本机是否安装 SSH：初次使用git的用户要使用git协议大概需要三个步骤：一、生成密钥对二、设置远程仓库（本文以github为例）上的公钥三、把git的 remote url 修改为git协议（以上两个步骤初次设置过以后，以后使用都不需要再次设置，此步骤视以后项目的remote url而定，如果以后其他项目的协议为https则需要此步骤）打开Hexo安装目录，右键git bash here点击打开你的id_rsa.pub文件，复制下里面的内容，然后登录进去你的github；至此，Github步骤结束。 域名购买解析国内可以去几个大型的域名商去购买即可，直接搜域名购买，搜索引擎前几的都可以(万网、百度云、腾讯云、新网、西部数码、阿里云)，如果国外的可以去godday、name等站点去购买访问阿里云官方地址 阿里云输入会员名、手机号、密码,然后点击注册按钮.–&gt;之后验证手机(可通过淘宝或者支付宝进行登陆)至此，域名解析步骤结束，我们可以通过自己的域名进行访问了。]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>Github</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo-Github搭建个人博客]]></title>
    <url>%2Fblog%2F2018%2F10%2F15%2FHexo-Github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[首先呢，先说一下吧，这是本人第一次写博客，也是在大学生时代的一个想法，现在终于实现了。花了几天的时间，研究了一下，颇有收获，而我在找资料的过程中，都是这个博客找点那个博客找点，都没有一个博客的教程是很详细且到位的，哎，醉了，感谢你们一直看到这里听我在这里碎碎念，最后啰嗦一句，有什么问题，及时下方评论(不是私信)，因为我几乎每天登陆博客，所以看到后会及时回复大家的。环境配置： 电脑系统为window 10专业版，64位，Nodejs, Github, Hexo, livere, Leancloud, ShareSDK, Dalao。 相关步骤安装Node.js和配置好Node.js环境,我的版本10.11.01、访问官方地址 https://nodejs.org/en/download/ 根据自己的系统进行下载。2、检测是否安装成功：点击开始-运行-cmd（win+R），打开dos，输入“node –version”检查Nodejs版本；输入“npm –version”检查npm版本：3、这里我们要分两步，第一步修改NPM的缓存目录和全局目录路径，将对应的模块目录改到D盘nodejs的安装目录，第二步是配置npm和nodejs的环境变量，这样nodejs才能正确地调用对应的模块。我们先来做第一步，在nodejs目录下创建两个目录，分别是node_cache和node_global，这是用来放安装过程的缓存文件以及最终的模块配置位置。配置完成后，执行下面这两个命令：npm config set prefix “D:\Program Files (x86)\nodejs\node_global”npm config set cache “D:\Program Files (x86)\nodejs\node_cache”将npm的全局模块目录和缓存目录配置到我们刚才创建的那两个目录：然后我们来配置npm的环境变量和nodejs的环境变量。在计算机图标上点右键，选属性，然后点击高级系统配置，弹出来的新窗口右下角有个环境路径，点击去，就能看到环境路径的配置界面，我们点击新建。然后在弹出来的窗口里，变量名填：NODE_PATH变量值填：D:\Program Files (x86)\nodejs\node_global\node_modules由于npm的镜像是国外的，为了加快下载速度，可以通过国内淘宝镜像来下载，所以采用cnpm，当然也可以不采用cnpm，直接把镜像指向淘宝镜像，接下来我说下这两种方式：(1)直接指定registry为淘宝镜像：npm config set registry https://registry.npm.taobao.org(2)安装cnpm：npm install -g cnpm –registry=https://registry.npm.taobao.org 输入上述命令即可安装，另外要注意的是，安装完后，输入cnpm -v进行检测。至此，node.js安装步骤完毕。 安装Git,我的版本2.14.21、访问官方地址 https://git-scm.com/download/win windows64版本检测是否安装成功：点击开始-运行-cmd（win+R），打开dos，输入“git –version”检查git版本；你需要运行命令来配置你的用户名和邮箱：12git config --global user.name "wangrui"git config --global user.email "150340057121990@163.com" 注意：（引号内请输入你自己设置的名字，和你自己的邮箱）此用户名和邮箱是git提交代码时用来显示你身份和联系方式的，并不是github用户名和邮箱至此，安装git步骤结束。 安装hexo首先在本地磁盘中建立一个Hexo文件夹用于存储本地文件(做本地文件保存以及测试使用)在Hexo文件夹中右键，单击Git Bash Here，git终端开启。由于已经使用了淘宝镜像cnpm，直接使用即可在git命令框中安装Hexo(cnpm install -g hexo)在git命令框中git+hexo模块(cnpm install hexo-server –save)hexo基本命令hexo服务启动 hexo server 简写 hexo shexo删除文件 hexo clean 简写 hexo cleanhexo生成文件 hexo generate 简写 hexo ghexo部署文件 hexo deploy 简写 hexo d浏览器输入http://localhost:4000 按理来说应该会出现本地访问页面注意：访问本地页面的时候hexo server 不可以按ctrl+c停止服务，否则会报404本地测试:至此，安装hexo步骤结束,博客基本搭建完成！随后我会陆续更新自己的博客，评论，打赏，分类，标签，分享，域名绑定，照片墙等等陆续上线！个人博客：去年夏天推荐博客：Hexo-Github域名绑定及SSH密钥配置参考博客：hexo+github搭建个人博客(超详细教程)]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>Hexo</tag>
        <tag>Nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2Fblog%2F2018%2F10%2F11%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
      <categories>
        <category>心情</category>
      </categories>
      <tags>
        <tag>test</tag>
      </tags>
  </entry>
</search>
